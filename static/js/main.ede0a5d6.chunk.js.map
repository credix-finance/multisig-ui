{"version":3,"sources":["credix/api.ts","credix/types/program.types.ts","context/connection.tsx","components/Multisig.tsx","utils/idl.ts","utils/ids.ts","credix/utils/format.utils.ts","components/transactions/ChangeThreshold.tsx","credix/utils/async.utils.ts","components/transactions/ProgramUpgrade.tsx","components/transactions/IdlUpgrade.tsx","components/transactions/SetOwners.tsx","components/transactions/ActivateDeal.tsx","components/transactions/TransferToken.tsx","hooks/useOwnedTokenAccounts.ts","components/transactions/FreezeThawGlobalMarketState.tsx","components/transactions/CredixPass.tsx","credix/utils/math.utils.ts","credix/utils/deal.utils.ts","credix/consts.ts","idl/index.ts","hooks/useMultisigProgram.tsx","components/Notification.tsx","components/Header.tsx","components/Footer.tsx","components/Layout.tsx","models/TokenAccountContext.ts","context/AccountContext.tsx","hooks/useProgramSubscription.ts","App.tsx","reportWebVitals.ts","index.tsx","credix/types/solana.types.ts","credix/config.ts"],"names":["constructProgram","provider","Program","config","idl","clusterConfig","programId","getDealAccounts","multiAsync","a","program","account","deal","all","findPDA","seeds","PublicKey","findProgramAddress","findGlobalMarketStatePDA","globalMarketSeed","seed","encodeSeedString","findSigningAuthorityPDA","globalMarketStatePDA","toBuffer","getGlobalMarketStateAccountData","globalMarketState","fetch","getBaseMintPK","dealPk","liquidityPoolTokenMintAccount","findDealPDA","publicKey","dealNumber","globalMarketStateSeed","borrowerSeed","dealInfo","SEEDS","DEAL_INFO","dealNumberBN","BN","toArrayLike","Buffer","mapDealsToMarket","deals","setDeals","marketDeals","forEach","borrower","expectedDealPda","console","log","toString","push","findPendingDealsForMarket","_deals","_clusterTime","getClusterTime","connection","pendingDeals","Promise","clusterTime","Error","mapDealToStatus","DealStatus","PENDING","getSlot","slot","getBlockTime","catch","Date","now","getAssociatedBaseTokenAddressPK","offCurve","_baseMintPK","Token","getAssociatedTokenAddress","ASSOCIATED_TOKEN_PROGRAM_ID","TOKEN_PROGRAM_ID","getGatekeeperNetwork","globalMarketStateData","gatekeeperNetwork","getGatewayToken","userPK","GATEWAY_TOKEN_ACCOUNT_OWNER_FIELD_OFFSET","GATEWAY_TOKEN_ACCOUNT_GATEKEEPER_NETWORK_FIELD_OFFSET","ownerFilter","memcmp","offset","bytes","toBase58","gatekeeperNetworkFilter","filters","getProgramAccounts","gatewayProgramId","accountsResponse","length","dataToGatewayToken","GatewayTokenData","fromAccount","data","pubkey","getLiquidityPoolAssociatedBaseTokenAddressPK","signingAuthorityPDA","activateDeal","borrowerPk","multisigPk","_userAssociatedBaseTokenAddressPK","_liquidityPoolAssociatedBaseTokenAddressPK","_globalMarketStatePDA","_signingAuthorityPDA","_getGatewayToken","_getCredixPassPDA","findCredixPassPDA","userAssociatedBaseTokenAddressPK","baseMintPK","liquidityPoolAssociatedBaseTokenAddressPK","gatewayToken","credixPass","instruction","accounts","owner","signingAuthority","liquidityPoolTokenAccount","associatedTokenProgram","borrowerTokenAccount","baseMintAccount","tokenProgram","systemProgram","SystemProgram","rent","web3","SYSVAR_RENT_PUBKEY","fetchGlobalMarketStateFrozen","_withdrawalFee","_interestFee","_globalMarketSeed","_baseMintPk","_treasuryPk","_gatekeeperNetworkPk","withdrawalFee","interestFee","baseMintPk","treasuryPk","gatekeeperNetworkPk","from","anchor","utf8","encode","globalMarketStatePda","globalMarketStateBump","signingAuthorityPda","signingAuthorityPdaBump","treasuryAssociatedBaseTokenAddress","liquidityPoolBaseTokenAccount","lpTokenMintKeypair","Keypair","generate","initializeMarket","treasury","treasuryPoolTokenAccount","lpTokenMintAccount","signers","freezeGlobalMarketState","thawGlobalMarketState","credixPassSeeds","CREDIX_PASS","issueCredixPass","isUnderwriter","isBorrower","releaseTimestamp","credixPassPDA","createCredixPass","passHolder","updateCredixPass","isActive","getCredixPassInfo","fetchNullable","ENDPOINTS","name","endpoint","chainID","ChainID","MainnetBeta","Devnet","clusterApiUrl","DEFAULT","ConnectionContext","React","createContext","setEndpoint","Connection","sendConnection","env","ConnectionProvider","children","undefined","useState","useMemo","find","end","setProgramIds","useEffect","id","onAccountChange","removeAccountChangeListener","onSlotChange","removeSlotChangeListener","Provider","value","useConnection","useContext","useConnectionConfig","context","NO_SHOW_LIST","AddTransactionDialog","multisig","open","onClose","didAddTransaction","fullWidth","maxWidth","variant","component","style","paddingBottom","disablePadding","ixLabel","tx","multisigClient","equals","BPF_LOADER_UPGRADEABLE_PID","primary","secondary","coder","sighash","slice","tag","amountBuf","amountParsed","u64","fromBuffer","toNumber","releaseDate","credixPassPk","active","underwriter","releaseDateBuffer","releaseDateUnix","Multisig","fixed","position","bottom","right","display","flexDirection","NewMultisigButton","MultisigInstance","setOpen","border","width","height","borderRadius","onClick","NewMultisigDialog","useMultisigProgram","multisigAccount","setMultisigAccount","transactions","setTransactions","showSignerDialog","setShowSignerDialog","showAddTransactionDialog","setShowAddTransactionDialog","forceRefresh","setForceRefresh","then","err","error","transaction","txs","sort","b","didExecute","txsFiltered","filter","includes","subscribe","on","marginBottom","marginTop","padding","marginLeft","marginRight","color","textAlign","elevation","flexGrow","threshold","owners","title","arrow","map","TxListItem","SignerDialog","wallet","history","useHistory","enqueueSnackbar","useSnackbar","setThreshold","zeroAddr","participants","setParticipants","_onClose","maxParticipantLength","setMaxParticipantLength","disableCreate","createMultisig","Account","multisigSize","nonce","p","rpc","createInstruction","instructions","action","signature","label","type","onChange","e","parseInt","target","idx","justifyContent","disabled","str","txAccount","setTxAccount","rows","field","wordBreak","background","float","encodeBase64","ownerSetSeqno","msAccountRows","approve","execute","multisigSigner","executeTransaction","remainingAccounts","t","isSigner","concat","isWritable","button","icon","in","timeout","unmountOnExit","errStr","align","r","AccountsList","signer","setSigner","addrNonce","src","alt","getOwnedTokenAccounts","dataSize","AccountLayout","span","tokenAccount","parseTokenAccount","address","IDL_INSTRUCTION_LAYOUT","rustEnum","struct","encodeInstruction","i","buffer","alloc","TX_SIZE","len","IDL_TAG","reverse","PROGRAM_IDS","url","multisigProgramId","envName","getMultisigProgramIdByUrl","instance","Big","pow","DECIMALS","seedString","utils","ChangeThresholdListItem","ChangeThresholdListItemDetails","changeThreshold","changeThresholdData","txSize","proposer","createTransaction","paddingLeft","paddingRight","runners","callbacks","serialAsync","f","finally","c","func","promises","serialPromises","args","key","stringify","runningPromise","ProgramUpdateListItem","UpgradeProgramListItemDetails","setProgramId","setBuffer","createTransactionAccount","programAddr","bufferAddr","getAccountInfo","programAccount","programdataAddress","spill","accs","SYSVAR_CLOCK_PUBKEY","IdlUpgradeListItem","UpgradeIdlListItemDetails","idlAddress","idlAddr","MultisigSetOwnersListItem","SetOwnersListItemDetails","setOwners","setOwnersData","ActivateDealListItem","ActivateDealListItemDetails","GLOBAL_MARKET_STATE_PDA","setGlobalMarketSeed","dealRows","setDealRows","onBlurGlobalMarketSeed","constructDealRows","activateIx","keys","dealRowsNew","borderBottom","principal","placeholder","onBlur","margin","TransferTokenListItem","TransferTokenListItemDetails","source","setSource","destination","setDestination","amount","setAmount","tokenAccounts","useMultiSigOwnedTokenAccounts","getAssociatedTokenAddressPK","ownerPk","mintPk","sourceAddr","destinationAccAddr","getTokenAccount","sourceTokenAccount","mint","destinationTokenAccAddr","destinationTokenAccount","getMintInfo","tokenMint","TEN","multiplier","decimals","amountInLamports","mul","transferIx","createTransferInstruction","paddingTop","autoWidth","multiSig","results","setResults","ownedTokenAccounts","onLoad","FreezeThawGlobalMarketStateListItem","FreezeThawGlobalMarketStateListItemDetails","frozen","setFrozen","fetchFrozen","globalMarketStateInfo","onSubmit","preventDefault","checked","cursor","CredixPassListItem","CredixPassListItemDetails","setIsBorrower","setIsUnderwriter","setIsActive","setPassHolder","setReleaseTimestamp","setCredixPass","issueUpdate","setIssueUpdate","fetchAndSetPassData","useCallback","passholderKey","isValidPublicKey","holderPublicKey","credixPassIx","selected","Math","round","getTime","applyRatio","to","numerator","denominator","div","ZERO","principalToPay","getPrincipalToRepay","interestToPay","getInterestToRepay","eq","CLOSED","goLiveAt","bitLength","IN_PROGRESS","principalAmountRepaid","minus","interestAmountRepaid","financingFeePercentage","timeToMaturityRatio","timeToMaturityDays","roundDown","getTotalInterest","BORROWER_INFO","version","isMut","vec","defined","kind","fields","types","errors","code","msg","useAnchorWallet","currentNetwork","_rpcEndpoint","currentMultisigProgramId","Wallet","preflightCommitment","commitment","MultisigIdl","ViewTransactionOnExplorerButton","props","urlSuffix","rel","href","Header","multisigAddress","setMultisigAddress","addr","_","isValidPubkey","searchFn","AppBar","boxShadow","Toolbar","flex","BarButton","hrefClient","backgroundColor","outlineWidth","onKeyPress","IconButton","NetworkSelector","startIcon","Link","textDecoration","Button","Typography","fontSize","anchorEl","setAnchorEl","handleClose","currentTarget","Menu","Boolean","MenuItem","Footer","zIndex","borderTop","FooterButton","isEnd","Layout","refresh","setRefresh","minHeight","RiskBar","window","localStorage","getItem","RiskDisclosureForm","onConsent","setItem","TokenAccountContext","bySplAccountId","this","splAccountId","result","findSplAccount","get","mintId","findSplAccountByMintId","cmp","SPL_ACCOUNT_CONTEXT_EMPTY","Map","set","index","getProgramId","_provider","getFilters","parse","raw","res","accountInfo","accountId","Context","AccountProvider","resolve","reload","setReload","isLoading","setIsLoading","cache","rawAccounts","parsed","values","Array","sub","onProgramAccountChange","info","clear","removeProgramAccountChangeListener","useProgramSubscription","splAccounts","reloadSplAccounts","isReloadingSplAccounts","tokens","MultisigPage","MultisigInstancePage","path","useLocation","pathname","split","App","theme","createMuiTheme","palette","default","typography","fontFamily","join","overrides","wallets","getPhantomWallet","getSolflareWallet","getTorusWallet","options","clientId","getLedgerWallet","getSolongWallet","getMathWallet","getSolletWallet","CssBaseline","maxSnack","autoHideDuration","WalletProvider","autoConnect","basename","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","SolanaCluster","RPCEndpoint","localnetConfig","LOCALNET","devnetConfig","DEVNET","mainnetConfig","MAINNET","getBaseClusterConfig","targetCluster","process","Object","some","getTargetClusterFromEnv","baseClusterConfig","rpcEndpoint","REACT_APP_RPC_ENDPOINT","getRPCEndpointFromEnv","REACT_APP_PROGRAM_ID","getProgramIdFromEnv","REACT_APP_GATEWAY_PROGRAM_ID","getGatewayProgramIdFromEnv","getClusterConfig","IDL","confirmOptions","managementKeys"],"mappings":"qgBAcMA,EAAmB,SAACC,GACzB,OAAO,IAAIC,IAAQC,IAAOC,IAAKD,IAAOE,cAAcC,UAAWL,IAG1DM,EAAkBC,YAAU,uCAAC,WAAOP,GAAP,eAAAQ,EAAA,6DAC5BC,EAAUV,EAAiBC,GADC,kBAE3BS,EAAQC,QAAQC,KAAKC,OAFM,2CAAD,uDAK5BC,EAAUN,YAAU,uCAAC,WAAOO,GAAP,eAAAN,EAAA,6DACpBH,EAAYH,IAAOE,cAAcC,UADb,kBAEnBU,YAAUC,mBAAmBF,EAAOT,IAFjB,2CAAD,uDAKpBY,EAA2BV,YAAU,uCAAC,WAAOW,GAAP,eAAAV,EAAA,6DACrCW,EAAOC,YAAiBF,GADa,kBAEpCL,EAAQ,CAACM,KAF2B,2CAAD,uDAKrCE,EAA0Bd,YAAU,uCAAC,WAAOW,GAAP,iBAAAV,EAAA,sEACPS,EAAyBC,GADlB,cACpCI,EADoC,OAEpCR,EAAkB,CAACQ,EAAqB,GAAGC,YAFP,kBAGnCV,EAAQC,IAH2B,2CAAD,uDAMpCU,EAAkCjB,YAAU,uCACjD,WAAOP,EAAUkB,GAAjB,iBAAAV,EAAA,6DACOC,EAAUV,EAAiBC,GADlC,SAEoCiB,EAAyBC,GAF7D,cAEOI,EAFP,yBAGQb,EAAQC,QAAQe,kBAAkBC,MAAMJ,EAAqB,KAHrE,2CADiD,yDAc5CK,GAN4BpB,aAAW,SAACP,EAAU4B,GAEvD,OADgB7B,EAAiBC,GAClBU,QAAQC,KAAKe,MAAME,MAIbrB,YAAU,uCAAC,WAAOP,EAAUkB,GAAjB,eAAAV,EAAA,sEACAgB,EAAgCxB,EAAUkB,GAD1C,cAC1BO,EAD0B,yBAEzBA,EAAkBI,+BAFO,2CAAD,0DAKnBC,EAAcvB,YAAU,uCAAC,WAAOwB,EAAsBC,EAAoBd,GAAjD,yBAAAV,EAAA,sEACFS,EAAyBC,GADvB,cAC/BI,EAD+B,OAE/BW,EAAwBX,EAAqB,GAAGC,WAChDW,EAAeH,EAAUR,WACzBY,EAAWf,YAAiBgB,IAAMC,WAClCC,EAAe,IAAIC,IAAGP,GAEtBlB,EAAkB,CACvBmB,EACAC,EACAI,EAAaE,YAAYC,EAAQ,KAAM,GACvCN,GAXoC,kBAa9BtB,EAAQC,IAbsB,2CAAD,2DAgB/B4B,EAAmBnC,YAAU,uCAAC,WAAOoC,EAAOzB,EAAkB0B,GAAhC,eAAApC,EAAA,sDAC7BqC,EAAsC,GAC3CF,EAAsCG,QAAvC,uCAA+C,WAAOnC,GAAP,eAAAH,EAAA,sEAChBsB,EAAYnB,EAAKD,QAAQqC,SAAUpC,EAAKD,QAAQsB,WAAYd,GAD5C,OACxC8B,EADwC,OAE9CC,QAAQC,IAAIvC,EAAKoB,UAAUoB,YAC3BF,QAAQC,IAAIF,EAAgB,GAAGG,YAC3BxC,EAAKoB,UAAUoB,aAAeH,EAAgB,GAAGG,YACpDN,EAAYO,KAAKzC,GAElBiC,EAASC,GAPqC,2CAA/C,uDAFmC,2CAAD,2DAatBQ,EAA4B9C,YAAU,uCAAC,WAAOP,EAAUkB,EAAkB0B,GAAnC,2BAAApC,EAAA,sEAC9BF,EAAgBN,GADc,cAC7CsD,EAD6C,OAE7CC,EAAeC,EAAexD,EAASyD,YACvCC,EAAuC,GAHM,SAIhBC,QAAQ/C,IAAI,CAAC0C,EAAQC,IAJL,sCAI5CZ,EAJ4C,KAIrCiB,EAJqC,4BAM5CC,MAAM,gCANsC,eASlDlB,EAAsCG,SAAQ,SAACnC,GAChCmD,YAAgBnD,EAAKD,QAASkD,KAC9BG,IAAWC,SACzBN,EAAaN,KAAKzC,MAZ+B,UAgB7C+B,EAAiBgB,EAAcxC,EAAkB0B,GAhBJ,4CAAD,2DAmBtCY,EAAiBjD,YAAU,uCAAC,WAAOkD,GAAP,eAAAjD,EAAA,sEACrBiD,EAAWQ,UADU,cAClCC,EADkC,yBAEjCT,EAAWU,aAAaD,GAAME,OAAM,kBAAmB,IAAbC,KAAKC,UAFd,2CAAD,uDAMlCC,EAAkChE,YAAU,uCACjD,WAAOP,EAAU+B,EAAsByC,EAAmBtD,GAA1D,eAAAV,EAAA,sEAC2BmB,EAAc3B,EAAUkB,GADnD,cACOuD,EADP,gBAEcC,QAAMC,0BAClBC,8BACAC,mBACAJ,EACA1C,EACAyC,GAPF,mFADiD,6DAarCM,EAAuBvE,YAAU,uCAAC,WAAOP,EAAUkB,GAAjB,eAAAV,EAAA,sEACVgB,EAAgCxB,EAAUkB,GADhC,cACxC6D,EADwC,OAE9C9B,QAAQC,IAAI6B,EAAsBC,kBAAkB7B,YAFN,kBAGvC4B,EAAsBC,mBAHiB,2CAAD,yDAMxCC,EAAkB1E,YAAU,uCACjC,WAAOP,EAAUkF,EAAmBhE,GAApC,2BAAAV,EAAA,6DACCyC,QAAQC,IAAI,yBAA0BgC,EAAO/B,YAGvCgC,EAA2C,EAC3CC,EAAwD,GAL/D,SAMiCN,EAAqB9E,EAAUkB,GANhE,cAMO8D,EANP,OAOOK,EAAc,CACnBC,OAAQ,CACPC,OAAQJ,EACRK,MAAON,EAAOO,aAGVC,EAA0B,CAC/BJ,OAAQ,CACPC,OAAQH,EACRI,MAAOR,EAAkBS,aAGrBE,EAAU,CAACN,EAAaK,GAnB/B,UAoBgC1F,EAASyD,WAAWmC,mBAAmB1F,IAAOE,cAAcyF,iBAAkB,CAC5GF,YArBF,WAwBiC,KAJ1BG,EApBP,QAwBsBC,OAxBtB,uBAyBQlC,MAAM,uCAzBd,iCA4BQmC,6BACNC,mBAAiBC,YAAYJ,EAAiB,GAAGpF,QAAQyF,MACzDL,EAAiB,GAAGM,SA9BtB,4CADiC,2DAoC5BC,EAA+C9F,YAAU,uCAC9D,WAAOP,EAAUkB,GAAjB,eAAAV,EAAA,sEACmCa,EAAwBH,GAD3D,cACOoF,EADP,yBAEQ/B,EAAgCvE,EAAUsG,EAAoB,IAAI,EAAMpF,IAFhF,2CAD8D,yDAQlDqF,EAAehG,YAAU,uCACrC,WAAOqB,EAAmB4E,EAAuBC,EAAuBzG,EAAUkB,GAAlF,+CAAAV,EAAA,6DACOC,EAAUV,EAAiBC,GAC3B0G,EAAoCnC,EACzCvE,EACAwG,GACA,EACAtF,GAEKuD,EAAc9C,EAAc3B,EAAUkB,GACtCyF,EAA6CN,EAClDrG,EAAUkB,GAEL0F,EAAwB3F,EAAyBC,GACjD2F,EAAuBxF,EAAwBH,GAC/C4F,EAAmB7B,EAAgBjF,EAAUwG,EAAYtF,GACzD6F,EAAoBC,EAAkBR,EAAYtF,GAfzD,UAyBWyC,QAAQ/C,IAAI,CACrB8F,EACAjC,EACAkC,EACAC,EACAC,EACAC,EACAC,IAhCF,2CAkBEE,EAlBF,KAmBEC,EAnBF,KAoBEC,EApBF,KAqBE7F,EArBF,KAsBEgF,EAtBF,KAuBEc,EAvBF,KAwBEC,EAxBF,uBAmCQ5G,EAAQ6G,YAAYf,aAAa,CACvCgB,SAAU,CACTC,MAAOf,EACPW,aAAcA,EAAarF,UAC3BN,kBAAmBH,EAAqB,GACxCmG,iBAAkBnB,EAAoB,GACtC3F,KAAMiB,EACN8F,0BAA2BP,EAC3BpE,SAAUyD,EACVmB,uBAAwB/C,8BACxBgD,qBAAsBX,EACtBI,WAAYA,EAAW,GACvBQ,gBAAiBX,EACjBY,aAAcjD,mBACdkD,cAAeC,gBAAc3H,UAC7B4H,KAAMC,IAAKC,uBAlDd,4CADqC,+DAwIzBC,GA9EmB7H,YAAU,uCACzC,WACCkG,EACA4B,EACAC,EACAC,EACAC,EACAC,EACAC,EACA1I,GARD,+CAAAQ,EAAA,6DAUQC,EAAUV,EAAiBC,GAC3B2I,EAAiC,IAAjBN,EAChBO,EAA6B,IAAfN,EACdO,EAAa,IAAI9H,YAAUyH,GAC3BM,EAAa,IAAI/H,YAAU0H,GAC3BM,EAAsB,IAAIhI,YAAU2H,GAf5C,SAkBS3H,YAAUC,mBACf,CAACyB,EAAOuG,KAAKC,IAAazD,MAAM0D,KAAKC,OAAOZ,KAC5C9H,EAAQJ,WApBZ,0CAiBS+I,EAjBT,KAiB+BC,EAjB/B,eAwBStI,YAAUC,mBACf,CAACoI,EAAqB7H,YACtBd,EAAQJ,WA1BZ,2CAuBSiJ,EAvBT,KAuB8BC,EAvB9B,eA8BS7E,QAAMC,0BACXC,8BACAC,mBACAgE,EACAC,GACA,GAnCJ,eA6BQU,EA7BR,iBAuCS9E,QAAMC,0BACXC,8BACAC,mBACAgE,EACAS,GACA,GA5CJ,eAsCQG,EAtCR,OA+CQC,EAAqBC,UAAQC,WA/CrC,kBAiDSnJ,EAAQ6G,YAAYuC,iBAC1BN,EACAF,EACAd,EACAK,EACAD,EACA,CACApB,SAAU,CACTC,MAAOf,EACPzB,kBAAmB,IAAIjE,YAAUgI,GACjCtH,kBAAmB2H,EACnB1B,0BAA2B+B,EAC3BK,SAAU,IAAI/I,YAAU+H,GACxBiB,yBAA0BP,EAC1BQ,mBAAoBN,EAAmB3H,UACvC8F,gBAAiB,IAAI9G,YAAU8H,GAC/BZ,KAAMgB,IAAYd,mBAClBL,aAAcjD,mBACd4C,iBAAkB6B,EAClBvB,cAAekB,IAAYjB,cAAc3H,UACzCsH,uBAAwB/C,+BAEzBqF,QAAS,CAACP,MAvEb,4CADyC,qEA8EEnJ,YAAU,uCAAC,WAAOW,EAA0BlB,GAAjC,qBAAAQ,EAAA,6DAChDC,EAAUV,EAAiBC,GADqB,SAG/Ce,YAAUC,mBACf,CAACyB,EAAOuG,KAAKC,IAAazD,MAAM0D,KAAKC,OAAOjI,KAC5CT,EAAQJ,WAL4C,0CAE/C+I,EAF+C,4BAO/C3I,EAAQC,QAAQe,kBAAkBC,MAAM0H,IAPO,2CAAD,0DAWzCc,EAA0B3J,YAAU,uCAChD,WACCkG,EACAvF,EACAlB,GAHD,qBAAAQ,EAAA,6DAKQC,EAAUV,EAAiBC,GALnC,SAOSe,YAAUC,mBACf,CAACyB,EAAOuG,KAAKC,IAAazD,MAAM0D,KAAKC,OAAOjI,KAC5CT,EAAQJ,WATZ,0CAMS+I,EANT,4BAYS3I,EAAQ6G,YAAY4C,wBAAwB,CAClD3C,SAAU,CACTC,MAAOf,EACPhF,kBAAmB2H,GAEpBa,QAAS,MAjBZ,2CADgD,2DAuBpCE,EAAwB5J,YAAU,uCAC9C,WACCkG,EACAvF,EACAlB,GAHD,qBAAAQ,EAAA,6DAKQC,EAAUV,EAAiBC,GALnC,SAOSe,YAAUC,mBACf,CAACyB,EAAOuG,KAAKC,IAAazD,MAAM0D,KAAKC,OAAOjI,KAC5CT,EAAQJ,WATZ,0CAMS+I,EANT,4BAYS3I,EAAQ6G,YAAY6C,sBAAsB,CAChD5C,SAAU,CACTC,MAAOf,EACPhF,kBAAmB2H,GAEpBa,QAAS,MAjBZ,2CAD8C,2DAuBlCjD,EAAoBzG,YAAU,uCAAC,WAAOwB,EAAsBb,GAA7B,mBAAAV,EAAA,sEACRS,EAAyBC,GADjB,cACrCI,EADqC,OAErC8I,EAAkBhJ,YAAiBgB,IAAMiI,aACzCvJ,EAAkB,CACvBQ,EAAqB,GAAGC,WACxBQ,EAAUR,WACV6I,GAN0C,kBASpCvJ,EAAQC,IAT4B,2CAAD,yDAa9BwJ,EAAkB/J,YAAU,uCACxC,WACGW,EACHuF,EACA1E,EACAwI,EACAC,EACAC,EACAzK,GAPA,2BAAAQ,EAAA,6DASMC,EAAUV,EAAiBC,GAC3B4G,EAAwB3F,EAAyBC,GACjD6F,EAAoBC,EAAkBjF,EAAWb,GAXvD,SAaoDyC,QAAQ/C,IAAI,CAC/DgG,EACAG,IAfD,0CAaOzF,EAbP,KAa6BoJ,EAb7B,uBAkBOjK,EAAQ6G,YAAYqD,iBAAiBD,EAAc,GAAIH,EAAeC,EAAYC,EAAkB,CAC1GlD,SAAU,CACTC,MAAOf,EACPmE,WAAY7I,EACZsF,WAAYqD,EAAc,GAC1B3C,cAAeC,gBAAc3H,UAC7B4H,KAAMC,IAAKC,mBACX1G,kBAAmBH,EAAqB,IAEzC2I,QAAS,MA3BV,4CADwC,mEAgC5BY,EAAmBtK,YAAU,uCACzC,WACAW,EACAuF,EACA1E,EACA+I,EACAP,EACAC,EACAC,EACAzK,GARA,2BAAAQ,EAAA,6DAUMC,EAAUV,EAAiBC,GAE3B4G,EAAwB3F,EAAyBC,GACjD6F,EAAoBC,EAAkBjF,EAAWb,GAbvD,SAeoDyC,QAAQ/C,IAAI,CAC/DgG,EACAG,IAjBD,0CAeOzF,EAfP,KAe6BoJ,EAf7B,uBAoBOjK,EAAQ6G,YAAYuD,iBAAiBC,EAAUP,EAAeC,EAAYC,EAAkB,CAClGlD,SAAU,CACTC,MAAOf,EACPmE,WAAY7I,EACZsF,WAAYqD,EAAc,GAC1BjJ,kBAAmBH,EAAqB,IAEzC2I,QAAS,MA3BV,4CADyC,qEAgC7Bc,EAAoBxK,YAAU,uCAC1C,WACCW,EACAa,EACA/B,GAHD,qBAAAQ,EAAA,6DAIOC,EAAUV,EAAiBC,GAJlC,SAK+BgH,EAAkBjF,EAAWb,GAL5D,0CAKQwJ,EALR,uBAMQjK,EAAQC,QAAQ2G,WAAW2D,cAAcN,IANjD,2CAD0C,6D,0DCrZpC,IAAK3G,EAAZ,kC,SAAYA,O,mBAAAA,I,6BAAAA,I,sBAAAA,M,2OCzBCkH,EAAY,CACvB,CACEC,KAAM,eACNC,SAAU,iCACVC,QAASC,IAAQC,aAEnB,CACEJ,KAAM,WACNC,SAAU,wBACVC,QAASC,IAAQE,QAEnB,CACEL,KAAM,SACNC,SAAUK,wBAAc,UACxBJ,QAASC,IAAQE,SAIfE,EAAUR,EAAU,GAAGE,SAUvBO,EAAoBC,IAAMC,cAAgC,CAC9DT,SAAUM,EACVI,YAAa,aACbpI,WAAY,IAAIqI,aAAWL,EAAS,UACpCM,eAAgB,IAAID,aAAWL,EAAS,UACxCO,IAAKf,EAAU,GAAGC,OAGb,SAASe,EAAT,GAA8D,IAAD,IAA/BC,gBAA+B,WAApBC,EAAoB,IAClCC,mBAASnB,EAAU,GAAGE,UADY,mBAC3DA,EAD2D,KACjDU,EADiD,KAE5DpI,EAAa4I,mBAAQ,kBAAM,IAAIP,aAAWX,EAAU,YAAW,CACnEA,IAEIY,EAAiBM,mBAAQ,kBAAM,IAAIP,aAAWX,EAAU,YAAW,CACvEA,IAKIa,GADJf,EAAUqB,MAAK,SAACC,GAAD,OAASA,EAAIpB,WAAaA,MAAaF,EAAU,IAChDC,KAsClB,OApCAsB,YAAcR,GAKdS,qBAAU,WACR,IAAMC,EAAKjJ,EAAWkJ,iBAAgB,IAAIhD,WAAU5H,WAAW,eAC/D,OAAO,WACL0B,EAAWmJ,4BAA4BF,MAExC,CAACjJ,IAEJgJ,qBAAU,WACR,IAAMC,EAAKjJ,EAAWoJ,cAAa,kBAAM,QACzC,OAAO,WACLpJ,EAAWqJ,yBAAyBJ,MAErC,CAACjJ,IAEJgJ,qBAAU,WACR,IAAMC,EAAKX,EAAeY,iBACxB,IAAIhD,WAAU5H,WACd,eAEF,OAAO,WACLgK,EAAea,4BAA4BF,MAE5C,CAACX,IAEJU,qBAAU,WACR,IAAMC,EAAKX,EAAec,cAAa,kBAAM,QAC7C,OAAO,WACLd,EAAee,yBAAyBJ,MAEzC,CAACX,IAGF,cAACL,EAAkBqB,SAAnB,CACEC,MAAO,CACL7B,WACAU,cACApI,aACAsI,iBACAC,OANJ,SASGE,IAKA,SAASe,IACd,OAAOC,qBAAWxB,GAAmBjI,WAOhC,SAAS0J,IACd,IAAMC,EAAUF,qBAAWxB,GAC3B,MAAO,CACLP,SAAUiC,EAAQjC,SAClBU,YAAauB,EAAQvB,YACrBG,IAAKoB,EAAQpB,O,4zBCvDXqB,GAAe,CACnB,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,8CACA,+CACA,+CACA,+CACA,+CACA,+CACA,gDAIF,SAASC,GAAT,GAUI,IATFC,EASC,EATDA,SACAC,EAQC,EARDA,KACAC,EAOC,EAPDA,QACAC,EAMC,EANDA,kBAOA,OACE,gBAAC,IAAD,CAAQF,KAAMA,EAAMG,WAAS,EAACF,QAASA,EAASG,SAAS,KAAzD,UACE,eAAC,IAAD,UACE,eAAC,IAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAnC,+BAIF,gBAAC,IAAD,CAAeC,MAAO,CAAEC,cAAe,QAAvC,UACE,eAAC,IAAD,wJAKA,gBAAC,KAAD,CAAMC,gBAAc,EAApB,UACE,eAAC,KAAD,CACEP,kBAAmBA,EACnBH,SAAUA,EACVE,QAASA,IAEX,eAAC,KAAD,CACEC,kBAAmBA,EACnBH,SAAUA,EACVE,QAASA,IAEX,eAAC,KAAD,CACEC,kBAAmBA,EACnBH,SAAUA,EACVE,QAASA,IAEX,eAAC,KAAD,CACEC,kBAAmBA,EACnBH,SAAUA,EACVE,QAASA,IAEX,eAAC,KAAD,CACEC,kBAAmBA,EACnBH,SAAUA,EACVE,QAASA,IAEX,eAAC,KAAD,CACEC,kBAAmBA,EACnBH,SAAUA,EACVE,QAASA,IAEX,eAAC,KAAD,CACEC,kBAAmBA,EACnBH,SAAUA,EACVE,QAASA,IAOX,eAAC,KAAD,CACEC,kBAAmBA,EACnBH,SAAUA,EACVE,QAASA,aASrB,SAASS,GAAQC,EAASC,GACxB,GAAID,EAAGzN,QAAQL,UAAUgO,OAAOC,KAE1BH,EAAGzN,QAAQyF,KAAKkI,OAAO5L,EAAOuG,KAAK,CAAC,EAAG,EAAG,EAAG,KAC/C,OACE,eAAC,KAAD,CACEuF,QAAQ,kBACRC,UAAWL,EAAGpM,UAAUoB,aAKhC,GAAIgL,EAAGzN,QAAQL,UAAUgO,OAAOD,EAAe/N,WAAY,CAKzD,GAJ4B+N,EAAeK,MAAMC,QAC/C,SACA,oBAEsBL,OAAOF,EAAGzN,QAAQyF,KAAKwI,MAAM,EAAG,IACtD,OACE,eAAC,KAAD,CACEJ,QAAQ,gBACRC,UAAWL,EAAGpM,UAAUoB,aAQ9B,GAJyBiL,EAAeK,MAAMC,QAC5C,SACA,cAEmBL,OAAOF,EAAGzN,QAAQyF,KAAKwI,MAAM,EAAG,IACnD,OACE,eAAC,KAAD,CACEJ,QAAQ,aACRC,UAAWL,EAAGpM,UAAUoB,aAKhC,GAAIgL,EAAGzN,QAAQL,UAAUgO,OAAOxJ,qBAAmB,CACjD,IAAM+J,EAAMT,EAAGzN,QAAQyF,KAAKwI,MAAM,EAAG,GAC/BE,EAAYV,EAAGzN,QAAQyF,KAAKwI,MAAM,EAAG,GACrCG,EAAeC,OAAIC,WAAWH,GAAWI,WAAa,IAC5D,OAAIxM,EAAOuG,KAAK,CAAC,IAAIqF,OAAOO,GAExB,eAAC,KAAD,CACEL,QAAO,mBAAcO,EAAa3L,WAA3B,UACPqL,UAAWL,EAAGpM,UAAUoB,aAK1BV,EAAOuG,KAAK,CAAC,IAAIqF,OAAOO,GAExB,eAAC,KAAD,CACEL,QAAQ,gBACRC,UAAWL,EAAGpM,UAAUoB,aAK1BV,EAAOuG,KAAK,CAAC,IAAIqF,OAAOO,GAExB,eAAC,KAAD,CACEL,QAAQ,gBACRC,UAAWL,EAAGpM,UAAUoB,aAK5B,eAAC,KAAD,CACEoL,QAAQ,qBACRC,UAAWL,EAAGpM,UAAUoB,aAI9B,GAAIgL,EAAGzN,QAAQL,UAAUgO,OAAOnO,KAAOE,cAAcC,WAAY,CAC/D,GAAmC,IAA/B8N,EAAGzN,QAAQ6G,SAASxB,OACtB,OACE,eAAC,KAAD,CACEwI,QAAS,uBACTC,UAAWL,EAAGpM,UAAUoB,aAWvB,GAAmC,IAA/BgL,EAAGzN,QAAQ6G,SAASxB,QAA2C,KAA3BoI,EAAGzN,QAAQyF,KAAKJ,OAAe,CAC5E,IAMImJ,EANEC,EAAehB,EAAGzN,QAAQ6G,SAAS,GAAGnB,OAAOjD,WAC7CiM,EAASjB,EAAGzN,QAAQyF,KAAKwI,MAAM,EAAG,GAAG,GACrCU,EAAclB,EAAGzN,QAAQyF,KAAKwI,MAAM,EAAG,IAAI,GAC3C5L,EAAWoL,EAAGzN,QAAQyF,KAAKwI,MAAM,GAAG,IAAI,GACxCW,EAAoBnB,EAAGzN,QAAQyF,KAAKwI,MAAM,GAAI,IAC9CY,EAAkBR,OAAIC,WAAWM,GASvC,OALEJ,EADiC,IAA/BK,EAAgBN,WACJ,YAEA,IAAI5K,KAAkC,IAA7BkL,EAAgBN,YAIvC,eAAC,KAAD,CACIV,QAAO,iCAA4BY,GACnCX,UAAS,uBAAkBY,EAAlB,4BAA4CrM,EAA5C,+BAA2EsM,EAA3E,kCAAgHH,KAG1H,GAAmC,IAA/Bf,EAAGzN,QAAQ6G,SAASxB,QAA2C,KAA3BoI,EAAGzN,QAAQyF,KAAKJ,OAAe,CAC5E,IAKImJ,EALEC,EAAehB,EAAGzN,QAAQ6G,SAAS,GAAGnB,OAAOjD,WAC7CkM,EAAclB,EAAGzN,QAAQyF,KAAKwI,MAAM,EAAG,IAAI,GAC3C5L,EAAWoL,EAAGzN,QAAQyF,KAAKwI,MAAM,GAAI,IAAI,GACzCW,EAAoBnB,EAAGzN,QAAQyF,KAAKwI,MAAM,GAAI,IAC9CY,EAAkBR,OAAIC,WAAWM,GASvC,OALEJ,EADiC,IAA/BK,EAAgBN,WACJ,YAEA,IAAI5K,KAAkC,IAA7BkL,EAAgBN,YAIvC,eAAC,KAAD,CACIV,QAAO,gCAA2BY,GAClCX,UAAS,yBAAoBzL,EAApB,8BAAkDsM,EAAlD,kCAAuFH,KAGjG,GAA+B,KAA3Bf,EAAGzN,QAAQyF,KAAKJ,OAAe,CACxC,IAAMoJ,EAAehB,EAAGzN,QAAQ6G,SAAS,GAAGnB,OAAOjD,WACnD,OACE,eAAC,KAAD,CACIoL,QAAO,yCAAoCY,EAAaR,MAAM,EAAE,GAAzD,cAAiEQ,EAAaR,OAAO,IAC5FH,UAAWL,EAAGpM,UAAUoB,aAI9B,IAAMqD,EAAa2H,EAAGzN,QAAQ6G,SAAS,GAAGnB,OAAOjD,WACjD,OACE,eAAC,KAAD,CACEoL,QAAO,qCAAgC/H,GACvCgI,UAAWL,EAAGpM,UAAUoB,aAKhC,OAAIhD,KAAYkO,OAAOF,EAAGzN,QAAQyF,KAAKwI,MAAM,EAAG,IAE5C,eAAC,KAAD,CAAcJ,QAAQ,cAAcC,UAAWL,EAAGpM,UAAUoB,aAGzD,eAAC,KAAD,CAAcoL,QAASJ,EAAGpM,UAAUoB,aAG9B,SAASqM,GAAT,GAA2D,IAAvCjC,EAAsC,EAAtCA,SACjC,OACE,iCACE,eAAC,IAAD,CAAWkC,OAAK,EAAC7B,SAAS,KAA1B,SACE,sBACEG,MAAO,CACL2B,SAAU,QACVC,OAAQ,OACRC,MAAO,OACPC,QAAS,OACTC,cAAe,eANnB,SASE,eAACC,GAAD,QAGHxC,GAAY,eAACyC,GAAD,CAAkBzC,SAAUA,OAK/C,IAAMe,GAA6B,IAAIvN,aACrC,+CAGF,SAASgP,KAAqB,IAAD,EACH3D,oBAAS,GADN,mBACpBoB,EADoB,KACdyC,EADc,KAE3B,OACE,uBAAKlC,MAAO,CAAE8B,QAAS,QAAvB,UACE,eAAC,IAAD,CACE9B,MAAO,CACLmC,OAAQ,iBACRC,MAAO,OACPC,OAAQ,OACRC,aAAc,QAEhBC,QAAS,kBAAML,GAAQ,IAPzB,SASE,eAAC,KAAD,MAEF,eAACM,GAAD,CAAmB/C,KAAMA,EAAMC,QAAS,kBAAMwC,GAAQ,SAKrD,SAASD,GAAT,GAAkE,IAAtCzC,EAAqC,EAArCA,SAC3Ba,EAAiBoC,eAD+C,EAExBpE,wBAAcD,GAFU,mBAE/DsE,EAF+D,KAE9CC,EAF8C,OAG9BtE,mBAAc,MAHgB,mBAG/DuE,EAH+D,KAGjDC,EAHiD,OAItBxE,oBAAS,GAJa,mBAI/DyE,EAJ+D,KAI7CC,EAJ6C,OAKN1E,oBAC9D,GANoE,mBAK/D2E,EAL+D,KAKrCC,EALqC,OAQ9B5E,oBAAS,GARqB,mBAQ/D6E,EAR+D,KAQjDC,EARiD,KAoCtE,OA3BAzE,qBAAU,WACR2B,EAAe1N,QACZ6M,SAAS7L,MAAM6L,GACf4D,MAAK,SAACzQ,GACLgQ,EAAmBhQ,MAEpB0D,OAAM,SAACgN,GACNnO,QAAQoO,MAAMD,GACdV,EAAmB,WAEtB,CAACnD,EAAUa,EAAe1N,UAC7B+L,qBAAU,WACR2B,EAAe1N,QAAQ4Q,YAAY1Q,IAAI2M,EAAShM,YAAY4P,MAAK,SAACI,GAChEA,EAAIC,MAAK,SAAChR,EAAGiR,GAAJ,OAAYjR,EAAEE,QAAQgR,YAAcD,EAAE/Q,QAAQgR,YAAe,EAAI,KAC1E,IAAIC,EAAcJ,EAAIK,QAAO,SAASzD,GACpC,OAAQd,GAAawE,SAAS1D,EAAGpM,UAAUoB,eAE7CyN,EAAgBe,MACfvN,OAAM,SAAAgN,GAAG,OAAInO,QAAQC,IAAI,QAASkO,QACpC,CAAChD,EAAe1N,QAAQ4Q,YAAa/D,EAAU0D,IAClDxE,qBAAU,WACR2B,EAAe1N,QAAQ6M,SACpBuE,UAAUvE,GACVwE,GAAG,UAAU,SAACrR,GACbgQ,EAAmBhQ,QAEtB,CAAC0N,EAAgBb,IAElB,gBAAC,IAAD,CAAWkC,OAAK,EAAC7B,SAAS,KAAKG,MAAO,CAAEiE,aAAc,QAAtD,UACE,iCACE,eAAC,IAAD,CAAMjE,MAAO,CAAEkE,UAAW,QAA1B,cACuB9F,IAApBsE,EACC,sBAAK1C,MAAO,CAAEmE,QAAS,QAAvB,SACE,eAAC,IAAD,CACEnE,MAAO,CACL8B,QAAS,QACTsC,WAAY,OACZC,YAAa,YAIG,OAApB3B,EACF,eAAC,IAAD,UACE,eAAC,IAAD,CACE4B,MAAM,gBACNtE,MAAO,CACLmE,QAAS,OACTI,UAAW,UAJf,kCAWF,iCAGH7B,GACC,gBAAC,IAAD,WACE,eAAC,IAAD,CACE1C,MAAO,CAAEkE,UAAW,QACpBvC,SAAS,SACT2C,MAAM,UACNE,UAAW,EAJb,SAME,gBAAC,IAAD,WACE,gBAAC,IAAD,CAAY1E,QAAQ,KAAKE,MAAO,CAAEyE,SAAU,GAAK1E,UAAU,KAA3D,UACGP,EAASpK,WADZ,MAC2BsN,EAAgBgC,UAAUtP,WAAY,IADjE,MAEMsN,EAAgBiC,OAAO3M,OAAO5C,WAFpC,eAIA,eAAC,IAAD,CAASwP,MAAM,SAASC,OAAK,EAA7B,SACE,eAAC,IAAD,CAAYtC,QAAS,kBAAMQ,GAAoB,IAA/C,SACE,eAAC,IAAD,QAGJ,eAAC,IAAD,CAAS6B,MAAM,MAAMC,OAAK,EAA1B,SACE,eAAC,IAAD,CAAYtC,QAAS,kBAAMU,GAA4B,IAAvD,SACE,eAAC,KAAD,aAKR,eAAC,KAAD,CAAM/C,gBAAc,EAApB,SACoB,OAAjB0C,EACC,sBAAK5C,MAAO,CAAEmE,QAAS,QAAvB,SACE,eAAC,IAAD,CACEnE,MAAO,CACL8B,QAAS,QACTsC,WAAY,OACZC,YAAa,YAIO,IAAxBzB,EAAa5K,OACf,eAAC,KAAD,UACE,eAAC,KAAD,CAAcwI,QAAQ,4BAGxBoC,EAAakC,KAAI,SAAC1E,GAAD,OACf,eAAC2E,GAAD,CAEEvF,SAAUA,EACVkD,gBAAiBA,EACjBtC,GAAIA,GAHCA,EAAGpM,UAAUoB,uBAWhC,eAACmK,GAAD,CACEC,SAAUA,EACVC,KAAMuD,EACNtD,QAAS,kBAAMuD,GAA4B,IAC3CtD,kBAAmB,kBAAMwD,GAAiBD,MAE3CR,GACC,eAACsC,GAAD,CAEExF,SAAUA,EACVkD,gBAAiBA,EACjBjD,KAAMqD,EACNpD,QAAS,kBAAMqD,GAAoB,KAJ9B1C,EAAepO,SAASgT,OAAOjR,UAAUoB,eAWjD,SAASoN,GAAT,GAMH,IALF/C,EAKC,EALDA,KACAC,EAIC,EAJDA,QAKMwF,EAAUC,cACV9E,EAAiBoC,eACf2C,EAAoBC,cAApBD,gBAHP,EAIiC/G,mBAAS,GAJ1C,mBAIMqG,EAJN,KAIiBY,EAJjB,KAMKC,EAAW,IAAIvS,aAAU,oCAAoCoC,WANlE,EAOuCiJ,mBAAS,CAACkH,IAPjD,mBAOMC,EAPN,KAOoBC,EAPpB,KAQKC,EAAW,WACfhG,IACA4F,EAAa,GACbG,EAAgB,CAACF,EAAUA,KAX5B,EAauDlH,mBAAS,IAbhE,mBAaMsH,EAbN,KAa4BC,EAb5B,KAcKC,EAAgBF,EAAuBH,EAAaxN,OACpD8N,EAAc,uCAAG,wCAAArT,EAAA,6DACrB2S,EAAgB,oBAAqB,CACnCtF,QAAS,SAELN,EAAW,IAAIuG,WAEJ,GAGH,GAGRC,EANW,IAKwB,GAAvBL,EAA4B,GAFhC,GATO,SAaG3S,aAAUC,mBAChC,CAACuM,EAASxL,UAAUR,YACpB6M,EAAe/N,WAfI,0CAaZ2T,EAbY,KAiBftB,EAASa,EAAaV,KAAI,SAACoB,GAAD,OAAO,IAAIlT,aAAUkT,MAjBhC,KAkBJ7F,EAAe8F,IAlBX,KAmBnBxB,EAnBmB,KAoBnB,IAAInQ,KAAGkQ,GApBY,KAqBnBuB,EArBmB,KAuBP,CACRzG,SAAUA,EAASxL,UACnBkG,KAAME,uBAzBS,KA2BR,CAACoF,GA3BO,UA6BTa,EAAe1N,QAAQ6M,SAAS4G,kBACpC5G,EAEAwG,GAhCa,6CAuBjBxM,SAvBiB,KA2BjB0C,QA3BiB,KA4BjBmK,aA5BiB,qBAkBeP,eAlBf,uCAkBf1F,EAlBe,OAqCrBgF,EAAgB,qBAAD,OAAsB5F,EAASxL,UAAUoB,YAAc,CACpE0K,QAAS,UACTwG,OAAQ,eAAC,KAAD,CAAiCC,UAAWnG,MAEtDsF,IACAR,EAAQ7P,KAAR,WAAiBmK,EAASxL,UAAUoB,aA1Cf,4CAAH,qDA4CpB,OACE,gBAAC,IAAD,CAAQwK,WAAS,EAACH,KAAMA,EAAMC,QAASgG,EAAU7F,SAAS,KAA1D,UACE,eAAC,IAAD,UACE,eAAC,IAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAnC,4BAIF,gBAAC,IAAD,WACE,eAAC,IAAD,CACEH,WAAS,EACT4G,MAAM,YACNvH,MAAOyF,EACP+B,KAAK,SACLC,SAAU,SAACC,GAAD,OAAOrB,EAAasB,SAASD,EAAEE,OAAO5H,WAElD,eAAC,IAAD,CACEW,WAAS,EACT4G,MAAM,mEACNvH,MAAO0G,EACPc,KAAK,SACLC,SAAU,SAACC,GAAD,OAAOf,EAAwBgB,SAASD,EAAEE,OAAO5H,WAE5DuG,EAAaV,KAAI,SAACoB,EAAGY,GAAJ,OAChB,eAAC,IAAD,CAEElH,WAAS,EACT4G,MAAM,cACNvH,MAAOiH,EACPQ,SAAU,SAACC,GACT,IAAMT,EAAC,YAAOV,GACdU,EAAEY,GAAOH,EAAEE,OAAO5H,MAClBwG,EAAgBS,KAPbA,MAWT,sBAAKlG,MAAO,CAAE8B,QAAS,OAAQiF,eAAgB,YAA/C,SACE,eAAC,IAAD,CACExE,QAAS,WACP,IAAM2D,EAAC,YAAOV,GAEdU,EAAE7Q,KAAK,IAAIrC,aAAU,oCAAoCoC,YACzDqQ,EAAgBS,IALpB,SAQE,eAAC,KAAD,WAIN,gBAAC,IAAD,WACE,eAAC,IAAD,CAAQ3D,QAASmD,EAAjB,oBACA,eAAC,IAAD,CACEsB,SAAUnB,EACV/F,QAAQ,YACR2G,KAAK,SACLnC,MAAM,UACN/B,QAAS,kBACPuD,IAAiBzP,OAAM,SAACgN,GACtB,IAAM4D,EAAM5D,EAAMA,EAAIjO,WAAa,GACnCgQ,EAAgB,4BAAD,OAA6B6B,GAAO,CACjDnH,QAAS,cATjB,0BAqBR,SAASiF,GAAT,GAQI,IAPFvF,EAOC,EAPDA,SACAkD,EAMC,EANDA,gBACAtC,EAKC,EALDA,GAMQgF,EAAoBC,cAApBD,gBACF/E,EAAiBoC,eAFtB,EAGuBpE,oBAAS,GAHhC,mBAGMoB,EAHN,KAGYyC,EAHZ,OAIiC7D,mBAAS+B,EAAGzN,SAJ7C,mBAIMuU,EAJN,KAIiBC,EAJjB,KAKDzI,qBAAU,WACR2B,EAAe1N,QAAQ4Q,YACpBQ,UAAU3D,EAAGpM,WACbgQ,GAAG,UAAU,SAACrR,GACbwU,EAAaxU,QAEhB,CAAC0N,EAAgBb,EAAUY,EAAGpM,YACjC,IAAMoT,EAAO,CACX,CACEC,MAAO,aACPpI,MAAOiI,EAAU5U,UAAU8C,YAE7B,CACEiS,MAAO,cACPpI,MAAOiI,EAAUvD,WAAWvO,YAE9B,CACEiS,MAAO,mBACPpI,MACE,uBACEe,MAAO,CACLsH,UAAW,aACXlF,MAAO,QACPmF,WAAY,QACZjD,MAAO,UACPkD,MAAO,QACPjD,UAAW,QAPf,SAUGkD,YAAaP,EAAU9O,SAI9B,CACEiP,MAAO,WACPpI,MAAOiI,EAAU1H,SAASpK,YAE5B,CACEiS,MAAO,sBACPpI,MAAOmB,EAAGpM,UAAUoB,YAEtB,CACEiS,MAAO,kBACPpI,MAAOiI,EAAUQ,cAActS,aAG7BuS,EAAgBjF,EAAgBiC,OAAOG,KAC3C,SAACrL,EAAkBqN,GACjB,MAAO,CACLO,MAAO5N,EAAMrE,WACb6J,MAAOiI,EAAUhL,QAAQ4K,GAAO,eAAC,IAAD,IAAgB,eAAC,IAAD,QAIhDc,EAAO,uCAAG,sBAAAnV,EAAA,6DACd2S,EAAgB,wBAAyB,CACvCtF,QAAS,SAFG,SAIRO,EAAe8F,IAAIyB,QAAQ,CAC/BpO,SAAU,CACRgG,WACA+D,YAAanD,EAAGpM,UAChByF,MAAO4G,EAAepO,SAASgT,OAAOjR,aAR5B,OAWdoR,EAAgB,uBAAwB,CACtCtF,QAAS,YAZG,2CAAH,qDAeP+H,EAAO,uCAAG,gCAAApV,EAAA,6DACd2S,EAAgB,wBAAyB,CACvCtF,QAAS,SAFG,SAIiB9M,aAAUC,mBACvC,CAACuM,EAAShM,YACV6M,EAAe/N,WANH,0CAIPwV,EAJO,cAQRzH,EAAe8F,IAAI4B,mBAAmB,CAC1CvO,SAAU,CACRgG,WACAsI,iBACAvE,YAAanD,EAAGpM,WAElBgU,kBAAmBd,EAAU1N,SAC1BsL,KAAI,SAACmD,GACJ,OAAIA,EAAE5P,OAAOiI,OAAOwH,GACX,2BAAKG,GAAZ,IAAeC,UAAU,IAEpBD,KAERE,OAAO,CACN9P,OAAQ6O,EAAU5U,UAClB8V,YAAY,EACZF,UAAU,MAxBF,OA2Bd9C,EAAgB,uBAAwB,CACtCtF,QAAS,YA5BG,2CAAH,qDA+Bb,OACE,uCACE,gBAAC,KAAD,CAAUuI,QAAM,EAAC9F,QAAS,kBAAML,GAASzC,IAAzC,UACE,eAAC,KAAD,UAAe6I,GAAKlI,EAAIC,KACvBF,GAAQC,EAAIC,GACZ6G,EAAUvD,YACT,eAAC,KAAD,CAAiB3D,MAAO,CAAEqE,YAAa,UAExC5E,EAAO,eAAC,IAAD,IAAiB,eAAC,IAAD,MAN0BW,EAAGpM,UAAUoB,YAQlE,eAAC,IAAD,CAAUmT,GAAI9I,EAAM+I,QAAQ,OAAOC,eAAa,EAAhD,SACE,uBAAKzI,MAAO,CAAEuH,WAAY,UAAWpD,QAAS,QAA9C,UACE,uBAAKnE,MAAO,CAAE8B,QAAS,OAAQiF,eAAgB,YAA/C,UACE,eAAC,IAAD,CACE/G,MAAO,CAAEqE,YAAa,QACtBvE,QAAQ,YACRwE,MAAM,UACN/B,QAAS,kBACPqF,IAAUvR,OAAM,SAACgN,GACf,IAAIqF,EAAS,GACTrF,IACFqF,EAASrF,EAAIjO,YAEfgQ,EAAgB,kCAAD,OAAmCsD,GAAU,CAC1D5I,QAAS,cAXjB,qBAkBA,eAAC,IAAD,CACEA,QAAQ,YACRwE,MAAM,YACN/B,QAAS,kBACPsF,IAAUxR,OAAM,SAACgN,GACf,IAAIqF,EAAS,GACTrF,IACFqF,EAASrF,EAAIjO,YAEfgQ,EAAgB,kCAAD,OAAmCsD,GAAU,CAC1D5I,QAAS,cAVjB,wBAkBF,eAAC,IAAD,CAAME,MAAO,CAAEkE,UAAW,QAA1B,SACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,gCACA,eAAC,IAAD,CAAWyE,MAAM,QAAjB,wBAGJ,eAAC,IAAD,UACGvB,EAAKtC,KAAI,SAAC8D,GAAD,OACR,gBAAC,IAAD,WACE,eAAC,IAAD,UAA0BA,EAAEvB,OAAZuB,EAAEvB,OAClB,eAAC,IAAD,CAAWsB,MAAM,QAAjB,SAAmDC,EAAE3J,OAArD,UAAiC2J,EAAEvB,MAAnC,0BAOZ,eAAC,IAAD,CAAMrH,MAAO,CAAEkE,UAAW,QAA1B,SACE,gBAAC,IAAD,WACE,gBAAC,IAAD,WACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,6BACA,eAAC,IAAD,CAAWyE,MAAM,QAAjB,2BAGJ,eAAC,IAAD,UACGzB,EAAUQ,gBAAkBhF,EAAgBgF,eAC3CC,EAAc7C,KAAI,SAAC8D,GAAD,OAChB,gBAAC,IAAD,WACE,eAAC,IAAD,UAAYA,EAAEvB,QACd,eAAC,IAAD,CAAWsB,MAAM,QAAjB,SAA0BC,EAAE3J,mBAKrCiI,EAAUQ,gBAAkBhF,EAAgBgF,eAC3C,sBAAK1H,MAAO,CAAEkE,UAAW,QAAzB,SACE,eAAC,IAAD,CACEI,MAAM,gBACNtE,MAAO,CAAEuE,UAAW,UAFtB,iFAUR,eAAC,IAAD,CAAMvE,MAAO,CAAEkE,UAAW,QAA1B,SACE,eAAC,IAAD,UACE,eAAC2E,GAAD,CAAcrP,SAAU0N,EAAU1N,uBAShD,SAASqP,GAAT,GAAwD,IAAhCrP,EAA+B,EAA/BA,SACtB,OACE,gBAAC,IAAD,WACE,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,sBACA,eAAC,IAAD,CAAWmP,MAAM,QAAjB,sBACA,eAAC,IAAD,CAAWA,MAAM,QAAjB,yBAGJ,eAAC,IAAD,UACGnP,EAASsL,KAAI,SAAC8D,GAAD,OACZ,gBAAC,IAAD,WACE,eAAC,IAAD,UAAYA,EAAEvQ,OAAOjD,aACrB,eAAC,IAAD,CAAWuT,MAAM,QAAjB,SAA0BC,EAAER,WAAWhT,aACvC,eAAC,IAAD,CAAWuT,MAAM,QAAjB,SAA0BC,EAAEV,SAAS9S,wBAQjD,SAAS4P,GAAT,GAUI,IATFxF,EASC,EATDA,SACAkD,EAQC,EARDA,gBACAjD,EAOC,EAPDA,KACAC,EAMC,EANDA,QAOMW,EAAiBoC,eADtB,EAE2BpE,mBAAwB,MAFnD,mBAEMyK,EAFN,KAEcC,EAFd,KASD,OANArK,qBAAU,WACR1L,aAAUC,mBACR,CAACuM,EAAShM,YACV6M,EAAe/N,WACf8Q,MAAK,SAAC4F,GAAD,OAAeD,EAAUC,EAAU,GAAG5T,iBAC5C,CAACoK,EAAUa,EAAe/N,UAAWyW,EAAW1I,IAEjD,gBAAC,IAAD,CAAQZ,KAAMA,EAAMG,WAAS,EAACF,QAASA,EAASG,SAAS,KAAzD,UACE,eAAC,IAAD,UACE,eAAC,IAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAnC,6BAIF,gBAAC,IAAD,CAAeC,MAAO,CAAEC,cAAe,QAAvC,UACE,gBAAC,IAAD,WACE,yDADF,KACmC6I,EADnC,8FAIA,gBAAC,IAAD,WACE,eAAC,IAAD,UACE,eAAC,IAAD,UACE,eAAC,IAAD,yBAGJ,eAAC,IAAD,UACGpG,EAAgBiC,OAAOG,KAAI,SAAC8D,GAAD,OAC1B,eAAC,IAAD,UACE,eAAC,IAAD,UAAYA,EAAExT,cADDwT,EAAExT,uBAOzB,eAAC,IAAD,UACE,eAAC,IAAD,CAAQmN,QAAS7C,EAAjB,wBAOR,SAAS4I,GAAKlI,EAAIC,GAChB,GAAID,EAAGzN,QAAQL,UAAUgO,OAAOC,IAC9B,OAAO,eAAC,IAAD,IAET,GAAIH,EAAGzN,QAAQL,UAAUgO,OAAOD,EAAe/N,WAAY,CAKzD,GAJ4B+N,EAAeK,MAAMC,QAC/C,SACA,oBAEsBL,OAAOF,EAAGzN,QAAQyF,KAAKwI,MAAM,EAAG,IACtD,OAAO,eAAC,IAAD,IAMT,GAJyBP,EAAeK,MAAMC,QAC5C,SACA,cAEmBL,OAAOF,EAAGzN,QAAQyF,KAAKwI,MAAM,EAAG,IACnD,OAAO,eAAC,IAAD,IAGX,OAAIR,EAAGzN,QAAQL,UAAUgO,OAAOxJ,qBACvB,eAAC,KAAD,IAEL1E,KAAYkO,OAAOF,EAAGzN,QAAQyF,KAAKwI,MAAM,EAAG,IACvC,eAAC,IAAD,IAEF,sBAAKqI,IAAI,cAAcC,IAAI,cAAclJ,MAAO,CAACoC,MAAO,OAAQgC,WAAY,SAgB9E,SAAe+E,GAAtB,qC,8CAAO,WACLzT,EACA1B,GAFK,eAAAvB,EAAA,sEAIkBiD,EAAWmC,mBAChCf,oBACA,CACEc,QAAS,CACP,CACEL,OAAQ,CACNC,OAAQ,GACRC,MAAOzD,EAAU0D,aAGrB,CACE0R,SAAUC,iBAAcC,SAf3B,cAIC9P,EAJD,yBAqBHA,EACGsL,KAAI,SAAA8D,GACH,IAAMW,EAAeC,6BAAkBZ,EAAEjW,QAAQyF,MAEjD,OADAmR,EAAaE,QAAUb,EAAEvQ,OAClBkR,MAzBR,4C,oFCh+BP,6GAkBMG,EAAiDC,mBAAS,CAC9DC,iBAAO,GAAI,UACXA,iBAAO,GAAI,gBACXA,iBAAO,GAAI,SACXA,iBAAO,GAAI,aACXA,iBAAO,GAAI,kBAGN,SAASC,EAAkBC,GAChC,IAAMC,EAASrV,EAAOsV,MAAMC,KACtBC,EAAMR,EAAuBtO,OAAO0O,EAAGC,GAC7C,OAAOrV,EAAOyT,OAAO,CAACgC,EAASJ,EAAOnJ,MAAM,EAAGsJ,KAI1C,IAAMC,EAAUzV,EAAOuG,KAAK,mBAAoB,OAAOmP,Y,0DCjC9D,+EASaC,GAPmB,IAAIrX,YAClC,+CAE4B,IAAIA,YAChC,+CAGyB,CACzB,CACEmK,KAAM,eACNmN,IAAK,iCACLC,kBAAmB,+CAErB,CACEpN,KAAM,SACNmN,IAAK,gCACLC,kBAAmB,gDAErB,CACEpN,KAAM,WACNmN,IAAK,wBACLC,kBAAmB,kDAIV9L,EAAgB,SAAC+L,GACbH,EAAY9L,MAAK,SAACN,GAAD,OAASA,EAAId,OAASqN,MAY3CC,EAA4B,SAACH,GACxC,IAAII,EAAWL,EAAY9L,MAAK,SAACN,GAAD,OAASA,EAAIqM,KAAOA,KACpD,OAAKI,EAGEA,EAASH,kBAFP,K,kCC3CX,4FAwBalX,GAlBY,IAAIsX,IAAI,IAAIC,IAAIC,KAkBT,SAACC,GAAD,OAC/BpW,EAAOuG,KAAK8P,IAAMtT,MAAM0D,KAAKC,OAAO0P,Q,64bCR9B,SAASE,EAAT,GAQD,IAPFxL,EAOC,EAPDA,SACAE,EAMC,EANDA,QACAC,EAKC,EALDA,kBAKC,EACuBtB,oBAAS,GADhC,mBACMoB,EADN,KACYyC,EADZ,KAED,OACE,qCACE,eAAC,IAAD,CAAUmG,QAAM,EAAC9F,QAAS,kBAAML,GAAQ,SAACzC,GAAD,OAAWA,MAAnD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,MAEF,cAAC,IAAD,CAAce,QAAS,qBACtBf,EAAO,cAAC,IAAD,IAAiB,cAAC,IAAD,OAE3B,cAAC,IAAD,CAAU8I,GAAI9I,EAAM+I,QAAQ,OAAOC,eAAa,EAAhD,SACE,cAACwC,EAAD,CACEtL,kBAAmBA,EACnBH,SAAUA,EACVE,QAASA,SAOZ,SAASuL,EAAT,GAQH,IAPFzL,EAOC,EAPDA,SACAE,EAMC,EANDA,QACAC,EAKC,EALDA,kBAKC,EACiCtB,mBAAS,GAD1C,mBACMqG,EADN,KACiBY,EADjB,KAEKjF,EAAiBoC,cAEf2C,EAAoBC,cAApBD,gBACF8F,EAAe,uCAAG,0CAAAzY,EAAA,6DACtB2S,EAAgB,wCAAyC,CACvDtF,QAAS,SAEL1H,EAAO+S,EAAoB9K,EAAgBqE,GAJ3B,SAKS1R,YAAUC,mBACvC,CAACuM,EAAShM,YACV6M,EAAe/N,WAPK,0CAKfwV,EALe,KAShBtO,EAAW,CACf,CACEnB,OAAQmH,EACR4I,YAAY,EACZF,UAAU,GAEZ,CACE7P,OAAQyP,EACRM,YAAY,EACZF,UAAU,IAGR3E,EAAc,IAAIwC,UAClBqF,EAASnB,IAAU,IAtBH,KAuBL5J,EAAe8F,IAvBV,KAwBpB9F,EAAe/N,UAxBK,KAyBpBkH,EAzBoB,KA0BpBpB,EA1BoB,KA4BR,CACRoH,WACA+D,YAAaA,EAAYvP,UACzBqX,SAAUhL,EAAepO,SAASgT,OAAOjR,UACzCkG,KAAME,sBAhCU,KAkCT,CAACmJ,GAlCQ,UAoCVlD,EAAe1N,QAAQ4Q,YAAY6C,kBACvC7C,EAEA6H,GAvCc,6CA4BlB5R,SA5BkB,KAkClB0C,QAlCkB,KAmClBmK,aAnCkB,qBAuBciF,kBAvBd,uCAuBhBlL,EAvBgB,OA4CtBgF,EAAgB,sBAAuB,CACrCtF,QAAS,UACTwG,OAAQ,cAAC,IAAD,CAAiCC,UAAWnG,MAEtDT,EAAkB4D,EAAYvP,WAC9B0L,IAjDsB,4CAAH,qDAmDrB,OACE,sBACEM,MAAO,CACLuH,WAAY,UACZgE,YAAa,OACbC,aAAc,QAJlB,UAOE,cAAC,IAAD,CACE5L,WAAS,EACTI,MAAO,CAAEkE,UAAW,QACpBsC,MAAM,YACNvH,MAAOyF,EACP+B,KAAK,SACLC,SAAU,SAACC,GAETrB,EAAaqB,EAAEE,OAAO5H,UAG1B,qBAAKe,MAAO,CAAE8B,QAAS,OAAQiF,eAAgB,YAA/C,SACE,cAAC,IAAD,CAAQxE,QAAS,kBAAM2I,KAAvB,mCAOV,SAASC,EAAoB9K,EAAgBqE,GACzC,OAAOrE,EAAeK,MAAMnH,YAAY6B,OAAO,mBAAoB,CAC/DsJ,UAAW,IAAIlQ,IAAGkQ,O,gCC5I1B,iFAEI+G,EAAU,EACRC,EAA6B,GAEtBC,EAAc,SAC1BC,GAEA,OAAO,WAGN,OAFAH,IAEOG,EAAC,WAAD,aAAWC,SAAQ,WAGT,MAFhBJ,GAGCC,EAAU3W,SAAQ,SAAC+W,GAAD,OAAOA,YAMhBtZ,EAAa,SACzBuZ,GAEA,IAAIC,EAAqD,GACrDC,EAA2D,GAI/D,OAFAP,EAAUrW,MAAK,kBAAO4W,EAAiB,MAEhC,WAA8C,IAAD,uBAAzCC,EAAyC,yBAAzCA,EAAyC,gBACnD,IAAMC,EAAMC,YAAUF,GAChBG,EAAiBL,EAASG,IAAQF,EAAeE,GAEvD,IAAKE,EAAgB,CACpB,IAAMnG,EAAI6F,EAAI,WAAJ,EAAQG,GAElBF,EAASG,GAAOjG,EAAE2F,SAAQ,WACzBG,EAASG,QAAO/N,KAGbqN,IACHQ,EAAeE,GAAOjG,GAIxB,OAAO8F,EAASG,IAAQF,EAAeE,M,gQC7BlC,SAASG,EAAT,GAQD,IAPF9M,EAOC,EAPDA,SACAE,EAMC,EANDA,QACAC,EAKC,EALDA,kBAKC,EACuBtB,oBAAS,GADhC,mBACMoB,EADN,KACYyC,EADZ,KAED,OACE,qCACE,eAAC,IAAD,CAAUmG,QAAM,EAAC9F,QAAS,kBAAML,GAAQ,SAACzC,GAAD,OAAWA,MAAnD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,MAEF,cAAC,IAAD,CAAce,QAAS,oBACtBf,EAAO,cAAC,IAAD,IAAiB,cAAC,IAAD,OAE3B,cAAC,IAAD,CAAU8I,GAAI9I,EAAM+I,QAAQ,OAAOC,eAAa,EAAhD,SACE,cAAC8D,EAAD,CACE5M,kBAAmBA,EACnBH,SAAUA,EACVE,QAASA,SAOZ,IAAMa,EAA6B,IAAIvN,YAC5C,+CAGF,SAASuZ,EAAT,GAQI,IAPF/M,EAOC,EAPDA,SACAE,EAMC,EANDA,QACAC,EAKC,EALDA,kBAKC,EACiCtB,mBAAwB,MADzD,mBACM/L,EADN,KACiBka,EADjB,OAE2BnO,mBAAwB,MAFnD,mBAEM0L,EAFN,KAEc0C,EAFd,KAIKpM,EAAiBoC,cACf2C,EAAoBC,cAApBD,gBACFsH,EAAwB,uCAAG,kDAAAja,EAAA,6DAC/B2S,EAAgB,uBAAwB,CACtCtF,QAAS,SAEL6M,EAAc,IAAI3Z,YAAUV,GAC5Bsa,EAAa,IAAI5Z,YAAU+W,GAE3B3R,EAAO1D,EAAOuG,KAAK,CAAC,EAAG,EAAG,EAAG,IAPJ,SASF,sBAAC,4BAAAxI,EAAA,sEACC4N,EAAepO,SAASyD,WAAWmX,eAC9DF,GAF0B,UAIL,QAHjBG,EADsB,8BAKpB,IAAIhX,MAAM,sBALU,gCAOrB,CAELiX,mBAAoB,IAAI/Z,YAAU8Z,EAAe1U,KAAKwI,MAAM,MATlC,0CAAD,GATE,cASzBkM,EATyB,OAqBzBE,EAAQ3M,EAAepO,SAASgT,OAAOjR,UArBd,UAsBAhB,YAAUC,mBACvC,CAACuM,EAAShM,YACV6M,EAAe/N,WAxBc,2CAsBxBwV,EAtBwB,KA0BzBmF,EAAO,CACX,CACE5U,OAAQyU,EAAeC,mBACvB3E,YAAY,EACZF,UAAU,GAEZ,CAAE7P,OAAQsU,EAAavE,YAAY,EAAMF,UAAU,GACnD,CAAE7P,OAAQuU,EAAYxE,YAAY,EAAMF,UAAU,GAClD,CAAE7P,OAAQ2U,EAAO5E,YAAY,EAAMF,UAAU,GAC7C,CAAE7P,OAAQ+B,qBAAoBgO,YAAY,EAAOF,UAAU,GAC3D,CAAE7P,OAAQ6U,sBAAqB9E,YAAY,EAAOF,UAAU,GAC5D,CAAE7P,OAAQyP,EAAgBM,YAAY,EAAOF,UAAU,IAEnDkD,EAASnB,IACT1G,EAAc,IAAIwC,UAxCO,KAyCd1F,EAAe8F,IAzCD,KA0C7B5F,EA1C6B,KA2C7B0M,EA3C6B,KA4C7B7U,EA5C6B,KA8CjB,CACRoH,WACA+D,YAAaA,EAAYvP,UACzBqX,SAAUhL,EAAepO,SAASgT,OAAOjR,UACzCkG,KAAME,sBAlDmB,KAoDlB,CAACmJ,GApDiB,UAsDnBlD,EAAe1N,QAAQ4Q,YAAY6C,kBACvC7C,EAEA6H,GAzDuB,6CA8C3B5R,SA9C2B,KAoD3B0C,QApD2B,KAqD3BmK,aArD2B,qBAyCKiF,kBAzCL,uCAyCzBlL,EAzCyB,OA8D/BgF,EAAgB,sBAAuB,CACrCtF,QAAS,UACTwG,OAAQ,cAAC,IAAD,CAAiCC,UAAWnG,MAEtDT,EAAkB4D,EAAYvP,WAC9B0L,IAnE+B,4CAAH,qDAsE9B,OACE,sBACEM,MAAO,CACLuH,WAAY,UACZgE,YAAa,OACbC,aAAc,QAJlB,UAOE,cAAC,IAAD,CACE5L,WAAS,EACTI,MAAO,CAAEkE,UAAW,QACpBsC,MAAM,aACNvH,MAAO3M,EACPoU,SAAU,SAACC,GAAD,OAAO6F,EAAa7F,EAAEE,OAAO5H,UAEzC,cAAC,IAAD,CACEe,MAAO,CAAEkE,UAAW,QACpBtE,WAAS,EACT4G,MAAM,qBACNvH,MAAO8K,EACPrD,SAAU,SAACC,GAAD,OAAO8F,EAAU9F,EAAEE,OAAO5H,UAEtC,qBACEe,MAAO,CACL8B,QAAS,OACTiF,eAAgB,WAChB7C,UAAW,OACXjE,cAAe,QALnB,SAQE,cAAC,IAAD,CAAQsC,QAAS,kBAAMmK,KAAvB,oC,8RCnJH,SAASS,EAAT,GAQD,IAPF3N,EAOC,EAPDA,SACAE,EAMC,EANDA,QACAC,EAKC,EALDA,kBAKC,EACuBtB,oBAAS,GADhC,mBACMoB,EADN,KACYyC,EADZ,KAED,OACE,qCACE,eAAC,IAAD,CAAUmG,QAAM,EAAC9F,QAAS,kBAAML,GAAQ,SAACzC,GAAD,OAAWA,MAAnD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,MAEF,cAAC,IAAD,CAAce,QAAS,gBACtBf,EAAO,cAAC,IAAD,IAAiB,cAAC,IAAD,OAE3B,cAAC,IAAD,CAAU8I,GAAI9I,EAAM+I,QAAQ,OAAOC,eAAa,EAAhD,SACE,cAAC2E,EAAD,CACEzN,kBAAmBA,EACnBH,SAAUA,EACVE,QAASA,SAOnB,SAAS0N,EAAT,GAQI,IAPF5N,EAOC,EAPDA,SACAE,EAMC,EANDA,QACAC,EAKC,EALDA,kBAKC,EAEiCtB,mBAAwB,MAFzD,mBAEM/L,EAFN,KAEiBka,EAFjB,OAG2BnO,mBAAwB,MAHnD,mBAGM0L,EAHN,KAGc0C,EAHd,KAKKpM,EAAiBoC,cACf2C,EAAoBC,cAApBD,gBACFsH,EAAwB,uCAAG,gDAAAja,EAAA,6DAC/B2S,EAAgB,uBAAwB,CACtCtF,QAAS,SAEL6M,EAAc,IAAI3Z,YAAUV,GAC5Bsa,EAAa,IAAI5Z,YAAU+W,GALF,SAMTsD,qBAAWV,GANF,cAMzBW,EANyB,gBAOAta,YAAUC,mBACvC,CAACuM,EAAShM,YACV6M,EAAe/N,WATc,0CAOxBwV,EAPwB,KAWzB1P,EAAOhG,IAAsB,CAAEqa,UAAW,KAC1CQ,EAAO,CACX,CACE5U,OAAQuU,EACRxE,YAAY,EACZF,UAAU,GAEZ,CAAE7P,OAAQiV,EAASlF,YAAY,EAAMF,UAAU,GAC/C,CAAE7P,OAAQyP,EAAgBM,YAAY,EAAMF,UAAU,IAElDkD,EAASnB,IACT1G,EAAc,IAAIwC,UAtBO,KAuBd1F,EAAe8F,IAvBD,KAwB7BwG,EAxB6B,KAyB7BM,EAzB6B,KA0B7B7U,EA1B6B,KA4BjB,CACRoH,WACA+D,YAAaA,EAAYvP,UACzBqX,SAAUhL,EAAepO,SAASgT,OAAOjR,UACzCkG,KAAME,sBAhCmB,KAkClB,CAACmJ,GAlCiB,UAoCnBlD,EAAe1N,QAAQ4Q,YAAY6C,kBACvC7C,EAEA6H,GAvCuB,6CA4B3B5R,SA5B2B,KAkC3B0C,QAlC2B,KAmC3BmK,aAnC2B,qBAuBKiF,kBAvBL,uCAuBzBlL,EAvByB,OA4C/BgF,EAAgB,sBAAuB,CACrCtF,QAAS,UACTwG,OAAQ,cAAC,IAAD,CAAiCC,UAAWnG,MAEtDT,EAAkB4D,EAAYvP,WAC9B0L,IAjD+B,4CAAH,qDAoD9B,OACE,sBACEM,MAAO,CACLuH,WAAY,UACZgE,YAAa,OACbC,aAAc,QAJlB,UAOE,cAAC,IAAD,CACE5L,WAAS,EACTI,MAAO,CAAEkE,UAAW,QACpBsC,MAAM,aACNvH,MAAO3M,EACPoU,SAAU,SAACC,GAAD,OAAO6F,EAAa7F,EAAEE,OAAO5H,UAEzC,cAAC,IAAD,CACEe,MAAO,CAAEkE,UAAW,QACpBtE,WAAS,EACT4G,MAAM,iBACNvH,MAAO8K,EACPrD,SAAU,SAACC,GAAD,OAAO8F,EAAU9F,EAAEE,OAAO5H,UAEtC,qBACEe,MAAO,CACL8B,QAAS,OACTiF,eAAgB,WAChB7C,UAAW,OACXjE,cAAe,QALnB,SAQE,cAAC,IAAD,CAAQsC,QAAS,kBAAMmK,KAAvB,mC,8QCjIH,SAASa,EAAT,GAQD,IAPF/N,EAOC,EAPDA,SACAE,EAMC,EANDA,QACAC,EAKC,EALDA,kBAKC,EACuBtB,oBAAS,GADhC,mBACMoB,EADN,KACYyC,EADZ,KAED,OACE,qCACE,eAAC,IAAD,CAAUmG,QAAM,EAAC9F,QAAS,kBAAML,GAAQ,SAACzC,GAAD,OAAWA,MAAnD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,MAEF,cAAC,IAAD,CAAce,QAAS,eACtBf,EAAO,cAAC,IAAD,IAAiB,cAAC,IAAD,OAE3B,cAAC,IAAD,CAAU8I,GAAI9I,EAAM+I,QAAQ,OAAOC,eAAa,EAAhD,SACE,cAAC+E,EAAD,CACE7N,kBAAmBA,EACnBH,SAAUA,EACVE,QAASA,SAOnB,SAAS8N,EAAT,GAQI,IAPFhO,EAOC,EAPDA,SACAE,EAMC,EANDA,QACAC,EAKC,EALDA,kBAMMU,EAAiBoC,cAEjB8C,EAAW,IAAIvS,YAAU,oCAAoCoC,WAHlE,EAIuCiJ,mBAAS,CAACkH,IAJjD,mBAIMC,EAJN,KAIoBC,EAJpB,KAKOL,EAAoBC,cAApBD,gBACFqI,EAAS,uCAAG,0CAAAhb,EAAA,6DAChB2S,EAAgB,iCAAkC,CAChDtF,QAAS,SAEL6E,EAASa,EAAaV,KAAI,SAACoB,GAAD,OAAO,IAAIlT,YAAUkT,MAC/C9N,EAAOsV,EAAcrN,EAAgBsE,GAL3B,SAMe3R,YAAUC,mBACvC,CAACuM,EAAShM,YACV6M,EAAe/N,WARD,0CAMTwV,EANS,KAUVtO,EAAW,CACf,CACEnB,OAAQmH,EACR4I,YAAY,EACZF,UAAU,GAEZ,CACE7P,OAAQyP,EACRM,YAAY,EACZF,UAAU,IAGR3E,EAAc,IAAIwC,UACT,IAvBC,KAwBC1F,EAAe8F,IAxBhB,KAyBd9F,EAAe/N,UAzBD,KA0BdkH,EA1Bc,KA2BdpB,EA3Bc,KA6BF,CACRoH,WACA+D,YAAaA,EAAYvP,UACzBqX,SAAUhL,EAAepO,SAASgT,OAAOjR,UACzCkG,KAAME,sBAjCI,KAmCH,CAACmJ,GAnCE,UAqCJlD,EAAe1N,QAAQ4Q,YAAY6C,kBACvC7C,EAfO,KAvBC,6CA6BZ/J,SA7BY,KAmCZ0C,QAnCY,KAoCZmK,aApCY,qBAwBoBiF,kBAxBpB,0CAwBVlL,EAxBU,0DAgDhBgF,EAAgB,sBAAuB,CACrCtF,QAAS,UACTwG,OAAQ,cAAC,IAAD,CAAiCC,UAAWnG,MAEtDT,EAAkB4D,EAAYvP,WAC9B0L,IArDgB,4CAAH,qDAuDf,OACE,sBACEM,MAAO,CACLuH,WAAY,UACZgE,YAAa,OACbC,aAAc,QAJlB,UAOGhG,EAAaV,KAAI,SAACoB,EAAGY,GAAJ,OAChB,cAAC,IAAD,CACElH,WAAS,EACTI,MAAO,CAAEkE,UAAW,QACpBsC,MAAM,cACNvH,MAAOiH,EACPQ,SAAU,SAACC,GACT,IAAMT,EAAC,YAAOV,GACdU,EAAEY,GAAOH,EAAEE,OAAO5H,MAClBwG,EAAgBS,SAItB,qBAAKlG,MAAO,CAAE8B,QAAS,OAAQiF,eAAgB,YAA/C,SACE,cAAC,IAAD,CACExE,QAAS,WACP,IAAM2D,EAAC,YAAOV,GAEdU,EAAE7Q,KAAK,IAAIrC,YAAU,oCAAoCoC,YACzDqQ,EAAgBS,IALpB,SAQE,cAAC,IAAD,QAGJ,qBACElG,MAAO,CACL8B,QAAS,OACTiF,eAAgB,WAChB7C,UAAW,OACXjE,cAAe,QALnB,SAQE,cAAC,IAAD,CAAQsC,QAAS,kBAAMkL,KAAvB,6BAOV,SAASC,EAAcrN,EAAgBsE,GACnC,OAAOtE,EAAeK,MAAMnH,YAAY6B,OAAO,aAAc,CAC3DuJ,a,sPCjJC,SAASgJ,EAAT,GAQD,IAPFnO,EAOC,EAPDA,SACAE,EAMC,EANDA,QACAC,EAKC,EALDA,kBAKC,EACuBtB,oBAAS,GADhC,mBACMoB,EADN,KACYyC,EADZ,KAED,OACE,qCACE,eAAC,IAAD,CAAUmG,QAAM,EAAC9F,QAAS,kBAAML,GAAQ,SAACzC,GAAD,OAAWA,MAAnD,UACE,cAAC,IAAD,UACE,qBAAKwJ,IAAI,cAAcC,IAAI,cAAclJ,MAAO,CAACoC,MAAO,OAAQgC,WAAY,WAE9E,cAAC,IAAD,CAAc5D,QAAS,kBACtBf,EAAO,cAAC,IAAD,IAAiB,cAAC,IAAD,OAE3B,cAAC,IAAD,CAAU8I,GAAI9I,EAAM+I,QAAQ,OAAOC,eAAa,EAAhD,SACE,cAACmF,EAAD,CACEjO,kBAAmBA,EACnBH,SAAUA,EACVE,QAASA,SAOnB,SAASkO,EAAT,GAQI,IAPFpO,EAOC,EAPDA,SACAE,EAMC,EANDA,QACAC,EAKC,EALDA,kBAKC,EACyBtB,qBADzB,mBACMzJ,EADN,KACaC,EADb,OAE+CwJ,mBAAiBhK,IAAMwZ,yBAFtE,mBAEM1a,EAFN,KAEwB2a,EAFxB,OAG+BzP,mBAAS,CAAC,qDAHzC,mBAGM0P,EAHN,KAGgBC,EAHhB,KAIK3N,EAAiBoC,cACf2C,EAAoBC,cAApBD,gBAEF6I,EAAsB,uCAAG,WAAOtH,GAAP,SAAAlU,EAAA,sDAC7Bqb,EAAoBnH,EAAEE,OAAO5H,OAC7B3J,YAA0B+K,EAAepO,SAAU0U,EAAEE,OAAO5H,MAAOpK,GAAUuO,MAAK,WAChF8K,OAH2B,2CAAH,sDAOtBxB,EAAwB,uCAAG,WAAO7Y,EAAmB4E,GAA1B,yBAAAhG,EAAA,6DAC/B2S,EAAgB,uBAAwB,CACtCtF,QAAS,SAFoB,SAKA9M,YAAUC,mBACvC,CAACuM,EAAShM,YACV6M,EAAe/N,WAPc,0CAKxBwV,EALwB,cAUNtP,YAAa3E,EAAQ4E,EAAYqP,EAAgBzH,EAAepO,SAAUkB,GAVpE,cAUzBgb,EAVyB,OAWzB5K,EAAc,IAAIwC,UAXO,KAYd1F,EAAe8F,IAZD,KAa7BhU,IAAOE,cAAcC,UAbQ,KAc7B6b,EAAWC,KAdkB,KAe7B1Z,EAAOuG,KAAKkT,EAAW/V,MAfM,KAiBjB,CACRoH,WACA+D,YAAaA,EAAYvP,UACzBqX,SAAUhL,EAAepO,SAASgT,OAAOjR,UACzCkG,KAAME,sBArBmB,KAuBlB,CAACmJ,GAvBiB,UAyBnBlD,EAAe1N,QAAQ4Q,YAAY6C,kBACvC7C,EAEA0G,IAAU,KA5Ba,6CAiB3BzQ,SAjB2B,KAuB3B0C,QAvB2B,KAwB3BmK,aAxB2B,qBAYKiF,kBAZL,uCAYzBlL,EAZyB,OAiC/BgF,EAAgB,sBAAuB,CACrCtF,QAAS,UACTwG,OAAQ,cAAC,IAAD,CAAiCC,UAAWnG,MAEtDT,EAAkB4D,EAAYvP,WAC9B0L,IAtC+B,4CAAH,wDAyCxBwO,EAAoB,WACxB,GAAItZ,EAAO,CACT,IAAIyZ,EAAczZ,EAAMkQ,KAAI,SAAClS,GAAD,OACxB,sBACEoN,MAAO,CACL8B,QAAS,OACTiF,eAAgB,gBAChB3E,MAAO,OACPmF,WAAY,QACZgE,YAAa,OACbC,aAAc,OACd8C,aAAc,kBARlB,UAWE,mBAAGtO,MAAO,CAACoC,MAAO,SAAlB,SAA6BxP,EAAKD,QAAQqC,SAASI,aACnD,mBAAG4K,MAAO,CAACoC,MAAO,SAAlB,SAA6BxP,EAAKD,QAAQwK,OAC1C,oBAAG6C,MAAO,CAACoC,MAAO,SAAlB,cAA8BxP,EAAKD,QAAQ4b,UAAUrN,WAAW,IAAhE,WACA,cAAC,IAAD,CAAQlB,MAAO,CAACoC,MAAO,SAAUG,QAAS,kBAAMmK,EAAyB9Z,EAAKoB,UAAWpB,EAAKD,QAAQqC,WAAtG,wBAdQpC,EAAKD,QAAQqC,SAASI,eAmBpC4Y,EAAYK,KAIhB,OACE,sBACErO,MAAO,CACLuH,WAAY,UACZpD,QAAS,QAHb,UAME,6DAEI,uBACIhH,KAAK,mBACLsJ,KAAK,OACL+H,YAAarb,EACbsb,OAAQR,EACRjO,MAAO,CAACoE,WAAY,OAAQhC,MAAO,QAASsM,OAAQ,aAG5D,sBACE1O,MAAO,CACL8B,QAAS,OACTiF,eAAgB,gBAChB3E,MAAO,OACPmF,WAAY,QACZgE,YAAa,OACbC,aAAc,OACd8C,aAAc,kBARlB,UAWE,mBAAGtO,MAAO,CAACoC,MAAO,SAAlB,iCACA,mBAAGpC,MAAO,CAACoC,MAAO,SAAlB,uBACA,mBAAGpC,MAAO,CAACoC,MAAO,SAAlB,oBACA,mBAAGpC,MAAO,CAACoC,MAAO,cAEnB2L,Q,+VCzJF,SAASY,EAAT,GAQD,IAPFnP,EAOC,EAPDA,SACAE,EAMC,EANDA,QACAC,EAKC,EALDA,kBAKC,EACuBtB,oBAAS,GADhC,mBACMoB,EADN,KACYyC,EADZ,KAED,OACE,qCACE,eAAC,IAAD,CAAUmG,QAAM,EAAC9F,QAAS,kBAAML,GAAQ,SAACzC,GAAD,OAAWA,MAAnD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,MAEF,cAAC,IAAD,CAAce,QAAS,mBACtBf,EAAO,cAAC,IAAD,IAAiB,cAAC,IAAD,OAE3B,cAAC,IAAD,CAAU8I,GAAI9I,EAAM+I,QAAQ,OAAOC,eAAa,EAAhD,SACE,cAACmG,EAAD,CACEjP,kBAAmBA,EACnBH,SAAUA,EACVE,QAASA,SAOnB,SAASkP,EAAT,GAQI,IAPFpP,EAOC,EAPDA,SACAE,EAMC,EANDA,QACAC,EAKC,EALDA,kBAKC,EAC2BtB,mBAAwB,MADnD,mBACMwQ,EADN,KACcC,EADd,OAEqCzQ,mBAAwB,MAF7D,mBAEM0Q,EAFN,KAEmBC,EAFnB,OAG2B3Q,mBAAqB,MAHhD,mBAGM4Q,EAHN,KAGcC,EAHd,KAMK7O,EAAiBoC,cACf2C,EAAoBC,cAApBD,gBAEF+J,EAAgBC,YAA8B/O,EAAepO,SAAUuN,EAAUa,EAAe/N,WAEhG+c,EAA2B,uCAAG,WAAOC,EAAoBC,GAA3B,SAAA9c,EAAA,sEACrBkE,QAAMC,0BACjBC,8BACAC,mBACAyY,EACAD,GALgC,mFAAH,wDAS3B5C,EAAwB,uCAAG,wDAAAja,EAAA,6DAC/B2S,EAAgB,uBAAwB,CACtCtF,QAAS,SAEL0P,EAAa,IAAIxc,YAAU6b,GAC3BY,EAAqB,IAAIzc,YAAU+b,GALV,SAMA/b,YAAUC,mBACvC,CAACuM,EAAShM,YACV6M,EAAe/N,WARc,0CAMxBwV,EANwB,eAUE4H,0BAC/BrP,EAAepO,SACfud,GAZ6B,eAUzBG,EAVyB,iBAeON,EAA4BI,EAAoBE,EAAmBC,MAf1E,eAezBC,EAfyB,2BAmBWH,0BACtCrP,EAAepO,SACf4d,GArB2B,WAmBrBC,EAnBqB,OAwBzBH,EAAmBC,KAAKlY,aAAeoY,EAAwBF,KAAKlY,WAxB3C,wBAyB3B0N,EAAgB,4BAA6B,CAC3CtF,QAAS,UA1BgB,qFA+B3BsF,EAAgB,4GAA6G,CAACtF,QAAS,UA/B5G,4CAmCPiQ,sBACtB1P,EAAepO,SAAU0d,EAAmBC,MApCf,WAmCzBI,EAnCyB,OAsC1Bf,EAtC0B,wBAuC7B7J,EAAgB,qBAAsB,CACpCtF,QAAS,YAxCkB,kCA4CzBmQ,EAAM,IAAIjP,MAAI,IACdkP,EAAaD,EAAIrF,IAAI,IAAIpW,IAAGwb,EAAUG,WACtCC,EAAmBnB,EAAOoB,IAAIH,GAC9BI,EAAa3Z,QAAM4Z,0BACvBzZ,mBACA0Y,EACAK,EACA/H,EACA,GACA,IAAI9G,MAAIoP,EAAiBhb,aAErBmO,EAAc,IAAIwC,UAvDO,KAwDd1F,EAAe8F,IAxDD,KAyD7BrP,mBAzD6B,KA0D7BwZ,EAAWlC,KA1DkB,KA2D7B1Z,EAAOuG,KAAKqV,EAAWlY,MA3DM,KA6DjB,CACRoH,WACA+D,YAAaA,EAAYvP,UACzBqX,SAAUhL,EAAepO,SAASgT,OAAOjR,UACzCkG,KAAME,sBAjEmB,KAmElB,CAACmJ,GAnEiB,UAqEnBlD,EAAe1N,QAAQ4Q,YAAY6C,kBACvC7C,EAEA0G,IAAU,KAxEa,6CA6D3BzQ,SA7D2B,KAmE3B0C,QAnE2B,KAoE3BmK,aApE2B,qBAwDKiF,kBAxDL,uCAwDzBlL,EAxDyB,OA6E/BgF,EAAgB,sBAAuB,CACrCtF,QAAS,UACTwG,OAAQ,cAAC,IAAD,CAAiCC,UAAWnG,MAEtDT,EAAkB4D,EAAYvP,WAC9B0L,IAlF+B,2DAAH,qDAqF9B,OACE,sBACEM,MAAO,CACLuH,WAAY,UACZiJ,WAAY,OACZjF,YAAa,OACbC,aAAc,QALlB,UAQE,eAAC,IAAD,CAAa5L,WAAS,EAAtB,UACE,cAAC,IAAD,CAAYjB,GAAG,sBAAf,+BACA,cAAC,IAAD,CACE8R,WAAW,EACXxR,MAAO4P,EAFT,SAIGM,EAAcrK,KACb,SAAAyE,GACE,OACE,cAAC,IAAD,CAAUtK,MAAOsK,EAAaE,QAAQrU,WAAYmN,QAChD,WACEuM,EAAUvF,EAAaE,QAAQrU,aAFnC,SAKE,8BAAImU,EAAaqG,KAAKxa,WAAtB,iBAAgDmU,EAAa0F,OAAO/N,WAAa,KAAS9L,WAA1F,cAMV,cAAC,IAAD,CACE4K,MAAO,CAAEkE,UAAW,QACpBtE,WAAS,EACT4G,MAAM,SACNvH,MAAOgQ,EACPvI,SAAU,SAACC,GAAD,OAAOuI,EAAU,IAAIlO,MAAI2F,EAAEE,OAAO5H,WAE9C,cAAC,IAAD,CACEe,MAAO,CAAEkE,UAAW,QACpBtE,WAAS,EACT4G,MAAM,sBACNvH,MAAO8P,EACPrI,SAAU,SAACC,GAAD,OAAOqI,EAAerI,EAAEE,OAAO5H,aAI7C,qBACEe,MAAO,CACL8B,QAAS,OACTiF,eAAgB,WAChB7C,UAAW,OACXjE,cAAe,QALnB,SAQE,cAAC,IAAD,CAAQsC,QAAS,kBAAMmK,KAAvB,2C,sJC/MH,SAAS0C,EACdnd,EACAye,EACApe,GACiB,IAAD,EACc+L,mBAAyB,IADvC,mBACTsS,EADS,KACAC,EADA,KAkChB,OA/BAlS,qBAAU,WACR,IAAMhJ,EAAazD,EAASyD,WAyB5B,OAvBY,uCAAG,kCAAAjD,EAAA,sEACkBO,YAAUC,mBACvC,CAACyd,EAASld,YACVlB,GAHW,0CACNwW,EADM,mBAKoBK,YAAsBzT,EAAYoT,GALtD,cAKP+H,EALO,OAMbD,EAAWC,GANE,kBAONA,GAPM,4CAAH,oDASZC,GACG1N,MAAK,SAAAuN,GACJzb,QAAQC,IAAR,kBACawb,EAAQ3Y,OADrB,kCACqD0Y,EADrD,SAIDra,OAAM,WACLnB,QAAQoO,MACN,oBADF,kDAE6CoN,OAK1C,WACLE,EAAW,OAEZ,CAAC3e,IAEG0e,I,+PC1BF,SAASI,EAAT,GAQD,IAPFvR,EAOC,EAPDA,SACAE,EAMC,EANDA,QACAC,EAKC,EALDA,kBAKC,EACuBtB,oBAAS,GADhC,mBACMoB,EADN,KACYyC,EADZ,KAED,OACE,qCACE,eAAC,IAAD,CAAUmG,QAAM,EAAC9F,QAAS,kBAAML,GAAQ,SAACzC,GAAD,OAAWA,MAAnD,UACE,cAAC,IAAD,UACE,qBAAKwJ,IAAI,cAAcC,IAAI,cAAclJ,MAAO,CAACoC,MAAO,OAAQgC,WAAY,WAE9E,cAAC,IAAD,CAAc5D,QAAS,yBACtBf,EAAO,cAAC,IAAD,IAAiB,cAAC,IAAD,OAE3B,cAAC,IAAD,CAAU8I,GAAI9I,EAAM+I,QAAQ,OAAOC,eAAa,EAAhD,SACE,cAACuI,EAAD,CACErR,kBAAmBA,EACnBH,SAAUA,EACVE,QAASA,SAOrB,SAASsR,EAAT,GAQM,IAPFxR,EAOC,EAPDA,SACAE,EAMC,EANDA,QACAC,EAKC,EALDA,kBAKC,EAC2BtB,oBAAkB,GAD7C,mBACM4S,EADN,KACcC,EADd,OAE+C7S,mBAAiBhK,IAAMwZ,yBAFtE,mBAEM1a,EAFN,KAEwB2a,EAFxB,KAGKzN,EAAiBoC,cACf2C,EAAoBC,cAApBD,gBAYF+L,EAAW,uCAAG,WAAO/d,GAAP,eAAAX,EAAA,+EAEoB4H,YAA6BjH,EAAMiN,EAAepO,UAFtE,OAEVmf,EAFU,OAGhBF,EAAUE,EAAsBH,QAHhB,gDAKhB7L,EAAgB,oBAAD,OAAqBhS,EAArB,mBAA4C,CACvD0M,QAAS,UAEboR,GAAU,GARM,yDAAH,sDAYXG,EAAW1F,YAAW,uCAAC,WAAOhF,GAAP,yBAAAlU,EAAA,6DAC3BkU,EAAE2K,iBAEFlM,EAAgB,uBAAwB,CACtCtF,QAAS,SAJgB,SAOI9M,YAAUC,mBACvC,CAACuM,EAAShM,YACV6M,EAAe/N,WATU,0CAOpBwV,EAPoB,cAYJ1L,YAAsB0L,EAAgB3U,EAAkBkN,EAAepO,UAZnE,UAYvBkc,EAZuB,QAavB8C,EAbuB,kCAcN9U,YAAwB2L,EAAgB3U,EAAkBkN,EAAepO,UAdnE,QAczBkc,EAdyB,sBAgBrB5K,EAAc,IAAIwC,UAhBG,KAiBV1F,EAAe8F,IAjBL,KAkBzBhU,IAAOE,cAAcC,UAlBI,KAmBzB6b,EAAWC,KAnBc,KAoBzB1Z,EAAOuG,KAAKkT,EAAW/V,MApBE,KAsBb,CACRoH,WACA+D,YAAaA,EAAYvP,UACzBqX,SAAUhL,EAAepO,SAASgT,OAAOjR,UACzCkG,KAAME,sBA1Be,KA4Bd,CAACmJ,GA5Ba,UA8BflD,EAAe1N,QAAQ4Q,YAAY6C,kBACvC7C,EAEA0G,IAAU,KAjCS,6CAsBvBzQ,SAtBuB,KA4BvB0C,QA5BuB,KA6BvBmK,aA7BuB,qBAiBSiF,kBAjBT,uCAiBrBlL,EAjBqB,OAsC3BgF,EAAgB,sBAAuB,CACrCtF,QAAS,UACTwG,OAAQ,cAAC,IAAD,CAAiCC,UAAWnG,MAEtDT,EAAkB4D,EAAYvP,WAC9B0L,IA3C2B,4CAAD,uDA8C5B,OACI,qBACIM,MAAO,CACPuH,WAAY,UACZpD,QAAS,QAHb,SAMI,uBACIkN,SAAUA,EACVrR,MAAO,CACH8B,QAAS,OACTC,cAAe,UAJvB,UAOI,6DAEI,uBACI5E,KAAK,mBACLsJ,KAAK,OACL+H,YAAarb,EACbsb,OAvFW,SAAC9H,GAC9BmH,EAAoBnH,EAAEE,OAAO5H,OAC7BkS,EAAYxK,EAAEE,OAAO5H,QAsFHe,MAAO,CAACoE,WAAY,OAAQhC,MAAO,cAG3C,oHAEI,cAAC,IAAD,CACIjF,KAAK,SACLoU,QAASN,EACTvK,SA3FG,SAACC,GACtBuK,EAAUvK,EAAEE,OAAO0K,eA6FT,uBACI9K,KAAK,SACLxH,MAAM,qBACNe,MAAO,CAACuH,WAAY,QAASiK,OAAQ,UAAWpP,MAAM,QAASC,OAAO,kB,ySCjJnF,SAASoP,EAAT,GAQD,IAPFjS,EAOC,EAPDA,SACAE,EAMC,EANDA,QACAC,EAKC,EALDA,kBAKC,EACuBtB,oBAAS,GADhC,mBACMoB,EADN,KACYyC,EADZ,KAED,OACE,qCACE,eAAC,IAAD,CAAUmG,QAAM,EAAC9F,QAAS,kBAAML,GAAQ,SAACzC,GAAD,OAAWA,MAAnD,UACE,cAAC,IAAD,UACE,qBAAKwJ,IAAI,cAAcC,IAAI,cAAclJ,MAAO,CAACoC,MAAO,OAAQgC,WAAY,WAE9E,cAAC,IAAD,CAAc5D,QAAS,gBACtBf,EAAO,cAAC,IAAD,IAAiB,cAAC,IAAD,OAE3B,cAAC,IAAD,CAAU8I,GAAI9I,EAAM+I,QAAQ,OAAOC,eAAa,EAAhD,SACE,cAACiJ,EAAD,CACE/R,kBAAmBA,EACnBH,SAAUA,EACVE,QAASA,SAOrB,SAASgS,EAAT,GAQM,IAPFlS,EAOC,EAPDA,SACAE,EAMC,EANDA,QACAC,EAKC,EALDA,kBAKC,EAC6CtB,mBAAiBhK,IAAMwZ,yBADpE,mBACI1a,EADJ,KACsB2a,EADtB,OAEiCzP,oBAAkB,GAFnD,mBAEI5B,EAFJ,KAEgBkV,EAFhB,OAGsCtT,oBAAkB,GAHxD,mBAGG7B,EAHH,KAGkBoV,EAHlB,OAI4BvT,oBAAkB,GAJ9C,mBAIGtB,EAJH,KAIa8U,EAJb,OAKgCxT,mBAAiB,IALjD,mBAKGxB,EALH,KAKeiV,EALf,OAM6CzT,mBAAS,IAAI7J,IAAG,IAN7D,mBAMIkI,EANJ,KAMsBqV,EANtB,OAOgC1T,qBAPhC,mBAOG/E,EAPH,KAOe0Y,EAPf,OAQmC3T,mBAAiB,SARpD,mBAQI4T,EARJ,KAQiBC,EARjB,KASG7R,EAAiBoC,cACf2C,EAAoBC,cAApBD,gBAEF+M,GAAsBC,sBAAW,uCACvC,WAAOjf,EAA0Ba,GAAjC,eAAAvB,EAAA,sEAC0BuK,YACpB7J,EACJa,EACAqM,EAAepO,UAJjB,OACOqH,EADP,OAOM4Y,EADE5Y,EACa,SAEA,SAEpB0Y,EAAc1Y,GACX,IAEEyY,EAAoBzY,EAAWoD,kBAC/B,MAAO2G,GACP0O,EAAoB,IAAIvd,IAAG,IAhBjC,2CADuC,wDAoBvC,CAAC6L,EAAepO,SAASyD,WAAY2K,EAAepO,SAASgT,SAG9DvG,qBAAU,WACT,IACC,IAAM2T,EAAgB,IAAIrf,YAAU6J,GACpCsV,GAAoBhf,EAAkBkf,GACrC,MAAO1L,GACRqL,EAAc,SAEb,CAACnV,EAAY1J,EAAkBgf,KAElCzT,qBAAU,WACTmT,KAAa,OAACvY,QAAD,IAACA,OAAD,EAACA,EAAY+H,SAC1BsQ,KAAe,OAACrY,QAAD,IAACA,OAAD,EAACA,EAAYmD,aAC5BmV,KAAkB,OAACtY,QAAD,IAACA,OAAD,EAACA,EAAYkD,kBAC7B,CAAClD,IAED,IAAMgZ,GAAmB,SAACte,GACtB,IAEL,OADA,IAAIhB,YAAUgB,IACP,EACN,MAAO2S,GACR,OAAO,IAqCA0K,GAAW1F,YAAW,uCAAC,WAAOhF,GAAP,2BAAAlU,EAAA,6DACzBkU,EAAE2K,iBAEFlM,EAAgB,uBAAwB,CACpCtF,QAAS,SAJY,SAOM9M,YAAUC,mBACrC,CAACuM,EAAShM,YACV6M,EAAe/N,WATM,sCAOlBwV,EAPkB,KAYpBwK,GAAiBzV,GAZG,wBAarBuI,EAAgB,kCAAmC,CAC/CtF,QAAS,UAdQ,kCAmBnByS,EAAkB,IAAIvf,YAAU6J,GAnBb,UAoBAC,YACrB3J,EACA2U,EACAyK,EACAxV,EACAP,EACAC,EACAC,EACA2D,EAAepO,UA5BM,WAoBrBugB,EApBqB,OA8BpBlZ,EA9BoB,kCA+BAiD,YACjBpJ,EACA2U,EACAyK,EACA/V,EACAC,EACAC,EACA2D,EAAepO,UAtCE,QA+BrBugB,EA/BqB,sBA0CnBjP,EAAc,IAAIwC,UA1CC,KA4CR1F,EAAe8F,IA5CP,KA6CrBhU,IAAOE,cAAcC,UA7CA,KA8CrBkgB,EAAapE,KA9CQ,KA+CrB1Z,EAAOuG,KAAKuX,EAAapa,MA/CJ,KAiDX,CACNoH,WACA+D,YAAaA,EAAYvP,UACzBqX,SAAUhL,EAAepO,SAASgT,OAAOjR,UACzCkG,KAAME,sBArDW,KAuDZ,CAACmJ,GAvDW,UAyDXlD,EAAe1N,QAAQ4Q,YAAY6C,kBACzC7C,EAEA,KA5DiB,6CAiDrB/J,SAjDqB,KAuDrB0C,QAvDqB,KAwDrBmK,aAxDqB,qBA4CWiF,kBA5CX,uCA4CnBlL,EA5CmB,OAiE3BgF,EAAgB,sBAAuB,CACrCtF,QAAS,UACTwG,OAAQ,cAAC,IAAD,CAAiCC,UAAWnG,MAEtDT,EAAkB4D,EAAYvP,WAC9B0L,IAtE2B,4CAAD,uDAyE5B,OACI,sBACIM,MAAO,CACPuH,WAAY,UACZpD,QAAS,QAHb,UAML,+BAAK8N,EAAL,kBACA,uBAAMZ,SAAUA,GACHrR,MAAO,CACH8B,QAAS,OACTC,cAAe,UAHhC,UAMK,6DAEI,uBACI5E,KAAK,mBACLsJ,KAAK,OACL+H,YAAarb,EACbsb,OA9GiB,SAAC9H,GAChCmH,EAAoBnH,EAAEE,OAAO5H,QA8Gfe,MAAO,CAACoE,WAAY,OAAQhC,MAAO,QAASsM,OAAQ,aAGhE,0DAEC,uBACCvR,KAAK,kBACLsJ,KAAK,OACLxH,MAAOpC,EACP6J,SAxIuB,SAACC,GAC5BmL,EAAcnL,EAAEE,OAAO5H,QAwIDe,MAAO,CAACoE,WAAY,OAAQhC,MAAO,QAASsM,OAAQ,aAGxE,uBACA,8CAEC,yBACCvR,KAAK,WACLuJ,SA7IkB,SAACC,GACJ,SAAnBA,EAAEE,OAAO5H,MAAmB4S,GAAY,GAAQA,GAAY,IA6ItC7R,MAAO,CAACoE,WAAY,OAAQhC,MAAO,QAASsM,OAAQ,QAHvE,UAKC,wBAAQ+D,SAAU1V,EAAUkC,MAAM,OAAlC,kBAGA,wBAAQwT,UAAW1V,EAAUkC,MAAM,QAAnC,yBAKF,uBACA,gDAEC,yBACC9B,KAAK,aACLuJ,SAzJoB,SAACC,GACN,SAAnBA,EAAEE,OAAO5H,MAAmB0S,GAAc,GAAQA,GAAc,IAyJ1C3R,MAAO,CAACoE,WAAY,OAAQhC,MAAO,QAASsM,OAAQ,QAHvE,UAKC,wBAAQ+D,SAAUhW,EAAYwC,MAAM,OAApC,kBAGA,wBAAQwT,UAAWhW,EAAYwC,MAAM,QAArC,yBAKF,uBACA,mDAEC,yBACC9B,KAAK,gBACLuJ,SArKuB,SAACC,GACT,SAAnBA,EAAEE,OAAO5H,MAAmB2S,GAAiB,GAAQA,GAAiB,IAqK5D5R,MAAO,CAACoE,WAAY,OAAQhC,MAAO,QAASsM,OAAQ,QAH3D,UAKC,wBAAQ+D,SAAUjW,EAAeyC,MAAM,OAAvC,kBAGA,wBAAQwT,UAAWjW,EAAeyC,MAAM,QAAxC,yBAKE,iDAEE,cAAC,IAAD,CACEyH,SA3KuB,SAACC,GAChCoL,EAAoB,IAAIvd,IAAGke,KAAKC,MAAM,IAAIrc,KAAKqQ,GAAGiM,UAAU,QA2KpD3T,MAAO,IAAI3I,KAAmC,IAA9BoG,EAAiBwE,iBAGzC,uBACA,uBACCuF,KAAK,SACLxH,MAAK,UAAKgT,EAAL,gBACLjL,YA7KF1N,GACAA,EAAW+H,SAAWtE,GACtBzD,EAAWmD,aAAeA,GAC1BnD,EAAWkD,gBAAkBA,GAC1BlD,EAAWoD,mBAAqBA,GA0K5BsD,MAAO,CAACuH,WAAY,QAASiK,OAAQ,UAAWpP,MAAM,QAASC,OAAO,mB,0HC3TnEwQ,EAAa,SAACjK,EAAUkK,GACpC,IAAMC,EAAY,IAAIpI,IAAI/B,EAAEmK,WACtBC,EAAc,IAAIrI,IAAI/B,EAAEoK,aAE9B,OAAOF,EAAGzC,IAAI0C,GAAWE,IAAID,IAGjBE,EAAO,IAAIvI,IAAI,GCEf5U,EAAkB,SAACnD,EAAYiD,GAC3C,IAAMsd,EAAiBC,EAAoBxgB,GACrCygB,EAAgBC,EAAmB1gB,GAEzC,OAAIugB,EAAeI,GAAGL,IAASG,EAAcE,GAAGL,GACxCld,IAAWwd,OAIf5gB,EAAK6gB,SAASC,YAAc,IAAM9gB,EAAK6gB,SAASvS,YAAcrL,EAC1DG,IAAW2d,YAGZ3d,IAAWC,SA8BNmd,EAAsB,SAACxgB,GACnC,IAAM2b,EAAY,IAAI5D,IAAI/X,EAAK2b,UAAUrN,YACnC0S,EAAwB,IAAIjJ,IAAI/X,EAAKghB,sBAAsB1S,YAEjE,OAAOqN,EAAUsF,MAAMD,IAGXN,EAAqB,SAAC1gB,GAClC,IAAMkhB,EAAuB,IAAInJ,IAAI/X,EAAKkhB,qBAAqB5S,YAG/D,OAtB+B,SAACtO,GAChC,IAAM2b,EAAY,IAAI5D,IAAI/X,EAAK2b,UAAUrN,YACnC6S,EAAyBnhB,EAAKmhB,uBAC9BC,EAA6B,CAAEjB,UAAWngB,EAAKqhB,mBAAoBjB,YAAa,KAEtF,OAAOH,EAAWmB,EAAqBnB,EAAWkB,EAAwBxF,IAAYoE,MACrF,EACAhI,IAAIuJ,WAaiBC,CAAiBvhB,GAElBihB,MAAMC,K,gCClE5B,sGAAO,IAKMzf,EAAQ,CACpBwZ,wBAAyB,0BACzBvZ,UAAW,YACXgI,YAAa,cACb8X,cAAe,iBAQHvJ,EAAW,EAEXZ,EAAU,K,qGCuRR7X,EAxSE,CACfiiB,QAAS,QACTlX,KAAM,WACNkJ,aAAc,CACZ,CACElJ,KAAM,iBACN3D,SAAU,CACR,CACE2D,KAAM,WACNmX,OAAO,EACPpM,UAAU,GAEZ,CACE/K,KAAM,OACNmX,OAAO,EACPpM,UAAU,IAGdgE,KAAM,CACJ,CACE/O,KAAM,SACNsJ,KAAM,CACJ8N,IAAK,cAGT,CACEpX,KAAM,YACNsJ,KAAM,OAER,CACEtJ,KAAM,QACNsJ,KAAM,QAIZ,CACEtJ,KAAM,oBACN3D,SAAU,CACR,CACE2D,KAAM,WACNmX,OAAO,EACPpM,UAAU,GAEZ,CACE/K,KAAM,cACNmX,OAAO,EACPpM,UAAU,GAEZ,CACE/K,KAAM,WACNmX,OAAO,EACPpM,UAAU,GAEZ,CACE/K,KAAM,OACNmX,OAAO,EACPpM,UAAU,IAGdgE,KAAM,CACJ,CACE/O,KAAM,MACNsJ,KAAM,aAER,CACEtJ,KAAM,OACNsJ,KAAM,CACJ8N,IAAK,CACHC,QAAS,wBAIf,CACErX,KAAM,OACNsJ,KAAM,WAIZ,CACEtJ,KAAM,UACN3D,SAAU,CACR,CACE2D,KAAM,WACNmX,OAAO,EACPpM,UAAU,GAEZ,CACE/K,KAAM,cACNmX,OAAO,EACPpM,UAAU,GAEZ,CACE/K,KAAM,QACNmX,OAAO,EACPpM,UAAU,IAGdgE,KAAM,IAER,CACE/O,KAAM,YACN3D,SAAU,CACR,CACE2D,KAAM,WACNmX,OAAO,EACPpM,UAAU,GAEZ,CACE/K,KAAM,iBACNmX,OAAO,EACPpM,UAAU,IAGdgE,KAAM,CACJ,CACE/O,KAAM,SACNsJ,KAAM,CACJ8N,IAAK,gBAKb,CACEpX,KAAM,kBACN3D,SAAU,CACR,CACE2D,KAAM,WACNmX,OAAO,EACPpM,UAAU,GAEZ,CACE/K,KAAM,iBACNmX,OAAO,EACPpM,UAAU,IAGdgE,KAAM,CACJ,CACE/O,KAAM,YACNsJ,KAAM,SAIZ,CACEtJ,KAAM,qBACN3D,SAAU,CACR,CACE2D,KAAM,WACNmX,OAAO,EACPpM,UAAU,GAEZ,CACE/K,KAAM,iBACNmX,OAAO,EACPpM,UAAU,GAEZ,CACE/K,KAAM,cACNmX,OAAO,EACPpM,UAAU,IAGdgE,KAAM,KAGV1S,SAAU,CACR,CACE2D,KAAM,WACNsJ,KAAM,CACJgO,KAAM,SACNC,OAAQ,CACN,CACEvX,KAAM,SACNsJ,KAAM,CACJ8N,IAAK,cAGT,CACEpX,KAAM,YACNsJ,KAAM,OAER,CACEtJ,KAAM,QACNsJ,KAAM,MAER,CACEtJ,KAAM,gBACNsJ,KAAM,UAKd,CACEtJ,KAAM,cACNsJ,KAAM,CACJgO,KAAM,SACNC,OAAQ,CACN,CACEvX,KAAM,WACNsJ,KAAM,aAER,CACEtJ,KAAM,YACNsJ,KAAM,aAER,CACEtJ,KAAM,WACNsJ,KAAM,CACJ8N,IAAK,CACHC,QAAS,wBAIf,CACErX,KAAM,OACNsJ,KAAM,SAER,CACEtJ,KAAM,UACNsJ,KAAM,CACJ8N,IAAK,SAGT,CACEpX,KAAM,aACNsJ,KAAM,QAER,CACEtJ,KAAM,gBACNsJ,KAAM,WAMhBkO,MAAO,CACL,CACExX,KAAM,qBACNsJ,KAAM,CACJgO,KAAM,SACNC,OAAQ,CACN,CACEvX,KAAM,SACNsJ,KAAM,aAER,CACEtJ,KAAM,WACNsJ,KAAM,QAER,CACEtJ,KAAM,aACNsJ,KAAM,YAMhBmO,OAAQ,CACN,CACEC,KAAM,IACN1X,KAAM,eACN2X,IAAK,iDAEP,CACED,KAAM,IACN1X,KAAM,mBACN2X,IAAK,8CAEP,CACED,KAAM,IACN1X,KAAM,2BACN2X,IAAK,iEAEP,CACED,KAAM,IACN1X,KAAM,WACN2X,IAAK,yBAEP,CACED,KAAM,IACN1X,KAAM,iBACN2X,IAAK,yDAEP,CACED,KAAM,IACN1X,KAAM,kBACN2X,IAAK,oDAEP,CACED,KAAM,IACN1X,KAAM,mBACN2X,IAAK,mE,kBC7RJ,SAASrS,IACd,IAAMwC,EAAS8P,cACTrf,EAAawJ,cACb8V,EAAkBtf,EAAmBuf,aACrCC,EAA2BzK,YAA0BuK,GAE3D,OAAO1W,mBAAQ,WACb,IAIIrM,EAAW,IAAI+M,IAAStJ,EAAb,OAAyBuP,QAAzB,IAAyBA,IAAU,IAAIkQ,IAAOvZ,UAAQC,YAJxC,CAC3BuZ,oBAAqB,SACrBC,WAAY,WAGd,OAAO,IAAInjB,IAAQojB,EAAaJ,EAA0BjjB,KACzD,CAACgT,EAAQvP,M,mSCWP,SAAS6f,EAAgCC,GAAe,IACrDjP,EAAciP,EAAdjP,UACAtI,EAAQmB,cAARnB,IACFwX,EAAS,mBAAexX,EAAI7I,YAClC,OACE,cAAC,IAAD,CACEkP,MAAM,UACNvE,UAAU,IACV8G,OAAO,SACP6O,IAAI,WACJC,KAAM,yCAAkCpP,GAAckP,EALxD,uC,igBCnBW,SAASG,IACtB,IAAM3Q,EAAU8P,cACV7P,EAAUC,cAFe,EAGe9G,mBAAS,IAHxB,mBAGxBwX,EAHwB,KAGPC,EAHO,KAIzB9O,GAmMR,SAAuB+O,GACrB,IAEE,OADA,IAAI/iB,YAAU+iB,IACP,EACP,MAAOC,GACP,OAAO,GAxMSC,CAAcJ,GAC1BK,EAAW,WACfhR,EAAQ7P,KAAR,WAAiBwgB,KAEnB,OACE,cAACM,EAAA,EAAD,CACExU,SAAS,SACT3B,MAAO,CACLuH,WAAY,UACZjD,MAAO,UACP8R,UAAW,OACX9H,aAAc,kBANlB,SASE,cAAC+H,EAAA,EAAD,UACE,sBACErW,MAAO,CACL8B,QAAS,OACTM,MAAO,QAHX,UAME,sBAAKpC,MAAO,CAAE8B,QAAS,OAAQwU,KAAM,GAArC,UACE,cAACC,EAAD,CAAW/P,MAAM,WAAWgQ,WAAW,MACvC,sBACExW,MAAO,CACLoE,WAAY,OACZC,YAAa,OACb/B,aAAc,OACdR,QAAS,OACTwU,KAAM,EACNG,gBAAiB,oBAPrB,UAUE,uBACEzW,MAAO,CACLsW,KAAM,EACN/O,WAAY,OACZpD,QAAS,OACThC,OAAQ,OACRuU,aAAc,EACdpS,MAAO,WAETkK,YAAY,+BACZvP,MAAO4W,EACPnP,SAAU,SAACC,GAAD,OAAOmP,EAAmBnP,EAAEE,OAAO5H,QAC7C0X,WAAY,SAAChQ,GACG,UAAVA,EAAEwF,KACJ+J,OAIN,cAACU,EAAA,EAAD,CAAY5P,SAAUA,EAAUzE,QAAS2T,EAAzC,SACE,cAAC,IAAD,YAIN,sBACElW,MAAO,CACL8B,QAAS,QAFb,UAKE,cAAC+U,EAAD,IACA,cAAC,IAAD,IACC5R,GAAU,cAAC,IAAD,CAAwB6R,UAAW,cAAC,IAAD,IAAoB9W,MAAO,CAAEoE,WAAY,eAwCnG,SAASmS,EAAUf,GACjB,IAAMtQ,EAAUC,cACRqB,EAA4BgP,EAA5BhP,MAAOmP,EAAqBH,EAArBG,KAAMa,EAAehB,EAAfgB,WACrB,OACE,qBACExW,MAAO,CACL8B,QAAS,OACTC,cAAe,SACfgF,eAAgB,UAElBxE,QAAS,kBAAMiU,GAActR,EAAQ7P,KAAKmhB,IAN5C,SAQE,cAACO,EAAA,EAAD,CACE/W,MAAO,CAAEsE,MAAO,UAAW0S,eAAgB,QAC3CrB,KAAMA,EACN9O,OAAO,SAHT,SAKE,cAACoQ,EAAA,EAAD,CAAQ3S,MAAM,UAAd,SACE,qBACEtE,MAAO,CACL8B,QAAS,OACTiF,eAAgB,SAChBhF,cAAe,UAJnB,SAOE,cAACmV,EAAA,EAAD,CAAYlX,MAAO,CAAEmX,SAAU,QAA/B,SAA0C3Q,YAQtD,SAASqQ,IAAmB,IAAD,EACOxY,mBAAS,MADhB,mBAClB+Y,EADkB,KACRC,EADQ,OAEEjY,cAApBnB,EAFkB,EAElBA,IAAKH,EAFa,EAEbA,YAENwZ,EAAc,WAClBD,EAAY,OAGd,OACE,sBACErX,MAAO,CACLqE,YAAa,OACb8S,SAAU,OACVrV,QAAS,OACTiF,eAAgB,SAChBhF,cAAe,UANnB,UASE,eAACkV,EAAA,EAAD,CACE3S,MAAM,UACN/B,QAAS,SAACoE,GAAD,OACP0Q,EAEE1Q,EAAE4Q,gBALR,UASE,cAAC,IAAD,IACA,cAACL,EAAA,EAAD,CAAYlX,MAAO,CAAEoE,WAAY,MAAO+S,SAAU,QAAlD,SACGlZ,EAAI7I,gBAGT,cAACoiB,EAAA,EAAD,CACEJ,SAAUA,EACV3X,KAAMgY,QAAQL,GACd1X,QAAS4X,EACTtX,MAAO,CACLoE,WAAY,OACZE,MAAO,SANX,SASGpH,IAAU4H,KAAI,SAAA1H,GACb,OACE,cAACsa,EAAA,EAAD,CAEAnV,QAAS,WACP+U,IACAxZ,EAAYV,EAASA,WAJvB,SAOA,cAAC8Z,EAAA,EAAD,UAAa9Z,EAASD,QANjBC,EAASD,KAAK/H,oBCtMhB,SAASuiB,IACtB,OACE,qBACE3X,MAAO,CACL4X,OAAQ,GACRjW,SAAU,QACVS,MAAO,OACPR,OAAQ,EACR2C,UAAW,SACXlC,OAAQ,OACRoU,gBAAiB,UACjBoB,UAAW,iBACX/V,QAAS,OACTiF,eAAgB,gBAChBwE,YAAa,OACbC,aAAc,QAblB,SAgBE,sBAAKxL,MAAO,CAAEoE,WAAY,OAAQC,YAAa,OAAQvC,QAAS,QAAhE,UACE,cAACgW,EAAD,CACEnC,KAAM,4CACNnP,MAAO,WAET,cAACsR,EAAD,CACEnC,KAAM,iDACNnP,MAAO,wBAET,cAACsR,EAAD,CACEnC,KAAM,kDACNnP,MAAO,YAET,cAACsR,EAAD,CAAcnC,KAAM,4BAA6BnP,MAAO,aACxD,cAACsR,EAAD,CACEnC,KAAM,mCACNnP,MAAO,WAET,cAACsR,EAAD,CACEnC,KAAM,0BACNnP,MAAO,iBACPuR,OAAO,SAajB,SAASD,EAAatC,GAA2B,IACvChP,EAAuBgP,EAAvBhP,MAAOmP,EAAgBH,EAAhBG,KAAMoC,EAAUvC,EAAVuC,MACrB,OACE,qBACE/X,MAAO,CACL8B,QAAS,OACTiF,eAAgB,SAChBhF,cAAe,SACfsC,YAAa0T,EAAQ,GAAK,QAL9B,SAQE,cAAChB,EAAA,EAAD,CAAMpB,KAAMA,EAAM9O,OAAO,SAASvC,MAAM,UAAxC,SACE,cAAC4S,EAAA,EAAD,CAAYlX,MAAO,CAAEmX,SAAU,QAA/B,SAA0C3Q,QC5DnC,SAASwR,EAAOxC,GAAkC,IAAD,EAChCnX,oBAAS,GADuB,mBACvD4Z,EADuD,KAC9CC,EAD8C,KAE9D,OACE,sBACElY,MAAO,CACL8B,QAAS,OACTqW,UAAW,QACXpW,cAAe,SACf0U,gBAAiB,sBALrB,UAQE,sBACEzW,MAAO,CACL2B,SAAU,QACVS,MAAO,OACPwV,OAAQ,IAJZ,UAOE,cAACQ,EAAD,IACA,cAACxC,EAAD,OAEF,qBACE5V,MAAO,CACLoC,MAAO,OACP8B,UAAW,OACXoS,KAAM,EACNxU,QAAS,OACTmC,aAAc,QANlB,SASGoU,OAAOC,aAAaC,QAAQ,WAC3B,qBAAKvY,MAAO,CAAEoC,MAAO,QAArB,SAAgCoT,EAAMrX,WAEtC,cAACqa,EAAD,CACEC,UAAW,WACTJ,OAAOC,aAAaI,QAAQ,UAAW,QACvCR,GAAYD,QAKpB,cAACN,EAAD,OAKN,SAASS,IACP,OACE,qBACEpY,MAAO,CACLsE,MAAO,OACPmS,gBAAiB,kBACjBpU,OAAQ,OACRkC,UAAW,UALf,SAQE,qBACEvE,MAAO,CACL8B,QAAS,OACTiF,eAAgB,SAChBhF,cAAe,SACfM,OAAQ,QALZ,SAQE,cAAC6U,EAAA,EAAD,CAAYlX,MAAO,CAAEmX,SAAU,QAA/B,uEAQR,SAASqB,EAAT,GAAuE,IAAzCC,EAAwC,EAAxCA,UAC5B,OACE,sBACEzY,MAAO,CACLsW,KAAM,IACNxU,QAAS,OACTiF,eAAgB,SAChBhF,cAAe,SACfwC,UAAW,UANf,UASE,qBAAKvE,MAAO,CAAEoC,MAAO,OAAQN,QAAS,QAAtC,SACE,qBACE9B,MAAO,CAAE8B,QAAS,OAAQsC,WAAY,OAAQC,YAAa,QAD7D,SAGE,cAAC6S,EAAA,EAAD,CACElX,MAAO,CAAEiE,aAAc,OAAQpE,SAAU,UACzCyE,MAAM,gBACNxE,QAAQ,KAHV,kTAaJ,qBAAKE,MAAO,CAAE8B,QAAS,OAAQsC,WAAY,OAAQC,YAAa,QAAhE,SACE,cAAC4S,EAAA,EAAD,CAAQnX,QAAQ,YAAYwE,MAAM,UAAU/B,QAASkW,EAArD,0B,uJC1GKE,GAAb,WAQE,WACEnf,EACAof,GACC,0BANcpf,cAMf,OALeof,oBAKf,EACAC,KAAKrf,SAAWA,EAChBqf,KAAKD,eAAiBA,EAb1B,4CA4BE,WACE,OAAOC,KAAKrf,SAASxB,OAAS,IA7BlC,iCAgCE,WACE,OAAO6gB,KAAKrf,WAjChB,2BAoCE,SAAqBsf,GACnB,IAAMC,EAASF,KAAKG,eAAeF,GACnC,IAAKC,EACH,MAAM,IAAIjjB,MAAJ,yBAA4BgjB,IAGpC,OAAOC,IA1CX,4BA6CE,SAAsBD,GACpB,IAAM3M,EAAM2M,EAAa1jB,WACzB,OAAOyjB,KAAKD,eAAeK,IAAI9M,KA/CnC,mCAkDE,SAA6B+M,GAC3B,IAAMH,EAASF,KAAKM,uBAAuBD,GAC3C,IAAKH,EACH,MAAM,IAAIjjB,MAAJ,8BAAiCojB,IAGzC,OAAOH,IAxDX,oCA2DE,SAA8BG,GAI5B,OAHiBL,KAAKrf,SACnBqK,QAAO,SAAAlR,GAAO,OAAIA,EAAQid,KAAKtP,OAAO4Y,MACtCzV,MAAK,SAAChR,EAAGiR,GAAJ,OAAWjR,EAAEwc,OAAOmK,IAAI1V,EAAEuL,WAClB,MA/DpB,oBAgBE,WACE,OAAO0J,EAAoBU,4BAjB/B,mBAoBE,SAAoB7f,GAClB,IAAMof,EAAiB,IAAIU,IAI3B,OAHA9f,EAASzE,SAAQ,SAAAtC,GAAC,OAChBmmB,EAAeW,IAAI9mB,EAAEgX,QAAQrU,WAAY3C,MAEpC,IAAIkmB,EAAoBnf,EAAUof,OAzB7C,KAAaD,GACaU,0BAA4BV,GAAoBa,MACtE,I,oCCQJ,SAASC,GAAaC,GACpB,OAAO5iB,oBAGT,SAAS6iB,GAAW1nB,GAClB,MAAO,CACL,CACEmX,SAAUC,iBAAcC,MAE1B,CACE/R,OAAQ,CACNC,OAAQ,GACRC,MAAOxF,EAASgT,OAAOjR,UAAU0D,cAMzC,SAASkiB,GAAMC,GACb,IAAMC,EAAMtQ,6BAAkBqQ,EAAIE,YAAY3hB,MAE9C,OADA0hB,EAAIrQ,QAAUoQ,EAAIG,UACXF,EAST,IAAMG,GAAUrc,IAAMC,mBAAyBO,GAExC,SAAS8b,GAAT,GAAsD,IAAD,IAA1B/b,gBAA0B,MAAf,KAAe,ICvCrD,SACLsb,EACAE,EACAC,EACA3nB,GACqC,IAAD,EACNoM,mBAAc,IADR,mBAC7BsS,EAD6B,KACpBC,EADoB,OAERvS,oBAC1B,kBAAM,kBAAMzI,QAAQukB,QAAQ,QAHM,mBAE7BC,EAF6B,KAErBC,EAFqB,OAKFhc,oBAAS,GALP,mBAK7Bic,EAL6B,KAKlBC,EALkB,KAuEpC,OAhEA7b,qBAAU,WACR,IAAMpM,EAAYmnB,EAAaxnB,GACzB2F,EAAU+hB,EAAW1nB,GACrByD,EAAazD,EAASyD,WACtB8kB,EAAQ,IAAIlB,IAElB,GAAKhnB,EAAL,CAIA,IAAMwe,EAAS,WAEb,OADAyJ,GAAa,GACN7kB,EACJmC,mBAAmBvF,EAAW,CAAEsF,YAChCwL,MAAK,SAAAqX,GAAgB,IAAD,iBACDA,GADC,IACnB,2BAA+B,CAAC,IAArBZ,EAAoB,QACvBa,EAASd,EAAM,CACnBI,UAAWH,EAAIxhB,OACf0hB,YAAaF,EAAIlnB,UAEnB6nB,EAAMjB,IAAIM,EAAIxhB,OAAOX,WAAYgjB,IANhB,8BAQnB,IAAMC,EAASC,MAAM3f,KAAKuf,EAAMG,UAEhC,OADA/J,EAAW+J,GACJA,KAER9O,SAAQ,kBAAM0O,GAAa,OAEhCF,GAAU,kBAAMvJ,KAChBA,IACG1N,MAAK,SAAAuX,GACJzlB,QAAQC,IAAR,kBACawlB,EAAO3iB,OADpB,iCACmD1F,EADnD,SAID+D,OAAM,WACLnB,QAAQoO,MACN,oBADF,+CAE0ChR,OAI9C,IAAMuoB,EAAMnlB,EAAWolB,uBACrBxoB,GACA,SAAAyoB,GACE,IAAML,EAASd,EAAMmB,GACrBP,EAAMjB,IAAIwB,EAAKf,UAAUtiB,WAAYgjB,GACrC9J,EAAWgK,MAAM3f,KAAKuf,EAAMG,aAE9B,eACA/iB,GAGF,OAAO,WACL4iB,EAAMQ,QACNpK,EAAW,IACXyJ,GAAU,kBAAM,kBAAMzkB,QAAQukB,QAAQ,QAEtCzkB,EAAWulB,mCAAmCJ,GAAKzX,MAAK,WACtDlO,QAAQC,IAAR,uBAA4B7C,EAA5B,wBAGH,CAACqnB,EAAYF,EAAcG,EAAO3nB,IAE9B,CAAC0e,EAASyJ,EAAQE,GDjCvBY,CACEzB,GACAE,GACAC,GANoBnX,eAOJxQ,UARsC,mBAGnDkpB,EAHmD,KAGtCC,EAHsC,KAGnBC,EAHmB,KAWpDC,EAAShd,mBAAQ,WACrB,IAAMya,EAAM,YAAOoC,GACnB,OAAOxC,GAAoBa,MAAMT,KAChC,CAACoC,IAEEf,EAAShI,sBAAW,sBAAC,kCAAA3f,EAAA,sEACGmD,QAAQ/C,IAAI,CACtCuoB,MAFuB,0CAClBD,EADkB,KAInBpC,EAJmB,YAINoC,GAJM,kBAKlBpC,GALkB,2CAMxB,CAACqC,IAEEd,EAAYhc,mBAAQ,WACxB,OAAO+c,IACN,CAACA,IAEJ,OACE,cAACpB,GAAQjb,SAAT,CAAkBC,MAAO,CAAEqc,SAAQlB,SAAQE,aAA3C,SACGnc,IEMP,SAASod,KACP,IAAM/b,EAAW,IAAIxM,YAAU,gDAC/B,OAAO,cAACyO,EAAA,EAAD,CAAUjC,SAAUA,IAGtB,SAASgc,KACd,IAAMtW,EAAUC,cAEVsW,EADWC,cACKC,SAASC,MAAM,KACrC,GAAoB,IAAhBH,EAAKzjB,OAEP,OADAkN,EAAQ7P,KAAR,aACO,6BAEP,IAAMmK,EAAW,IAAIxM,YAAUyoB,EAAK,IACpC,OAAO,cAACha,EAAA,EAAD,CAAUjC,SAAUA,IAIhBqc,OA1Ef,WACE,IAAMC,EAAQC,YAAe,CAC3BC,QAAS,CACPzU,WAAY,CACV0U,QAAS,qBAGbC,WAAY,CACVC,WAAY,CAAC,kBAAmB,cAAcC,KAAK,MAErDC,UAAW,KAEPC,EAAUhe,mBACd,iBAAM,CACFie,cACAC,cACAC,YAAe,CACXC,QAAS,CACLC,SAAU,6FAGlBC,cACAC,cACAC,cACAC,iBAEJ,IAGF,OACE,eAAC,IAAD,CAAkBjB,MAAOA,EAAzB,UACE,cAACkB,EAAA,EAAD,IACA,cAAC,IAAD,CAAkBC,SAAU,EAAGC,iBAAkB,IAAjD,SACE,cAAC,IAAD,UACE,cAACC,EAAA,EAAD,CAAgBb,QAASA,EAASc,aAAW,EAA7C,SACI,cAAC,IAAD,UACE,cAAClD,GAAD,UACE,cAAC,IAAD,CAAYmD,SAAU,IAAtB,SACM,eAACrF,EAAD,WACE,cAAC,IAAD,CAAOsF,OAAK,EAAC7B,KAAK,IAAI1b,UAAWwb,KACjC,cAAC,IAAD,CACE+B,OAAK,EACL7B,KAAK,YACL1b,UAAWyb,wBCtDxB+B,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBra,MAAK,YAAkD,IAA/Csa,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BZ,M,sEChBYa,EAMAC,E,yBANAD,K,uBAAAA,E,oBAAAA,E,iBAAAA,M,cAMAC,K,8CAAAA,E,iCAAAA,E,wCAAAA,M,kBCCNC,EAAgC,CACrCnhB,KAAMihB,EAAcG,SACpBF,YAAaA,EAAYE,SACzBjsB,UAAW,IAAIU,YAAU,gDACzB8E,iBAAkB,IAAI9E,YAAU,gDAG3BwrB,EAA8B,CACnCrhB,KAAMihB,EAAcK,OACpBJ,YAAaA,EAAYI,OACzBnsB,UAAW,IAAIU,YAAU,gDACzB8E,iBAAkB,IAAI9E,YAAU,gDAG3B0rB,EAA+B,CACpCvhB,KAAMihB,EAAcO,QACpBN,YAAaA,EAAYM,QACzBrsB,UAAW,IAAIU,YAAU,gDACzB8E,iBAAkB,IAAI9E,YAAU,gDAkB3B4rB,EAAuB,WAE5B,OAhB+B,WAC/B,IAAMC,EAAgBC,eAGrB,IAAKC,OAAOpE,OAAOyD,GAAeY,MAAK,SAAClT,GAAD,OAAOA,IAAM+S,KACnD,MAAM,IAAI/oB,MAAJ,mCAAsC+oB,IAG7C,OAAOA,EAOcI,IAErB,KAAKb,EAAcK,OAClB,OAAOD,EACR,KAAKJ,EAAcO,QAClB,OAAOD,EACR,QACC,OAAOJ,IA+DGnsB,EAaL,CACNE,cA7CuB,WACxB,IAAM6sB,EAAoBN,IAEpBO,EA/BuB,WAC7B,IAAM/hB,EAAW0hB,qKAAYM,uBAE7B,GAAIhiB,EAAU,CACb,IAAK2hB,OAAOpE,OAAO0D,GAAaW,MAAK,SAACrY,GAAD,OAAOA,IAAMvJ,KACjD,MAAM,IAAItH,MAAJ,+BAAkCsH,IAGzC,OAAOA,GAuBYiiB,IAA2BH,EAAkBb,YAEjE,IAAKc,EACJ,MAAM,IAAIrpB,MAAM,4BAGjB,IAAMxD,EAzBqB,WAC3B,IAAM6Z,EAAM2S,qKAAYQ,qBAExB,GAAInT,EACH,OAAO,IAAInZ,YAAUmZ,GAqBJoT,IAAyBL,EAAkB5sB,UAE7D,IAAKA,EACJ,MAAM,IAAIwD,MAAM,0BAGjB,IAAMgC,EAvB4B,WAClC,IAAMqU,EAAM2S,qKAAYU,6BAExB,GAAIrT,EACH,OAAO,IAAInZ,YAAUmZ,GAmBGsT,IAAgCP,EAAkBpnB,iBAE3E,IAAKA,EACJ,MAAM,IAAIhC,MAAM,kCAUjB,OAPkC,2BAC9BopB,GAD8B,IAEjCb,YAAac,EACb7sB,YACAwF,qBAOqB4nB,GAcrBttB,IAAKutB,EACLC,eAZsC,CACtCvK,WAAY,YACZD,oBAAqB,aAWrByK,eATuB,CACvB,+CACA,mD","file":"static/js/main.ede0a5d6.chunk.js","sourcesContent":["import { BN, Program, ProgramAccount, Provider, Wallet, web3 } from \"@project-serum/anchor\";\nimport { TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\nimport { Connection, ParsedAccountData, PublicKey, SystemProgram, Keypair } from \"@solana/web3.js\";\nimport { config } from \"./config\";\nimport { SEEDS } from \"./consts\";\nimport { Deal, DealStatus } from \"./types/program.types\";\nimport { PdaSeeds } from \"./types/solana.types\";\nimport { multiAsync } from \"./utils/async.utils\";\nimport { mapDealToStatus } from \"./utils/deal.utils\";\nimport { encodeSeedString } from \"./utils/format.utils\";\nimport { dataToGatewayToken, GatewayTokenData } from \"@identity.com/solana-gateway-ts\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { SentimentSatisfiedAltSharp } from \"@material-ui/icons\";\n\nconst constructProgram = (provider: Provider) => {\n\treturn new Program(config.idl, config.clusterConfig.programId, provider);\n};\n\nconst getDealAccounts = multiAsync(async (provider) => {\n\tconst program = constructProgram(provider);\n\treturn program.account.deal.all();\n});\n\nconst findPDA = multiAsync(async (seeds: PdaSeeds) => {\n\tconst programId = config.clusterConfig.programId;\n\treturn PublicKey.findProgramAddress(seeds, programId);\n});\n\nconst findGlobalMarketStatePDA = multiAsync(async (globalMarketSeed) => {\n\tconst seed = encodeSeedString(globalMarketSeed);\n\treturn findPDA([seed]);\n});\n\nconst findSigningAuthorityPDA = multiAsync(async (globalMarketSeed) => {\n\tconst globalMarketStatePDA = await findGlobalMarketStatePDA(globalMarketSeed);\n\tconst seeds: PdaSeeds = [globalMarketStatePDA[0].toBuffer()];\n\treturn findPDA(seeds);\n});\n\nconst getGlobalMarketStateAccountData = multiAsync(\n\tasync (provider, globalMarketSeed) => {\n\t\tconst program = constructProgram(provider);\n\t\tconst globalMarketStatePDA = await findGlobalMarketStatePDA(globalMarketSeed);\n\t\treturn program.account.globalMarketState.fetch(globalMarketStatePDA[0]);\n\t}\n);\n\nexport const getDealAccountData = multiAsync((provider, dealPk) => {\n\tconst program = constructProgram(provider);\n\treturn program.account.deal.fetch(dealPk);;\n});\n\n\nconst getBaseMintPK = multiAsync(async (provider, globalMarketSeed) => {\n\tconst globalMarketState = await getGlobalMarketStateAccountData(provider, globalMarketSeed);\n\treturn globalMarketState.liquidityPoolTokenMintAccount;\n});\n\nexport const findDealPDA = multiAsync(async (publicKey: PublicKey, dealNumber: number, globalMarketSeed) => {\n\tconst globalMarketStatePDA = await findGlobalMarketStatePDA(globalMarketSeed);\n\tconst globalMarketStateSeed = globalMarketStatePDA[0].toBuffer();\n\tconst borrowerSeed = publicKey.toBuffer();\n\tconst dealInfo = encodeSeedString(SEEDS.DEAL_INFO);\n\tconst dealNumberBN = new BN(dealNumber);\n\n\tconst seeds: PdaSeeds = [\n\t\tglobalMarketStateSeed,\n\t\tborrowerSeed,\n\t\tdealNumberBN.toArrayLike(Buffer, \"le\", 2),\n\t\tdealInfo,\n\t];\n\treturn findPDA(seeds);\n});\n\nconst mapDealsToMarket = multiAsync(async (deals, globalMarketSeed, setDeals) => {\n\tconst marketDeals: ProgramAccount<Deal>[] = [];\n\t(deals as Array<ProgramAccount<Deal>>).forEach(async (deal) => {\n\t\tconst expectedDealPda = await findDealPDA(deal.account.borrower, deal.account.dealNumber, globalMarketSeed);\n\t\tconsole.log(deal.publicKey.toString());\n\t\tconsole.log(expectedDealPda[0].toString()); \n\t\tif (deal.publicKey.toString() === expectedDealPda[0].toString()) {\n\t\t\tmarketDeals.push(deal);\n\t\t}\n\t\tsetDeals(marketDeals); \n\t});\n});\n\nexport const findPendingDealsForMarket = multiAsync(async (provider, globalMarketSeed, setDeals) => {\n\tconst _deals = await getDealAccounts(provider);\n\tconst _clusterTime = getClusterTime(provider.connection);\n\tconst pendingDeals: ProgramAccount<Deal>[] = [];\n\tconst [deals, clusterTime] = await Promise.all([_deals, _clusterTime]);\n\tif (!clusterTime) {\n\t\tthrow Error(\"Could not fetch cluster time\");\n\t}\n\n\t(deals as Array<ProgramAccount<Deal>>).forEach((deal) => {\n\t\tconst status = mapDealToStatus(deal.account, clusterTime);\n\t\tif (status === DealStatus.PENDING) {\n\t\t\tpendingDeals.push(deal);\n\t\t}\n\t});\n\n\tawait mapDealsToMarket(pendingDeals, globalMarketSeed, setDeals); \n});\n\nexport const getClusterTime = multiAsync(async (connection: Connection) => {\n\tconst slot = await connection.getSlot();\n\treturn connection.getBlockTime(slot).catch(() => Date.now() * 1000);\n});\n\n\nconst getAssociatedBaseTokenAddressPK = multiAsync(\n\tasync (provider, publicKey: PublicKey, offCurve: boolean, globalMarketSeed) => {\n\t\tconst _baseMintPK = await getBaseMintPK(provider, globalMarketSeed);\n\t\treturn await Token.getAssociatedTokenAddress(\n\t\t\tASSOCIATED_TOKEN_PROGRAM_ID,\n\t\t\tTOKEN_PROGRAM_ID,\n\t\t\t_baseMintPK,\n\t\t\tpublicKey,\n\t\t\toffCurve\n\t\t);\n\t}\n);\n\nexport const getGatekeeperNetwork = multiAsync(async (provider, globalMarketSeed) => {\n\tconst globalMarketStateData = await getGlobalMarketStateAccountData(provider, globalMarketSeed);\n\tconsole.log(globalMarketStateData.gatekeeperNetwork.toString());\n\treturn globalMarketStateData.gatekeeperNetwork;\n});\n\nconst getGatewayToken = multiAsync(\n\tasync (provider, userPK: PublicKey, globalMarketSeed) => {\n\t\tconsole.log(\"pk user to check civic\", userPK.toString());\n\t\t// used from node_modules/@identity.com/solana-gateway-ts/src/lib `findGatewayTokens`\n\t\t// should be able to plug in our own program id in order to make it work locally\n\t\tconst GATEWAY_TOKEN_ACCOUNT_OWNER_FIELD_OFFSET = 2;\n\t\tconst GATEWAY_TOKEN_ACCOUNT_GATEKEEPER_NETWORK_FIELD_OFFSET = 35;\n\t\tconst gatekeeperNetwork = await getGatekeeperNetwork(provider, globalMarketSeed);\n\t\tconst ownerFilter = {\n\t\t\tmemcmp: {\n\t\t\t\toffset: GATEWAY_TOKEN_ACCOUNT_OWNER_FIELD_OFFSET,\n\t\t\t\tbytes: userPK.toBase58(),\n\t\t\t},\n\t\t};\n\t\tconst gatekeeperNetworkFilter = {\n\t\t\tmemcmp: {\n\t\t\t\toffset: GATEWAY_TOKEN_ACCOUNT_GATEKEEPER_NETWORK_FIELD_OFFSET,\n\t\t\t\tbytes: gatekeeperNetwork.toBase58(),\n\t\t\t},\n\t\t};\n\t\tconst filters = [ownerFilter, gatekeeperNetworkFilter];\n\t\tconst accountsResponse = await provider.connection.getProgramAccounts(config.clusterConfig.gatewayProgramId, {\n\t\t\tfilters,\n\t\t});\n\n\t\tif (accountsResponse.length === 0) {\n\t\t\tthrow Error(\"No valid Civic gateway tokens found\");\n\t\t}\n\n\t\treturn dataToGatewayToken(\n\t\t\tGatewayTokenData.fromAccount(accountsResponse[0].account.data as Buffer),\n\t\t\taccountsResponse[0].pubkey\n\t\t);\n\t}\n);\n\nconst getLiquidityPoolAssociatedBaseTokenAddressPK = multiAsync(\n\tasync (provider, globalMarketSeed) => {\n\t\tconst signingAuthorityPDA = await findSigningAuthorityPDA(globalMarketSeed);\n\t\treturn getAssociatedBaseTokenAddressPK(provider, signingAuthorityPDA[0], true, globalMarketSeed);\n\t}\n);\n\n\nexport const activateDeal = multiAsync(\n\tasync (dealPk: PublicKey, borrowerPk: PublicKey, multisigPk: PublicKey, provider, globalMarketSeed) => {\n\t\tconst program = constructProgram(provider);\n\t\tconst _userAssociatedBaseTokenAddressPK = getAssociatedBaseTokenAddressPK(\n\t\t\tprovider,\n\t\t\tborrowerPk,\n\t\t\tfalse,\n\t\t\tglobalMarketSeed\n\t\t);\n\t\tconst _baseMintPK = getBaseMintPK(provider, globalMarketSeed);\n\t\tconst _liquidityPoolAssociatedBaseTokenAddressPK = getLiquidityPoolAssociatedBaseTokenAddressPK(\n\t\t\tprovider, globalMarketSeed\n\t\t);\n\t\tconst _globalMarketStatePDA = findGlobalMarketStatePDA(globalMarketSeed);\n\t\tconst _signingAuthorityPDA = findSigningAuthorityPDA(globalMarketSeed);\n\t\tconst _getGatewayToken = getGatewayToken(provider, borrowerPk, globalMarketSeed);\n\t\tconst _getCredixPassPDA = findCredixPassPDA(borrowerPk, globalMarketSeed);\n\n\t\tconst [\n\t\t\tuserAssociatedBaseTokenAddressPK,\n\t\t\tbaseMintPK,\n\t\t\tliquidityPoolAssociatedBaseTokenAddressPK,\n\t\t\tglobalMarketStatePDA,\n\t\t\tsigningAuthorityPDA,\n\t\t\tgatewayToken,\n\t\t\tcredixPass,\n\t\t] = await Promise.all([\n\t\t\t_userAssociatedBaseTokenAddressPK,\n\t\t\t_baseMintPK,\n\t\t\t_liquidityPoolAssociatedBaseTokenAddressPK,\n\t\t\t_globalMarketStatePDA,\n\t\t\t_signingAuthorityPDA,\n\t\t\t_getGatewayToken,\n\t\t\t_getCredixPassPDA,\n\t\t]);\n\n\t\treturn program.instruction.activateDeal({\n\t\t\taccounts: {\n\t\t\t\towner: multisigPk,\n\t\t\t\tgatewayToken: gatewayToken.publicKey,\n\t\t\t\tglobalMarketState: globalMarketStatePDA[0],\n\t\t\t\tsigningAuthority: signingAuthorityPDA[0],\n\t\t\t\tdeal: dealPk,\n\t\t\t\tliquidityPoolTokenAccount: liquidityPoolAssociatedBaseTokenAddressPK,\n\t\t\t\tborrower: borrowerPk,\n\t\t\t\tassociatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n\t\t\t\tborrowerTokenAccount: userAssociatedBaseTokenAddressPK,\n\t\t\t\tcredixPass: credixPass[0],\n\t\t\t\tbaseMintAccount: baseMintPK,\n\t\t\t\ttokenProgram: TOKEN_PROGRAM_ID,\n\t\t\t\tsystemProgram: SystemProgram.programId,\n\t\t\t\trent: web3.SYSVAR_RENT_PUBKEY,\n\t\t\t},\n\t\t});\n\t}\n); \n\n\nexport const initializeMarket = multiAsync(\n\tasync (\n\t\tmultisigPk: PublicKey, \n\t\t_withdrawalFee: number, \n\t\t_interestFee: number, \n\t\t_globalMarketSeed: string, \n\t\t_baseMintPk: string, \n\t\t_treasuryPk: string, \n\t\t_gatekeeperNetworkPk: string,\n\t\tprovider\n\t\t) => {\n\t\t\tconst program = constructProgram(provider);\n\t\t\tconst withdrawalFee = _withdrawalFee * 1000; \n\t\t\tconst interestFee = _interestFee * 1000; \n\t\t\tconst baseMintPk = new PublicKey(_baseMintPk); \n\t\t\tconst treasuryPk = new PublicKey(_treasuryPk); \n\t\t\tconst gatekeeperNetworkPk = new PublicKey(_gatekeeperNetworkPk); \n\t\t\t\n\t\t\tconst [globalMarketStatePda, globalMarketStateBump] =\n\t\t\t\tawait PublicKey.findProgramAddress(\n\t\t\t\t\t[Buffer.from(anchor.utils.bytes.utf8.encode(_globalMarketSeed))],\n\t\t\t\t\tprogram.programId\n\t\t\t\t);\n\n\t\t\tconst [signingAuthorityPda, signingAuthorityPdaBump] =\n\t\t\t\tawait PublicKey.findProgramAddress(\n\t\t\t\t\t[globalMarketStatePda.toBuffer()],\n\t\t\t\t\tprogram.programId\n\t\t\t\t);\n\n\t\t\tconst treasuryAssociatedBaseTokenAddress =\n\t\t\t\tawait Token.getAssociatedTokenAddress(\n\t\t\t\t\tASSOCIATED_TOKEN_PROGRAM_ID,\n\t\t\t\t\tTOKEN_PROGRAM_ID,\n\t\t\t\t\tbaseMintPk,\n\t\t\t\t\ttreasuryPk,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\n\t\t\tconst liquidityPoolBaseTokenAccount =\n\t\t\t\tawait Token.getAssociatedTokenAddress(\n\t\t\t\t\tASSOCIATED_TOKEN_PROGRAM_ID,\n\t\t\t\t\tTOKEN_PROGRAM_ID,\n\t\t\t\t\tbaseMintPk,\n\t\t\t\t\tsigningAuthorityPda,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\n\t\t\tconst lpTokenMintKeypair = Keypair.generate();\n\n\t\t\treturn program.instruction.initializeMarket(\n\t\t\t\tsigningAuthorityPdaBump,\n\t\t\t\tglobalMarketStateBump,\n\t\t\t\t_globalMarketSeed,\n\t\t\t\tinterestFee, // 10%\n\t\t\t\twithdrawalFee, // 0.5%\n\t\t\t\t{\n\t\t\t\taccounts: {\n\t\t\t\t\towner: multisigPk,\n\t\t\t\t\tgatekeeperNetwork: new PublicKey(gatekeeperNetworkPk),\n\t\t\t\t\tglobalMarketState: globalMarketStatePda,\n\t\t\t\t\tliquidityPoolTokenAccount: liquidityPoolBaseTokenAccount,\n\t\t\t\t\ttreasury: new PublicKey(treasuryPk),\n\t\t\t\t\ttreasuryPoolTokenAccount: treasuryAssociatedBaseTokenAddress,\n\t\t\t\t\tlpTokenMintAccount: lpTokenMintKeypair.publicKey,\n\t\t\t\t\tbaseMintAccount: new PublicKey(baseMintPk),\n\t\t\t\t\trent: anchor.web3.SYSVAR_RENT_PUBKEY,\n\t\t\t\t\ttokenProgram: TOKEN_PROGRAM_ID,\n\t\t\t\t\tsigningAuthority: signingAuthorityPda,\n\t\t\t\t\tsystemProgram: anchor.web3.SystemProgram.programId,\n\t\t\t\t\tassociatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n\t\t\t\t},\n\t\t\t\tsigners: [lpTokenMintKeypair],\n\t\t\t\t}\n\t\t\t);\n\t}\n);\n\nexport const fetchGlobalMarketStateFrozen = multiAsync(async (globalMarketSeed: string, provider) => {\n\tconst program = constructProgram(provider);\n\tconst [globalMarketStatePda, globalMarketStateBump] =\n\t\tawait PublicKey.findProgramAddress(\n\t\t\t[Buffer.from(anchor.utils.bytes.utf8.encode(globalMarketSeed))],\n\t\t\tprogram.programId\n\t\t);\n\treturn program.account.globalMarketState.fetch(globalMarketStatePda);\n})\n\n// Freezing/thawing global market state\nexport const freezeGlobalMarketState = multiAsync(\n\tasync (\n\t\tmultisigPk: PublicKey, \n\t\tglobalMarketSeed: string,\n\t\tprovider\n\t\t) => {\n\t\t\tconst program = constructProgram(provider);\n\t\t\tconst [globalMarketStatePda, globalMarketStateBump] =\n\t\t\t\tawait PublicKey.findProgramAddress(\n\t\t\t\t\t[Buffer.from(anchor.utils.bytes.utf8.encode(globalMarketSeed))],\n\t\t\t\t\tprogram.programId\n\t\t\t\t);\n\n\t\t\treturn program.instruction.freezeGlobalMarketState({\n\t\t\t\taccounts: {\n\t\t\t\t\towner: multisigPk,\n\t\t\t\t\tglobalMarketState: globalMarketStatePda,\n\t\t\t\t},\n\t\t\t\tsigners: [],\n\t\t\t});\n\t\t}\n); \n  \nexport const thawGlobalMarketState = multiAsync(\n\tasync (\n\t\tmultisigPk: PublicKey, \n\t\tglobalMarketSeed: string,\n\t\tprovider\n\t\t) => {\n\t\t\tconst program = constructProgram(provider);\n\t\t\tconst [globalMarketStatePda, globalMarketStateBump] =\n\t\t\t\tawait PublicKey.findProgramAddress(\n\t\t\t\t\t[Buffer.from(anchor.utils.bytes.utf8.encode(globalMarketSeed))],\n\t\t\t\t\tprogram.programId\n\t\t\t\t);\n\n\t\t\treturn program.instruction.thawGlobalMarketState({\n\t\t\t\taccounts: {\n\t\t\t\t\towner: multisigPk,\n\t\t\t\t\tglobalMarketState: globalMarketStatePda,\n\t\t\t\t},\n\t\t\t\tsigners: [],\n\t\t\t});\n\t\t}\n); \n\nexport const findCredixPassPDA = multiAsync(async (publicKey: PublicKey, globalMarketSeed) => {\n\tconst globalMarketStatePDA = await findGlobalMarketStatePDA(globalMarketSeed);\n\tconst credixPassSeeds = encodeSeedString(SEEDS.CREDIX_PASS);\n\tconst seeds: PdaSeeds = [\n\t\tglobalMarketStatePDA[0].toBuffer(),\n\t\tpublicKey.toBuffer(),\n\t\tcredixPassSeeds,\n\t];\n\n\treturn findPDA(seeds);\n});\n\n\nexport const issueCredixPass = multiAsync(\n\tasync (\n    globalMarketSeed: string, \n\tmultisigPk: PublicKey, \n\tpublicKey: PublicKey,\n\tisUnderwriter: boolean,\n\tisBorrower: boolean,\n\treleaseTimestamp: BN, \n\tprovider\n) => {\n\tconst program = constructProgram(provider);\n\tconst _globalMarketStatePDA = findGlobalMarketStatePDA(globalMarketSeed);\n\tconst _getCredixPassPDA = findCredixPassPDA(publicKey, globalMarketSeed);\n\n\tconst [globalMarketStatePDA, credixPassPDA] = await Promise.all([\n\t\t_globalMarketStatePDA,\n\t\t_getCredixPassPDA,\n\t]);\n\n\treturn program.instruction.createCredixPass(credixPassPDA[1], isUnderwriter, isBorrower, releaseTimestamp, {\n\t\taccounts: {\n\t\t\towner: multisigPk,\n\t\t\tpassHolder: publicKey,\n\t\t\tcredixPass: credixPassPDA[0],\n\t\t\tsystemProgram: SystemProgram.programId,\n\t\t\trent: web3.SYSVAR_RENT_PUBKEY,\n\t\t\tglobalMarketState: globalMarketStatePDA[0],\n\t\t},\n\t\tsigners: [],\n\t});\n});\n\nexport const updateCredixPass = multiAsync(\n\tasync (\n\tglobalMarketSeed: string, \n\tmultisigPk: PublicKey, \n\tpublicKey: PublicKey,\n\tisActive: boolean,\n\tisUnderwriter: boolean,\n\tisBorrower: boolean,\n\treleaseTimestamp: BN, \n\tprovider\n) => {\n\tconst program = constructProgram(provider);\n\n\tconst _globalMarketStatePDA = findGlobalMarketStatePDA(globalMarketSeed);\n\tconst _getCredixPassPDA = findCredixPassPDA(publicKey, globalMarketSeed);\n\n\tconst [globalMarketStatePDA, credixPassPDA] = await Promise.all([\n\t\t_globalMarketStatePDA,\n\t\t_getCredixPassPDA,\n\t]);\n\n\treturn program.instruction.updateCredixPass(isActive, isUnderwriter, isBorrower, releaseTimestamp, {\n\t\taccounts: {\n\t\t\towner: multisigPk,\n\t\t\tpassHolder: publicKey,\n\t\t\tcredixPass: credixPassPDA[0],\n\t\t\tglobalMarketState: globalMarketStatePDA[0],\n\t\t},\n\t\tsigners: [],\n\t});\n});\n\nexport const getCredixPassInfo = multiAsync(\n\tasync (\n\t\tglobalMarketSeed: string, \n\t\tpublicKey: PublicKey, \n\t\tprovider) => {\n\t\tconst program = constructProgram(provider);\n\t\tconst [credixPassPDA] = await findCredixPassPDA(publicKey, globalMarketSeed);\n\t\treturn program.account.credixPass.fetchNullable(credixPassPDA);\n\t}\n);","import { BN } from \"@project-serum/anchor\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport type { AnchorTypes } from \"@saberhq/anchor-contrib\";\nimport Big from \"big.js\";\nimport { Credix } from \"../credix\";\n\nexport type CredixTypes = AnchorTypes<\n\tCredix,\n\t{\n\t\tdeal: Deal;\n\t\tglobalMarketState: GlobalMarketState;\n\t\tborrowerInfo: BorrowerInfo;\n\t\tcredixPass: CredixPass;\n\t},\n\t{ DealRepaymentType: RepaymentType; Ratio: Ratio }\n>;\n\nexport type CredixProgram = CredixTypes[\"Program\"];\n\nexport type Deal = CredixTypes[\"Accounts\"][\"deal\"];\nexport type CredixPass = CredixTypes[\"Accounts\"][\"credixPass\"];\nexport type GlobalMarketState = CredixTypes[\"Accounts\"][\"globalMarketState\"];\nexport type BorrowerInfo = CredixTypes[\"Accounts\"][\"borrowerInfo\"];\n\nexport type Ratio = {\n\tnumerator: number;\n\tdenominator: number;\n};\n\nexport type PrincipalRepaymentType = { principal: {} };\nexport type InterestRepaymentType = { interest: {} };\n\nexport type RepaymentType = PrincipalRepaymentType | InterestRepaymentType;\n\nexport interface PoolStats {\n\tTVL: Big;\n\tAPY: Ratio;\n\toutstandingCredit: Big;\n}\n\nexport enum DealStatus {\n\tCLOSED,\n\tIN_PROGRESS,\n\tPENDING,\n}","import { useLocalStorageState } from \"../utils/utils\";\nimport {\n  Keypair,\n  clusterApiUrl,\n  Connection,\n} from \"@solana/web3.js\";\nimport React, { useContext, useEffect, useMemo, useState } from \"react\";\nimport { setProgramIds } from \"../utils/ids\";\nimport { ENV as ChainID } from \"@solana/spl-token-registry\";\n\nexport type ENV =\n  | \"mainnet-beta\"\n  | \"localnet\"\n  | \"devnet\";\n\nexport const ENDPOINTS = [\n  {\n    name: \"mainnet-beta\" as ENV,\n    endpoint: \"https://ssc-dao.genesysgo.net/\",\n    chainID: ChainID.MainnetBeta,\n  },\n  {\n    name: \"localnet\" as ENV,\n    endpoint: \"http://127.0.0.1:8899\",\n    chainID: ChainID.Devnet,\n  },\n  {\n    name: \"devnet\" as ENV,\n    endpoint: clusterApiUrl(\"devnet\"),\n    chainID: ChainID.Devnet,\n  },\n];\n\nconst DEFAULT = ENDPOINTS[0].endpoint;\n\ninterface ConnectionConfig {\n  connection: Connection;\n  sendConnection: Connection;\n  endpoint: string;\n  env: ENV;\n  setEndpoint: (val: string) => void;\n}\n\nconst ConnectionContext = React.createContext<ConnectionConfig>({\n  endpoint: DEFAULT,\n  setEndpoint: () => {},\n  connection: new Connection(DEFAULT, \"recent\"),\n  sendConnection: new Connection(DEFAULT, \"recent\"),\n  env: ENDPOINTS[0].name,\n});\n\nexport function ConnectionProvider({ children = undefined as any }) {\n  const [endpoint, setEndpoint] = useState(ENDPOINTS[0].endpoint);\n  const connection = useMemo(() => new Connection(endpoint, \"recent\"), [\n    endpoint,\n  ]);\n  const sendConnection = useMemo(() => new Connection(endpoint, \"recent\"), [\n    endpoint,\n  ]);\n\n  const chain =\n    ENDPOINTS.find((end) => end.endpoint === endpoint) || ENDPOINTS[0];\n  const env = chain.name;\n\n  setProgramIds(env);\n\n  // The websocket library solana/web3.js uses closes its websocket connection when the subscription list\n  // is empty after opening its first time, preventing subsequent subscriptions from receiving responses.\n  // This is a hack to prevent the list from every getting empty\n  useEffect(() => {\n    const id = connection.onAccountChange(new Keypair().publicKey, () => {});\n    return () => {\n      connection.removeAccountChangeListener(id);\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    const id = connection.onSlotChange(() => null);\n    return () => {\n      connection.removeSlotChangeListener(id);\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    const id = sendConnection.onAccountChange(\n      new Keypair().publicKey,\n      () => {}\n    );\n    return () => {\n      sendConnection.removeAccountChangeListener(id);\n    };\n  }, [sendConnection]);\n\n  useEffect(() => {\n    const id = sendConnection.onSlotChange(() => null);\n    return () => {\n      sendConnection.removeSlotChangeListener(id);\n    };\n  }, [sendConnection]);\n\n  return (\n    <ConnectionContext.Provider\n      value={{\n        endpoint,\n        setEndpoint,\n        connection,\n        sendConnection,\n        env,\n      }}\n    >\n      {children}\n    </ConnectionContext.Provider>\n  );\n}\n\nexport function useConnection() {\n  return useContext(ConnectionContext).connection as Connection;\n}\n\nexport function useSendConnection() {\n  return useContext(ConnectionContext)?.sendConnection;\n}\n\nexport function useConnectionConfig() {\n  const context = useContext(ConnectionContext);\n  return {\n    endpoint: context.endpoint,\n    setEndpoint: context.setEndpoint,\n    env: context.env,\n  };\n}\n\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { useSnackbar } from \"notistack\";\nimport { encode as encodeBase64 } from \"js-base64\";\nimport Container from \"@material-ui/core/Container\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport StarsIcon from \"@material-ui/icons/Stars\"; \nimport DescriptionIcon from \"@material-ui/icons/Description\";\nimport Paper from \"@material-ui/core/Paper\";\nimport SupervisorAccountIcon from \"@material-ui/icons/SupervisorAccount\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport ReceiptIcon from \"@material-ui/icons/Receipt\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport GavelIcon from \"@material-ui/icons/Gavel\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport BuildIcon from \"@material-ui/icons/Build\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Card from \"@material-ui/core/Card\";\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport TextField from \"@material-ui/core/TextField\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Button from \"@material-ui/core/Button\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport List from \"@material-ui/core/List\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\n// import CredixLogo from \"../credix.svg\"; \nimport BN from \"bn.js\";\nimport {\n  Account,\n  PublicKey,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_CLOCK_PUBKEY,\n} from \"@solana/web3.js\";\nimport { ViewTransactionOnExplorerButton } from \"./Notification\";\nimport * as idl from \"../utils/idl\";\nimport { useMultisigProgram } from \"../hooks/useMultisigProgram\";\nimport { Token, ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, u64, AccountInfo as TokenAccount, AccountLayout } from \"@solana/spl-token\";\nimport { MoneyRounded } from \"@material-ui/icons\";\nimport { Connection } from \"@solana/web3.js\";\nimport { getMintInfo, getTokenAccount, parseTokenAccount, ProgramAccount } from \"@project-serum/common\";\nimport { useMultiSigOwnedTokenAccounts } from \"../hooks/useOwnedTokenAccounts\";\nimport { FormControl, InputLabel, MenuItem, Select } from \"@material-ui/core\";\nimport { config } from \"../credix/config\";\nimport { ChangeThresholdListItem } from \"./transactions/ChangeThreshold\";\nimport { ProgramUpdateListItem } from \"./transactions/ProgramUpgrade\";\nimport { IdlUpgradeListItem } from \"./transactions/IdlUpgrade\";\nimport { MultisigSetOwnersListItem } from \"./transactions/SetOwners\";\nimport { ActivateDealListItem } from \"./transactions/ActivateDeal\"; \nimport { TransferTokenListItem } from \"./transactions/TransferToken\";\nimport { FreezeThawGlobalMarketStateListItem } from \"./transactions/FreezeThawGlobalMarketState\";\nimport { InitializeMarketListItem } from \"./transactions/InitializeMarket\";\nimport { CredixPassListItem } from \"./transactions/CredixPass\";\n\n\nconst NO_SHOW_LIST = [\n  \"FPyePnLxghsUwPtrp9pEU8yc3W96ieDPdAdhWFbPKdMV\", \n  \"7ZwEod26DTdygr4rvrYLH9yLyyzh5UgXEumvo8x9CFJ7\",\n  \"5cnSAp7vCadCH75R6Kat1ZW1Pq4W317hQ6bWKD35oTBN\",\n  \"9QXwLCgjFJYSCrHaDgti4qQJHcFmnTsuBipNVXDCWUs8\",\n  \"2mztM4EBhUAiFVixdaYvzqe9YdZZ3oCGTewaVojFbufR\",\n  \"AJKeAJgXo16NzYJcw3R8WKrK11tYhoChVCHTWGBbHxcw\",\n  \"9ULcD9McCETwUaT3Pw8uZxk81qriiKRTX9Uo7LJZXj6o\",\n  \"7u3n13SDjBgz5Q6tmKRZzXnWCUmZJpva4Db1PUFXU9BE\",\n  \"5n5bwcHRMEZL6pYrMKQMeyQDtMbVzAbHeQF6mpy26jYS\",\n  \"8J5ChExD4pM6fPbMFk2bBKDQfkPLXXTeKSgeNkpfuEsR\",\n  \"fiq7nyThaQdH8wyfEFgFhHS4VnYFGdA4SvTP73LdgUh\",\n  \"387KmRLPVDUf7TQSbiEaQB8Jy36HgH7LMsbyj67LHXWu\",\n  \"AuMhJnjpiQjHffgbkA8HQ4fWjWi5yTJpAV9b8ZdwfpKv\",\n  \"FFu2QvyiFDg2omxLTqwyV57gAonRR5RSouVdJonFwekd\",\n  \"6vCbSFtMScZnqJUfQbfJGKHQVGGgHLNNBsZEtTCUHnUo\",\n  \"6GSHyR9HyKj2KH9PnU5Dd3uLeoayxiKqGbkcM8Y5dzeo\",\n  \"Crh7AQdaHbGQzMLpcgxU9xntjLfr5jxXejrPAfE9qnuR\"\n]; \n\n// NEW TRANSACTION \nfunction AddTransactionDialog({\n  multisig,\n  open,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  open: boolean;\n  onClose: () => void;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  return (\n    <Dialog open={open} fullWidth onClose={onClose} maxWidth=\"md\">\n      <DialogTitle>\n        <Typography variant=\"h4\" component=\"h2\">\n          New Transaction\n        </Typography>\n      </DialogTitle>\n      <DialogContent style={{ paddingBottom: \"16px\" }}>\n        <DialogContentText>\n          Create a new transaction to be signed by the multisig. This\n          transaction will not execute until enough owners have signed the\n          transaction.\n        </DialogContentText>\n        <List disablePadding>\n          <ProgramUpdateListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n          <IdlUpgradeListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n          <MultisigSetOwnersListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n          <ChangeThresholdListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n          <TransferTokenListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n          <ActivateDealListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n          <FreezeThawGlobalMarketStateListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n          {/* <InitializeMarketListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          /> */}\n          <CredixPassListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n        </List>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// LABELS FOR TRANSACTIONS\nfunction ixLabel(tx: any, multisigClient: any) {\n  if (tx.account.programId.equals(BPF_LOADER_UPGRADEABLE_PID)) {\n    // Upgrade instruction.\n    if (tx.account.data.equals(Buffer.from([3, 0, 0, 0]))) {\n      return (\n        <ListItemText\n          primary=\"Program upgrade\"\n          secondary={tx.publicKey.toString()}\n        />\n      );\n    }\n  }\n  if (tx.account.programId.equals(multisigClient.programId)) {\n    const setThresholdSighash = multisigClient.coder.sighash(\n      \"global\",\n      \"change_threshold\"\n    );\n    if (setThresholdSighash.equals(tx.account.data.slice(0, 8))) {\n      return (\n        <ListItemText\n          primary=\"Set threshold\"\n          secondary={tx.publicKey.toString()}\n        />\n      );\n    }\n    const setOwnersSighash = multisigClient.coder.sighash(\n      \"global\",\n      \"set_owners\"\n    );\n    if (setOwnersSighash.equals(tx.account.data.slice(0, 8))) {\n      return (\n        <ListItemText\n          primary=\"Set owners\"\n          secondary={tx.publicKey.toString()}\n        />\n      );\n    }\n  }\n  if (tx.account.programId.equals(TOKEN_PROGRAM_ID)) {\n    const tag = tx.account.data.slice(0, 1);\n    const amountBuf = tx.account.data.slice(1, 9) as Buffer;\n    const amountParsed = u64.fromBuffer(amountBuf).toNumber() / 1000000;\n    if (Buffer.from([3]).equals(tag)) {\n      return (\n        <ListItemText\n          primary={`Transfer ${amountParsed.toString()} Token`}\n          secondary={tx.publicKey.toString()}\n        />\n      );\n    }\n\n    if (Buffer.from([4]).equals(tag)) {\n      return (\n        <ListItemText\n          primary=\"Approve Token\"\n          secondary={tx.publicKey.toString()}\n        />\n      );\n    }\n\n    if (Buffer.from([7]).equals(tag)) {\n      return (\n        <ListItemText\n          primary=\"Mint Token To\"\n          secondary={tx.publicKey.toString()}\n        />\n      );\n    }\n    return (\n      <ListItemText\n        primary=\"Token Instructions\"\n        secondary={tx.publicKey.toString()}\n      />\n    );\n  }\n  if (tx.account.programId.equals(config.clusterConfig.programId)) {\n    if (tx.account.accounts.length === 2) {\n      return (\n        <ListItemText\n          primary={\"Freeze / Thaw market\"}\n          secondary={tx.publicKey.toString()}\n        />\n      );\n    // } else if (tx.account.accounts.length === 13) {\n    //   return (\n    //     <ListItemText\n    //       primary={\"Set up new market\"}\n    //       secondary={tx.publicKey.toString()}\n    //     />\n    //   );\n      \n    } else if (tx.account.accounts.length === 4 && tx.account.data.length === 19) { // update credix pass newest version\n      const credixPassPk = tx.account.accounts[1].pubkey.toString();\n      const active = tx.account.data.slice(8, 9)[0];\n      const underwriter = tx.account.data.slice(9, 10)[0];\n      const borrower = tx.account.data.slice(10,11)[0]; \n      const releaseDateBuffer = tx.account.data.slice(11, 19);\n      const releaseDateUnix = u64.fromBuffer(releaseDateBuffer); \n      let releaseDate; \n\n      if (releaseDateUnix.toNumber() === 0) {\n        releaseDate = \"no lockup\"; \n      } else {\n        releaseDate = new Date(releaseDateUnix.toNumber() * 1000); \n      }\n\n      return (\n        <ListItemText\n            primary={`Update credix pass for ${credixPassPk}`}\n            secondary={`Is active: ${!!active}, Is borrower: ${!!borrower}, Is underwriter: ${!!underwriter}, Lockup release date: ${releaseDate}`}\n          />\n      );\n    } else if (tx.account.accounts.length === 6 && tx.account.data.length === 19) { // create credix pass newest version\n      const credixPassPk = tx.account.accounts[1].pubkey.toString();\n      const underwriter = tx.account.data.slice(9, 10)[0];\n      const borrower = tx.account.data.slice(10, 11)[0];\n      const releaseDateBuffer = tx.account.data.slice(11, 19);\n      const releaseDateUnix = u64.fromBuffer(releaseDateBuffer); \n      let releaseDate; \n\n      if (releaseDateUnix.toNumber() === 0) {\n        releaseDate = \"no lockup\"; \n      } else {\n        releaseDate = new Date(releaseDateUnix.toNumber() * 1000); \n      }\n\n      return (\n        <ListItemText\n            primary={`Issue credix pass for ${credixPassPk}`}\n            secondary={`Is borrower: ${!!borrower}, Is underwriter ${!!underwriter}, Lockup release date: ${releaseDate}`}\n          />\n      );\n    } else if (tx.account.data.length === 11) { // update credix pass newest version\n      const credixPassPk = tx.account.accounts[1].pubkey.toString();\n      return (\n        <ListItemText\n            primary={`Issue / update credix pass for ${credixPassPk.slice(0,5)}...${credixPassPk.slice(-5,)}`}\n            secondary={tx.publicKey.toString()}\n          />\n      );\n    } else {\n      const borrowerPk = tx.account.accounts[6].pubkey.toString();\n      return (\n        <ListItemText\n          primary={`Activate deal for borrower ${borrowerPk}`}\n          secondary={tx.publicKey.toString()}\n        />\n      );\n    }\n  }\n  if (idl.IDL_TAG.equals(tx.account.data.slice(0, 8))) {\n    return (\n      <ListItemText primary=\"Upgrade IDL\" secondary={tx.publicKey.toString()} />\n    );\n  }\n  return <ListItemText primary={tx.publicKey.toString()} />;\n}\n\nexport default function Multisig({ multisig }: { multisig?: PublicKey }) {\n  return (\n    <div>\n      <Container fixed maxWidth=\"md\">\n        <div\n          style={{\n            position: \"fixed\",\n            bottom: \"75px\",\n            right: \"75px\",\n            display: \"flex\",\n            flexDirection: \"row-reverse\",\n          }}\n        >\n          <NewMultisigButton />\n        </div>\n      </Container>\n      {multisig && <MultisigInstance multisig={multisig} />}\n    </div>\n  );\n}\n\nconst BPF_LOADER_UPGRADEABLE_PID = new PublicKey(\n  \"BPFLoaderUpgradeab1e11111111111111111111111\"\n);\n\nfunction NewMultisigButton() {\n  const [open, setOpen] = useState(false);\n  return (\n    <div style={{ display: \"flex\" }}>\n      <IconButton\n        style={{\n          border: \"solid 1pt #ccc\",\n          width: \"60px\",\n          height: \"60px\",\n          borderRadius: \"30px\",\n        }}\n        onClick={() => setOpen(true)}\n      >\n        <AddIcon />\n      </IconButton>\n      <NewMultisigDialog open={open} onClose={() => setOpen(false)} />\n    </div>\n  );\n}\n\nexport function MultisigInstance({ multisig }: { multisig: PublicKey }) {\n  const multisigClient = useMultisigProgram();\n  const [multisigAccount, setMultisigAccount] = useState<any>(undefined);\n  const [transactions, setTransactions] = useState<any>(null);\n  const [showSignerDialog, setShowSignerDialog] = useState(false);\n  const [showAddTransactionDialog, setShowAddTransactionDialog] = useState(\n    false\n  );\n  const [forceRefresh, setForceRefresh] = useState(false);\n  useEffect(() => {\n    multisigClient.account\n      .multisig.fetch(multisig)\n      .then((account: any) => {\n        setMultisigAccount(account);\n      })\n      .catch((err: any) => {\n        console.error(err);\n        setMultisigAccount(null);\n      });\n  }, [multisig, multisigClient.account]);\n  useEffect(() => {\n    multisigClient.account.transaction.all(multisig.toBuffer()).then((txs) => {\n      txs.sort((a, b) => (!a.account.didExecute && b.account.didExecute) ? -1 : 1)\n      var txsFiltered = txs.filter(function(tx){\n        return !NO_SHOW_LIST.includes(tx.publicKey.toString());\n      });\n      setTransactions(txsFiltered);\n    }).catch(err => console.log(\"error\", err));\n  }, [multisigClient.account.transaction, multisig, forceRefresh]);\n  useEffect(() => {\n    multisigClient.account.multisig\n      .subscribe(multisig)\n      .on(\"change\", (account) => {\n        setMultisigAccount(account);\n      });\n  }, [multisigClient, multisig]);\n  return (\n    <Container fixed maxWidth=\"md\" style={{ marginBottom: \"16px\" }}>\n      <div>\n        <Card style={{ marginTop: \"24px\" }}>\n          {multisigAccount === undefined ? (\n            <div style={{ padding: \"16px\" }}>\n              <CircularProgress\n                style={{\n                  display: \"block\",\n                  marginLeft: \"auto\",\n                  marginRight: \"auto\",\n                }}\n              />\n            </div>\n          ) : multisigAccount === null ? (\n            <CardContent>\n              <Typography\n                color=\"textSecondary\"\n                style={{\n                  padding: \"24px\",\n                  textAlign: \"center\",\n                }}\n              >\n                Multisig not found\n              </Typography>\n            </CardContent>\n          ) : (\n            <></>\n          )}\n        </Card>\n        {multisigAccount && (\n          <Paper>\n            <AppBar\n              style={{ marginTop: \"24px\" }}\n              position=\"static\"\n              color=\"default\"\n              elevation={1}\n            >\n              <Toolbar>\n                <Typography variant=\"h6\" style={{ flexGrow: 1 }} component=\"h2\">\n                  {multisig.toString()} | {multisigAccount.threshold.toString()}{\" \"}\n                  of {multisigAccount.owners.length.toString()} Multisig\n                </Typography>\n                <Tooltip title=\"Signer\" arrow>\n                  <IconButton onClick={() => setShowSignerDialog(true)}>\n                    <InfoIcon />\n                  </IconButton>\n                </Tooltip>\n                <Tooltip title=\"Add\" arrow>\n                  <IconButton onClick={() => setShowAddTransactionDialog(true)}>\n                    <AddIcon />\n                  </IconButton>\n                </Tooltip>\n              </Toolbar>\n            </AppBar>\n            <List disablePadding>\n              {transactions === null ? (\n                <div style={{ padding: \"16px\" }}>\n                  <CircularProgress\n                    style={{\n                      display: \"block\",\n                      marginLeft: \"auto\",\n                      marginRight: \"auto\",\n                    }}\n                  />\n                </div>\n              ) : transactions.length === 0 ? (\n                <ListItem>\n                  <ListItemText primary=\"No transactions found\" />\n                </ListItem>\n              ) : (\n                transactions.map((tx: any) => (\n                  <TxListItem\n                    key={tx.publicKey.toString()}\n                    multisig={multisig}\n                    multisigAccount={multisigAccount}\n                    tx={tx}\n                  />\n                ))\n              )}\n            </List>\n          </Paper>\n        )}\n      </div>\n      <AddTransactionDialog\n        multisig={multisig}\n        open={showAddTransactionDialog}\n        onClose={() => setShowAddTransactionDialog(false)}\n        didAddTransaction={() => setForceRefresh(!forceRefresh)}\n      />\n      {multisigAccount && (\n        <SignerDialog\n          key={multisigClient.provider.wallet.publicKey.toString()}\n          multisig={multisig}\n          multisigAccount={multisigAccount}\n          open={showSignerDialog}\n          onClose={() => setShowSignerDialog(false)}\n        />\n      )}\n    </Container>\n  );\n}\n\nexport function NewMultisigDialog({\n  open,\n  onClose,\n}: {\n  open: boolean;\n  onClose: () => void;\n}) {\n  const history = useHistory();\n  const multisigClient = useMultisigProgram();\n  const { enqueueSnackbar } = useSnackbar();\n  const [threshold, setThreshold] = useState(2);\n  // @ts-ignore\n  const zeroAddr = new PublicKey(\"11111111111111111111111111111111\").toString();\n  const [participants, setParticipants] = useState([zeroAddr]);\n  const _onClose = () => {\n    onClose();\n    setThreshold(2);\n    setParticipants([zeroAddr, zeroAddr]);\n  };\n  const [maxParticipantLength, setMaxParticipantLength] = useState(10);\n  const disableCreate = maxParticipantLength < participants.length;\n  const createMultisig = async () => {\n    enqueueSnackbar(\"Creating multisig\", {\n      variant: \"info\",\n    });\n    const multisig = new Account();\n    // Disc. + threshold + nonce.\n    const baseSize = 8 + 8 + 1 + 4;\n    // Add enough for 2 more participants, in case the user changes one's\n    /// mind later.\n    const fudge = 64;\n    // Can only grow the participant set by 2x the initialized value.\n    const ownerSize = maxParticipantLength * 32 + 8;\n    const multisigSize = baseSize + ownerSize + fudge;\n    const [, nonce] = await PublicKey.findProgramAddress(\n      [multisig.publicKey.toBuffer()],\n      multisigClient.programId\n    );\n    const owners = participants.map((p) => new PublicKey(p));\n    const tx = await multisigClient.rpc.createMultisig(\n      owners,\n      new BN(threshold),\n      nonce,\n      {\n        accounts: {\n          multisig: multisig.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [multisig],\n        instructions: [\n          await multisigClient.account.multisig.createInstruction(\n            multisig,\n            // @ts-ignore\n            multisigSize\n          ),\n        ],\n      }\n    );\n    enqueueSnackbar(`Multisig created: ${multisig.publicKey.toString()}`, {\n      variant: \"success\",\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    _onClose();\n    history.push(`/${multisig.publicKey.toString()}`);\n  };\n  return (\n    <Dialog fullWidth open={open} onClose={_onClose} maxWidth=\"md\">\n      <DialogTitle>\n        <Typography variant=\"h4\" component=\"h2\">\n          New Multisig\n        </Typography>\n      </DialogTitle>\n      <DialogContent>\n        <TextField\n          fullWidth\n          label=\"Threshold\"\n          value={threshold}\n          type=\"number\"\n          onChange={(e) => setThreshold(parseInt(e.target.value) as number)}\n        />\n        <TextField\n          fullWidth\n          label=\"Max Number of Participants (cannot grow the owner set past this)\"\n          value={maxParticipantLength}\n          type=\"number\"\n          onChange={(e) => setMaxParticipantLength(parseInt(e.target.value) as number)}\n        />\n        {participants.map((p, idx) => (\n          <TextField\n            key={p}\n            fullWidth\n            label=\"Participant\"\n            value={p}\n            onChange={(e) => {\n              const p = [...participants];\n              p[idx] = e.target.value;\n              setParticipants(p);\n            }}\n          />\n        ))}\n        <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n          <IconButton\n            onClick={() => {\n              const p = [...participants];\n              // @ts-ignore\n              p.push(new PublicKey(\"11111111111111111111111111111111\").toString());\n              setParticipants(p);\n            }}\n          >\n            <AddIcon />\n          </IconButton>\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={_onClose}>Cancel</Button>\n        <Button\n          disabled={disableCreate}\n          variant=\"contained\"\n          type=\"submit\"\n          color=\"primary\"\n          onClick={() =>\n            createMultisig().catch((err) => {\n              const str = err ? err.toString() : \"\";\n              enqueueSnackbar(`Error creating multisig: ${str}`, {\n                variant: \"error\",\n              });\n            })\n          }\n        >\n          Create\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nfunction TxListItem({\n  multisig,\n  multisigAccount,\n  tx,\n}: {\n  multisig: PublicKey;\n  multisigAccount: any;\n  tx: any;\n}) {\n  const { enqueueSnackbar } = useSnackbar();\n  const multisigClient = useMultisigProgram();\n  const [open, setOpen] = useState(false);\n  const [txAccount, setTxAccount] = useState(tx.account);\n  useEffect(() => {\n    multisigClient.account.transaction\n      .subscribe(tx.publicKey)\n      .on(\"change\", (account) => {\n        setTxAccount(account);\n      });\n  }, [multisigClient, multisig, tx.publicKey]);\n  const rows = [\n    {\n      field: \"Program ID\",\n      value: txAccount.programId.toString(),\n    },\n    {\n      field: \"Did execute\",\n      value: txAccount.didExecute.toString(),\n    },\n    {\n      field: \"Instruction data\",\n      value: (\n        <code\n          style={{\n            wordBreak: \"break-word\",\n            width: \"370px\",\n            background: \"black\",\n            color: \"#ffffff\",\n            float: \"right\",\n            textAlign: \"left\",\n          }}\n        >\n          {encodeBase64(txAccount.data)}\n        </code>\n      ),\n    },\n    {\n      field: \"Multisig\",\n      value: txAccount.multisig.toString(),\n    },\n    {\n      field: \"Transaction account\",\n      value: tx.publicKey.toString(),\n    },\n    {\n      field: \"Owner set seqno\",\n      value: txAccount.ownerSetSeqno.toString(),\n    },\n  ];\n  const msAccountRows = multisigAccount.owners.map(\n    (owner: PublicKey, idx: number) => {\n      return {\n        field: owner.toString(),\n        value: txAccount.signers[idx] ? <CheckIcon /> : <RemoveIcon />,\n      };\n    }\n  );\n  const approve = async () => {\n    enqueueSnackbar(\"Approving transaction\", {\n      variant: \"info\",\n    });\n    await multisigClient.rpc.approve({\n      accounts: {\n        multisig,\n        transaction: tx.publicKey,\n        owner: multisigClient.provider.wallet.publicKey,\n      },\n    });\n    enqueueSnackbar(\"Transaction approved\", {\n      variant: \"success\",\n    });\n  };\n  const execute = async () => {\n    enqueueSnackbar(\"Executing transaction\", {\n      variant: \"info\",\n    });\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId\n    );\n    await multisigClient.rpc.executeTransaction({\n      accounts: {\n        multisig,\n        multisigSigner,\n        transaction: tx.publicKey,\n      },\n      remainingAccounts: txAccount.accounts\n        .map((t: any) => {\n          if (t.pubkey.equals(multisigSigner)) {\n            return { ...t, isSigner: false };\n          }\n          return t;\n        })\n        .concat({\n          pubkey: txAccount.programId,\n          isWritable: false,\n          isSigner: false,\n        }),\n    });\n    enqueueSnackbar(\"Transaction executed\", {\n      variant: \"success\",\n    });\n  };\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(!open)} key={tx.publicKey.toString()}>\n        <ListItemIcon>{icon(tx, multisigClient)}</ListItemIcon>\n        {ixLabel(tx, multisigClient)}\n        {txAccount.didExecute && (\n          <CheckCircleIcon style={{ marginRight: \"16px\" }} />\n        )}\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <div style={{ background: \"#ececec\", padding: \"10px\" }}>\n          <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n            <Button\n              style={{ marginRight: \"10px\" }}\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() =>\n                approve().catch((err) => {\n                  let errStr = \"\";\n                  if (err) {\n                    errStr = err.toString();\n                  }\n                  enqueueSnackbar(`Unable to approve transaction: ${errStr}`, {\n                    variant: \"error\",\n                  });\n                })\n              }\n            >\n              Approve\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={() =>\n                execute().catch((err) => {\n                  let errStr = \"\";\n                  if (err) {\n                    errStr = err.toString();\n                  }\n                  enqueueSnackbar(`Unable to execute transaction: ${errStr}`, {\n                    variant: \"error\",\n                  });\n                })\n              }\n            >\n              Execute\n            </Button>\n          </div>\n          <Card style={{ marginTop: \"16px\" }}>\n            <CardContent>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Transaction Field</TableCell>\n                    <TableCell align=\"right\">Value</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {rows.map((r) => (\n                    <TableRow>\n                      <TableCell key={r.field}>{r.field}</TableCell>\n                      <TableCell align=\"right\" key={`${r.field}-value`}>{r.value}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n          <Card style={{ marginTop: \"16px\" }}>\n            <CardContent>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Multisig Owner</TableCell>\n                    <TableCell align=\"right\">Did Sign</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {txAccount.ownerSetSeqno === multisigAccount.ownerSetSeqno &&\n                    msAccountRows.map((r: any) => (\n                      <TableRow>\n                        <TableCell>{r.field}</TableCell>\n                        <TableCell align=\"right\">{r.value}</TableCell>\n                      </TableRow>\n                    ))}\n                </TableBody>\n              </Table>\n              {txAccount.ownerSetSeqno !== multisigAccount.ownerSetSeqno && (\n                <div style={{ marginTop: \"16px\" }}>\n                  <Typography\n                    color=\"textSecondary\"\n                    style={{ textAlign: \"center\" }}\n                  >\n                    The owner set has changed since this transaction was created\n                  </Typography>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n          <Card style={{ marginTop: \"16px\" }}>\n            <CardContent>\n              <AccountsList accounts={txAccount.accounts} />\n            </CardContent>\n          </Card>\n        </div>\n      </Collapse>\n    </>\n  );\n}\n\nfunction AccountsList({ accounts }: { accounts: any }) {\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell>Account</TableCell>\n          <TableCell align=\"right\">Writable</TableCell>\n          <TableCell align=\"right\">Signer</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {accounts.map((r: any) => (\n          <TableRow>\n            <TableCell>{r.pubkey.toString()}</TableCell>\n            <TableCell align=\"right\">{r.isWritable.toString()}</TableCell>\n            <TableCell align=\"right\">{r.isSigner.toString()}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n}\n\nfunction SignerDialog({\n  multisig,\n  multisigAccount,\n  open,\n  onClose,\n}: {\n  multisig: PublicKey;\n  multisigAccount: any;\n  open: boolean;\n  onClose: () => void;\n}) {\n  const multisigClient = useMultisigProgram();\n  const [signer, setSigner] = useState<null | string>(null);\n  useEffect(() => {\n    PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId\n    ).then((addrNonce) => setSigner(addrNonce[0].toString()));\n  }, [multisig, multisigClient.programId, setSigner, multisigClient]);\n  return (\n    <Dialog open={open} fullWidth onClose={onClose} maxWidth=\"md\">\n      <DialogTitle>\n        <Typography variant=\"h4\" component=\"h2\">\n          Multisig Info\n        </Typography>\n      </DialogTitle>\n      <DialogContent style={{ paddingBottom: \"16px\" }}>\n        <DialogContentText>\n          <b>Program derived address</b>: {signer}. This is the address one\n          should use as the authority for data governed by the multisig.\n        </DialogContentText>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Owners</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {multisigAccount.owners.map((r: any) => (\n              <TableRow key={r.toString()}>\n                <TableCell>{r.toString()}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Close</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\n// @ts-ignore\nfunction icon(tx, multisigClient) {\n  if (tx.account.programId.equals(BPF_LOADER_UPGRADEABLE_PID)) {\n    return <BuildIcon />;\n  }\n  if (tx.account.programId.equals(multisigClient.programId)) {\n    const setThresholdSighash = multisigClient.coder.sighash(\n      \"global\",\n      \"change_threshold\"\n    );\n    if (setThresholdSighash.equals(tx.account.data.slice(0, 8))) {\n      return <GavelIcon />;\n    }\n    const setOwnersSighash = multisigClient.coder.sighash(\n      \"global\",\n      \"set_owners\"\n    );\n    if (setOwnersSighash.equals(tx.account.data.slice(0, 8))) {\n      return <SupervisorAccountIcon />;\n    }\n  }\n  if (tx.account.programId.equals(TOKEN_PROGRAM_ID)) {\n    return <MoneyRounded />\n  }\n  if (idl.IDL_TAG.equals(tx.account.data.slice(0, 8))) {\n    return <DescriptionIcon />;\n  }\n  return <img src=\"/credix.svg\" alt=\"Credix Logo\" style={{width: \"20px\", marginLeft: \"3px\"}}/>; \n}\n\n\n\n// Deterministic IDL address as a function of the program id.\nasync function idlAddress(programId: PublicKey): Promise<PublicKey> {\n  const base = (await PublicKey.findProgramAddress([], programId))[0];\n  return await PublicKey.createWithSeed(base, seed(), programId);\n}\n\n// Seed for generating the idlAddress.\nfunction seed(): string {\n  return \"anchor:idl\";\n}\n\nexport async function getOwnedTokenAccounts(\n  connection: Connection,\n  publicKey: PublicKey,\n): Promise<TokenAccount[]> {\n  const accounts = await connection.getProgramAccounts(\n    TOKEN_PROGRAM_ID,\n    {\n      filters: [\n        {\n          memcmp: {\n            offset: 32,\n            bytes: publicKey.toBase58(),\n          }\n        },\n        {\n          dataSize: AccountLayout.span,\n        }\n      ]\n    }\n  );\n  return (\n    accounts\n      .map(r => {\n        const tokenAccount = parseTokenAccount(r.account.data);\n        tokenAccount.address = r.pubkey;\n        return tokenAccount;\n      })\n  );\n}","import { struct, Layout } from \"buffer-layout\";\nimport { rustEnum } from \"@project-serum/borsh\";\nimport { TX_SIZE } from \"../credix/consts\";\n\n// Simplified since we only use the SetBuffer variant.\nexport type IdlInstruction =\n  | Create\n  | CreateBuffer\n  | Write\n  | SetBuffer\n  | SetAuthority;\n\ntype Create = {};\ntype CreateBuffer = {};\ntype Write = {};\ntype SetBuffer = {};\ntype SetAuthority = {};\n\nconst IDL_INSTRUCTION_LAYOUT: Layout<IdlInstruction> = rustEnum([\n  struct([], \"create\"),\n  struct([], \"createBuffer\"),\n  struct([], \"write\"),\n  struct([], \"setBuffer\"),\n  struct([], \"setAuthority\"),\n]);\n\nexport function encodeInstruction(i: IdlInstruction): Buffer {\n  const buffer = Buffer.alloc(TX_SIZE); // TODO: use a tighter buffer.\n  const len = IDL_INSTRUCTION_LAYOUT.encode(i, buffer);\n  return Buffer.concat([IDL_TAG, buffer.slice(0, len)]);\n}\n\n// Reverse for little endian.\nexport const IDL_TAG = Buffer.from(\"0a69e9a778bcf440\", \"hex\").reverse();\n","import { PublicKey } from \"@solana/web3.js\";\n\nexport const WRAPPED_SOL_MINT = new PublicKey(\n  \"So11111111111111111111111111111111111111112\"\n);\nexport let TOKEN_PROGRAM_ID = new PublicKey(\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n);\n\nexport const PROGRAM_IDS = [\n  {\n    name: \"mainnet-beta\",\n    url: \"https://ssc-dao.genesysgo.net/\", \n    multisigProgramId: \"msigmtwzgXJHj2ext4XJjCDmpbcMuufFb5cHuwg6Xdt\"\n  },\n  {\n    name: \"devnet\",\n    url: \"https://api.devnet.solana.com\",\n    multisigProgramId: \"74Cgm3as7QPrp1v8DfQkUHmj6QaSQupqCKGKmKhAvfzV\"\n  },\n  {\n    name: \"localnet\",\n    url: \"http://127.0.0.1:8899\",\n    multisigProgramId: \"74Cgm3as7QPrp1v8DfQkUHmj6QaSQupqCKGKmKhAvfzV\"\n  },\n];\n\nexport const setProgramIds = (envName: string) => {\n  let instance = PROGRAM_IDS.find((env) => env.name === envName);\n  if (!instance) {\n    return;\n  }\n};\n\nexport const programIds = () => {\n  return {\n    token: TOKEN_PROGRAM_ID,\n  };\n};\n\nexport const getMultisigProgramIdByUrl = (url: string) => {\n  let instance = PROGRAM_IDS.find((env) => env.url == url); \n  if (!instance) {\n    return \"\";\n  }; \n  return instance.multisigProgramId; \n}; ","import { utils } from \"@project-serum/anchor\";\nimport { DECIMALS } from \"../consts\";\nimport { DealStatus, Ratio } from \"../types/program.types\";\nimport Big, { RoundingMode } from \"big.js\";\n\nconst roundingPrecision = 2;\nconst conversionFactor = new Big(10).pow(DECIMALS);\n\nexport const formatNumber = (n: Big, roundingMode: RoundingMode, formatter: any) =>\n\tformatter(n.round(roundingPrecision, roundingMode).toNumber());\n\nexport const toUIAmount = (n: Big) => n.div(conversionFactor);\n\nexport const formatUIAmount = (n: Big, roundingMode: RoundingMode, formatter: any) =>\n\tformatNumber(toUIAmount(n), roundingMode, formatter);\n\nexport const toProgramAmount = (n: Big) => n.mul(conversionFactor);\n\nexport const formatRatio = (r: Ratio) => {\n\tconst numerator = new Big(r.numerator);\n\tconst denominator = new Big(r.denominator);\n\treturn numerator.div(denominator).mul(100);\n};\n\nexport const encodeSeedString = (seedString: string) =>\n\tBuffer.from(utils.bytes.utf8.encode(seedString));\n\nexport const formatDealStatus = (dealStatus: DealStatus) => {\n\tswitch (dealStatus) {\n\t\tcase DealStatus.CLOSED:\n\t\t\treturn \"closed\";\n\t\tcase DealStatus.IN_PROGRESS:\n\t\t\treturn \"in progress\";\n\t\tdefault:\n\t\t\treturn \"pending\";\n\t}\n};\n","import { useSnackbar } from \"notistack\";\nimport { Button, Collapse, ListItem, ListItemIcon, ListItemText, TextField } from \"@material-ui/core\";\nimport { ExpandLess, ExpandMore } from \"@material-ui/icons\";\nimport { useState } from \"react\";\nimport { useMultisigProgram } from \"../../hooks/useMultisigProgram\";\nimport { ViewTransactionOnExplorerButton } from \"../Notification\";\nimport GavelIcon from \"@material-ui/icons/Gavel\";\nimport BN from \"bn.js\";\n\nimport {\n    Account,\n    PublicKey,\n    SYSVAR_RENT_PUBKEY,\n    SYSVAR_CLOCK_PUBKEY,\n  } from \"@solana/web3.js\";\nimport { TX_SIZE } from \"../../credix/consts\";\n\nexport function ChangeThresholdListItem({\n    multisig,\n    onClose,\n    didAddTransaction,\n  }: {\n    multisig: PublicKey;\n    onClose: Function;\n    didAddTransaction: (tx: PublicKey) => void;\n  }) {\n    const [open, setOpen] = useState(false);\n    return (\n      <>\n        <ListItem button onClick={() => setOpen((open) => !open)}>\n          <ListItemIcon>\n            <GavelIcon />\n          </ListItemIcon>\n          <ListItemText primary={\"Change threshold\"} />\n          {open ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <ChangeThresholdListItemDetails\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n        </Collapse>\n      </>\n    );\n  }\n  \n  export function ChangeThresholdListItemDetails({\n    multisig,\n    onClose,\n    didAddTransaction,\n  }: {\n    multisig: PublicKey;\n    onClose: Function;\n    didAddTransaction: (tx: PublicKey) => void;\n  }) {\n    const [threshold, setThreshold] = useState(2);\n    const multisigClient = useMultisigProgram();\n    // @ts-ignore\n    const { enqueueSnackbar } = useSnackbar();\n    const changeThreshold = async () => {\n      enqueueSnackbar(\"Creating change threshold transaction\", {\n        variant: \"info\",\n      });\n      const data = changeThresholdData(multisigClient, threshold);\n      const [multisigSigner] = await PublicKey.findProgramAddress(\n        [multisig.toBuffer()],\n        multisigClient.programId\n      );\n      const accounts = [\n        {\n          pubkey: multisig,\n          isWritable: true,\n          isSigner: false,\n        },\n        {\n          pubkey: multisigSigner,\n          isWritable: false,\n          isSigner: true,\n        },\n      ];\n      const transaction = new Account();\n      const txSize = TX_SIZE + 100; // todo\n      const tx = await multisigClient.rpc.createTransaction(\n        multisigClient.programId,\n        accounts,\n        data,\n        {\n          accounts: {\n            multisig,\n            transaction: transaction.publicKey,\n            proposer: multisigClient.provider.wallet.publicKey,\n            rent: SYSVAR_RENT_PUBKEY,\n          },\n          signers: [transaction],\n          instructions: [\n            await multisigClient.account.transaction.createInstruction(\n              transaction,\n              // @ts-ignore\n              txSize\n            ),\n          ],\n        }\n      );\n      enqueueSnackbar(\"Transaction created\", {\n        variant: \"success\",\n        action: <ViewTransactionOnExplorerButton signature={tx} />,\n      });\n      didAddTransaction(transaction.publicKey);\n      onClose();\n    };\n    return (\n      <div\n        style={{\n          background: \"#f1f0f0\",\n          paddingLeft: \"24px\",\n          paddingRight: \"24px\",\n        }}\n      >\n        <TextField\n          fullWidth\n          style={{ marginTop: \"16px\" }}\n          label=\"Threshold\"\n          value={threshold}\n          type=\"number\"\n          onChange={(e) => {\n            // @ts-ignore\n            setThreshold(e.target.value);\n          }}\n        />\n        <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n          <Button onClick={() => changeThreshold()}>Change Threshold</Button>\n        </div>\n      </div>\n    );\n  }\n\n// @ts-ignore\nfunction changeThresholdData(multisigClient, threshold) {\n    return multisigClient.coder.instruction.encode(\"change_threshold\", {\n        threshold: new BN(threshold),\n    });\n}","import { stringify } from \"flatted\";\n\nlet runners = 0;\nconst callbacks: Array<Function> = [];\n\nexport const serialAsync = <F extends (...args: any[]) => any>(\n\tf: F\n): ((...funcArgs: Parameters<F>) => ReturnType<F>) => {\n\treturn (...args: Parameters<F>) => {\n\t\trunners++;\n\n\t\treturn f(...args).finally(() => {\n\t\t\trunners--;\n\n\t\t\tif (runners === 0) {\n\t\t\t\tcallbacks.forEach((c) => c());\n\t\t\t}\n\t\t});\n\t};\n};\n\nexport const multiAsync = <F extends (...args: any[]) => any>(\n\tfunc: F\n): ((...funcArgs: Parameters<F>) => ReturnType<F>) => {\n\tlet promises: Record<string, Promise<any> | undefined> = {};\n\tlet serialPromises: Record<string, Promise<any> | undefined> = {};\n\n\tcallbacks.push(() => (serialPromises = {}));\n\n\treturn (...args: Parameters<F>): ReturnType<any> => {\n\t\tconst key = stringify(args);\n\t\tconst runningPromise = promises[key] || serialPromises[key];\n\n\t\tif (!runningPromise) {\n\t\t\tconst p = func(...args);\n\n\t\t\tpromises[key] = p.finally(() => {\n\t\t\t\tpromises[key] = undefined;\n\t\t\t});\n\n\t\t\tif (runners) {\n\t\t\t\tserialPromises[key] = p;\n\t\t\t}\n\t\t}\n\n\t\treturn promises[key] || serialPromises[key];\n\t};\n};\n","import { ListItem, ListItemIcon, ListItemText, Collapse, TextField, Button } from \"@material-ui/core\";\nimport { ExpandLess, ExpandMore } from \"@material-ui/icons\";\nimport { useSnackbar } from \"notistack\";\nimport { useState } from \"react\";\nimport { useMultisigProgram } from \"../../hooks/useMultisigProgram\";\nimport { ViewTransactionOnExplorerButton } from \"../Notification\";\nimport BuildIcon from \"@material-ui/icons/Build\";\n\nimport {\n    Account,\n    PublicKey,\n    SYSVAR_RENT_PUBKEY,\n    SYSVAR_CLOCK_PUBKEY,\n  } from \"@solana/web3.js\";\nimport { TX_SIZE } from \"../../credix/consts\";\n\nexport function ProgramUpdateListItem({\n    multisig,\n    onClose,\n    didAddTransaction,\n  }: {\n    multisig: PublicKey;\n    onClose: Function;\n    didAddTransaction: (tx: PublicKey) => void;\n  }) {\n    const [open, setOpen] = useState(false);\n    return (\n      <>\n        <ListItem button onClick={() => setOpen((open) => !open)}>\n          <ListItemIcon>\n            <BuildIcon />\n          </ListItemIcon>\n          <ListItemText primary={\"Upgrade program\"} />\n          {open ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <UpgradeProgramListItemDetails\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n        </Collapse>\n      </>\n    );\n  }\n  \n  export const BPF_LOADER_UPGRADEABLE_PID = new PublicKey(\n    \"BPFLoaderUpgradeab1e11111111111111111111111\"\n  );\n  \n  function UpgradeProgramListItemDetails({\n    multisig,\n    onClose,\n    didAddTransaction,\n  }: {\n    multisig: PublicKey;\n    onClose: Function;\n    didAddTransaction: (tx: PublicKey) => void;\n  }) {\n    const [programId, setProgramId] = useState<null | string>(null);\n    const [buffer, setBuffer] = useState<null | string>(null);\n  \n    const multisigClient = useMultisigProgram();\n    const { enqueueSnackbar } = useSnackbar();\n    const createTransactionAccount = async () => {\n      enqueueSnackbar(\"Creating transaction\", {\n        variant: \"info\",\n      });\n      const programAddr = new PublicKey(programId as string);\n      const bufferAddr = new PublicKey(buffer as string);\n      // Hard code serialization.\n      const data = Buffer.from([3, 0, 0, 0]);\n  \n      const programAccount = await (async () => {\n        const programAccount = await multisigClient.provider.connection.getAccountInfo(\n          programAddr\n        );\n        if (programAccount === null) {\n          throw new Error(\"Invalid program ID\");\n        }\n        return {\n          // Hard code deserialization.\n          programdataAddress: new PublicKey(programAccount.data.slice(4)),\n        };\n      })();\n      const spill = multisigClient.provider.wallet.publicKey;\n      const [multisigSigner] = await PublicKey.findProgramAddress(\n        [multisig.toBuffer()],\n        multisigClient.programId\n      );\n      const accs = [\n        {\n          pubkey: programAccount.programdataAddress,\n          isWritable: true,\n          isSigner: false,\n        },\n        { pubkey: programAddr, isWritable: true, isSigner: false },\n        { pubkey: bufferAddr, isWritable: true, isSigner: false },\n        { pubkey: spill, isWritable: true, isSigner: false },\n        { pubkey: SYSVAR_RENT_PUBKEY, isWritable: false, isSigner: false },\n        { pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false, isSigner: false },\n        { pubkey: multisigSigner, isWritable: false, isSigner: false },\n      ];\n      const txSize = TX_SIZE; // TODO: tighter bound.\n      const transaction = new Account();\n      const tx = await multisigClient.rpc.createTransaction(\n        BPF_LOADER_UPGRADEABLE_PID,\n        accs,\n        data,\n        {\n          accounts: {\n            multisig,\n            transaction: transaction.publicKey,\n            proposer: multisigClient.provider.wallet.publicKey,\n            rent: SYSVAR_RENT_PUBKEY,\n          },\n          signers: [transaction],\n          instructions: [\n            await multisigClient.account.transaction.createInstruction(\n              transaction,\n              // @ts-ignore\n              txSize\n            ),\n          ],\n        }\n      );\n      enqueueSnackbar(\"Transaction created\", {\n        variant: \"success\",\n        action: <ViewTransactionOnExplorerButton signature={tx} />,\n      });\n      didAddTransaction(transaction.publicKey);\n      onClose();\n    };\n  \n    return (\n      <div\n        style={{\n          background: \"#f1f0f0\",\n          paddingLeft: \"24px\",\n          paddingRight: \"24px\",\n        }}\n      >\n        <TextField\n          fullWidth\n          style={{ marginTop: \"16px\" }}\n          label=\"Program ID\"\n          value={programId}\n          onChange={(e) => setProgramId(e.target.value as string)}\n        />\n        <TextField\n          style={{ marginTop: \"16px\" }}\n          fullWidth\n          label=\"New program buffer\"\n          value={buffer}\n          onChange={(e) => setBuffer(e.target.value as string)}\n        />\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            marginTop: \"16px\",\n            paddingBottom: \"16px\",\n          }}\n        >\n          <Button onClick={() => createTransactionAccount()}>\n            Create upgrade\n          </Button>\n        </div>\n      </div>\n    );\n  }","import { ListItem, ListItemIcon, ListItemText, Collapse, TextField, Button } from \"@material-ui/core\";\nimport { ExpandLess, ExpandMore } from \"@material-ui/icons\";\nimport { idlAddress } from \"@project-serum/anchor/dist/cjs/idl\";\nimport { useSnackbar } from \"notistack\";\nimport { useState } from \"react\";\nimport { useMultisigProgram } from \"../../hooks/useMultisigProgram\";\nimport * as idl from \"../../utils/idl\";\nimport { ViewTransactionOnExplorerButton } from \"../Notification\";\nimport DescriptionIcon from \"@material-ui/icons/Description\";\nimport {\n    Account,\n    PublicKey,\n    SYSVAR_RENT_PUBKEY,\n    SYSVAR_CLOCK_PUBKEY,\n  } from \"@solana/web3.js\";\nimport { TX_SIZE } from \"../../credix/consts\";\n\nexport function IdlUpgradeListItem({\n    multisig,\n    onClose,\n    didAddTransaction,\n  }: {\n    multisig: PublicKey;\n    onClose: Function;\n    didAddTransaction: (tx: PublicKey) => void;\n  }) {\n    const [open, setOpen] = useState(false);\n    return (\n      <>\n        <ListItem button onClick={() => setOpen((open) => !open)}>\n          <ListItemIcon>\n            <DescriptionIcon />\n          </ListItemIcon>\n          <ListItemText primary={\"Upgrade IDL\"} />\n          {open ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <UpgradeIdlListItemDetails\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n        </Collapse>\n      </>\n    );\n  }\n  \n  function UpgradeIdlListItemDetails({\n    multisig,\n    onClose,\n    didAddTransaction,\n  }: {\n    multisig: PublicKey;\n    onClose: Function;\n    didAddTransaction: (tx: PublicKey) => void;\n  }) {\n  \n    const [programId, setProgramId] = useState<null | string>(null);\n    const [buffer, setBuffer] = useState<null | string>(null);\n  \n    const multisigClient = useMultisigProgram();\n    const { enqueueSnackbar } = useSnackbar();\n    const createTransactionAccount = async () => {\n      enqueueSnackbar(\"Creating transaction\", {\n        variant: \"info\",\n      });\n      const programAddr = new PublicKey(programId as string);\n      const bufferAddr = new PublicKey(buffer as string);\n      const idlAddr = await idlAddress(programAddr);\n      const [multisigSigner] = await PublicKey.findProgramAddress(\n        [multisig.toBuffer()],\n        multisigClient.programId\n      );\n      const data = idl.encodeInstruction({ setBuffer: {} });\n      const accs = [\n        {\n          pubkey: bufferAddr,\n          isWritable: true,\n          isSigner: false,\n        },\n        { pubkey: idlAddr, isWritable: true, isSigner: false },\n        { pubkey: multisigSigner, isWritable: true, isSigner: false },\n      ];\n      const txSize = TX_SIZE; // TODO: tighter bound.\n      const transaction = new Account();\n      const tx = await multisigClient.rpc.createTransaction(\n        programAddr,\n        accs,\n        data,\n        {\n          accounts: {\n            multisig,\n            transaction: transaction.publicKey,\n            proposer: multisigClient.provider.wallet.publicKey,\n            rent: SYSVAR_RENT_PUBKEY,\n          },\n          signers: [transaction],\n          instructions: [\n            await multisigClient.account.transaction.createInstruction(\n              transaction,\n              // @ts-ignore\n              txSize\n            ),\n          ],\n        }\n      );\n      enqueueSnackbar(\"Transaction created\", {\n        variant: \"success\",\n        action: <ViewTransactionOnExplorerButton signature={tx} />,\n      });\n      didAddTransaction(transaction.publicKey);\n      onClose();\n    };\n  \n    return (\n      <div\n        style={{\n          background: \"#f1f0f0\",\n          paddingLeft: \"24px\",\n          paddingRight: \"24px\",\n        }}\n      >\n        <TextField\n          fullWidth\n          style={{ marginTop: \"16px\" }}\n          label=\"Program ID\"\n          value={programId}\n          onChange={(e) => setProgramId(e.target.value as string)}\n        />\n        <TextField\n          style={{ marginTop: \"16px\" }}\n          fullWidth\n          label=\"New IDL buffer\"\n          value={buffer}\n          onChange={(e) => setBuffer(e.target.value as string)}\n        />\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            marginTop: \"16px\",\n            paddingBottom: \"16px\",\n          }}\n        >\n          <Button onClick={() => createTransactionAccount()}>\n            Create upgrade\n          </Button>\n        </div>\n      </div>\n    );\n  }","import { ListItem, ListItemIcon, ListItemText, Collapse, TextField, IconButton, Button } from \"@material-ui/core\";\nimport { ExpandLess, ExpandMore } from \"@material-ui/icons\";\nimport { useSnackbar } from \"notistack\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { useState } from \"react\";\nimport { useMultisigProgram } from \"../../hooks/useMultisigProgram\";\nimport { ViewTransactionOnExplorerButton } from \"../Notification\";\nimport SupervisorAccountIcon from \"@material-ui/icons/SupervisorAccount\";\nimport {\n    Account,\n    PublicKey,\n    SYSVAR_RENT_PUBKEY,\n    SYSVAR_CLOCK_PUBKEY,\n  } from \"@solana/web3.js\";\n\nexport function MultisigSetOwnersListItem({\n    multisig,\n    onClose,\n    didAddTransaction,\n  }: {\n    multisig: PublicKey;\n    onClose: Function;\n    didAddTransaction: (tx: PublicKey) => void;\n  }) {\n    const [open, setOpen] = useState(false);\n    return (\n      <>\n        <ListItem button onClick={() => setOpen((open) => !open)}>\n          <ListItemIcon>\n            <SupervisorAccountIcon />\n          </ListItemIcon>\n          <ListItemText primary={\"Set owners\"} />\n          {open ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <SetOwnersListItemDetails\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n        </Collapse>\n      </>\n    );\n  }\n  \n  function SetOwnersListItemDetails({\n    multisig,\n    onClose,\n    didAddTransaction,\n  }: {\n    multisig: PublicKey;\n    onClose: Function;\n    didAddTransaction: (tx: PublicKey) => void;\n  }) {\n    const multisigClient = useMultisigProgram();\n    // @ts-ignore\n    const zeroAddr = new PublicKey(\"11111111111111111111111111111111\").toString();\n    const [participants, setParticipants] = useState([zeroAddr]);\n    const { enqueueSnackbar } = useSnackbar();\n    const setOwners = async () => {\n      enqueueSnackbar(\"Creating setOwners transaction\", {\n        variant: \"info\",\n      });\n      const owners = participants.map((p) => new PublicKey(p));\n      const data = setOwnersData(multisigClient, owners);\n      const [multisigSigner] = await PublicKey.findProgramAddress(\n        [multisig.toBuffer()],\n        multisigClient.programId\n      );\n      const accounts = [\n        {\n          pubkey: multisig,\n          isWritable: true,\n          isSigner: false,\n        },\n        {\n          pubkey: multisigSigner,\n          isWritable: false,\n          isSigner: true,\n        },\n      ];\n      const transaction = new Account();\n      const txSize = 5000; // TODO: tighter bound.\n      const tx = await multisigClient.rpc.createTransaction(\n        multisigClient.programId,\n        accounts,\n        data,\n        {\n          accounts: {\n            multisig,\n            transaction: transaction.publicKey,\n            proposer: multisigClient.provider.wallet.publicKey,\n            rent: SYSVAR_RENT_PUBKEY,\n          },\n          signers: [transaction],\n          instructions: [\n            await multisigClient.account.transaction.createInstruction(\n              transaction,\n              // @ts-ignore\n              txSize\n            ),\n          ],\n        }\n      );\n      if (!tx) {\n        return;\n      }\n      enqueueSnackbar(\"Transaction created\", {\n        variant: \"success\",\n        action: <ViewTransactionOnExplorerButton signature={tx} />,\n      });\n      didAddTransaction(transaction.publicKey);\n      onClose();\n    };\n    return (\n      <div\n        style={{\n          background: \"#f1f0f0\",\n          paddingLeft: \"24px\",\n          paddingRight: \"24px\",\n        }}\n      >\n        {participants.map((p, idx) => (\n          <TextField\n            fullWidth\n            style={{ marginTop: \"16px\" }}\n            label=\"Participant\"\n            value={p}\n            onChange={(e) => {\n              const p = [...participants];\n              p[idx] = e.target.value;\n              setParticipants(p);\n            }}\n          />\n        ))}\n        <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n          <IconButton\n            onClick={() => {\n              const p = [...participants];\n              // @ts-ignore\n              p.push(new PublicKey(\"11111111111111111111111111111111\").toString());\n              setParticipants(p);\n            }}\n          >\n            <AddIcon />\n          </IconButton>\n        </div>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            marginTop: \"16px\",\n            paddingBottom: \"16px\",\n          }}\n        >\n          <Button onClick={() => setOwners()}>Set Owners</Button>\n        </div>\n      </div>\n    );\n  }\n\n// @ts-ignore\nfunction setOwnersData(multisigClient, owners) {\n    return multisigClient.coder.instruction.encode(\"set_owners\", {\n      owners,\n    });\n  }\n","import { ListItem, ListItemIcon, ListItemText, Collapse, Button } from \"@material-ui/core\";\nimport { MoneyRounded, ExpandLess, ExpandMore } from \"@material-ui/icons\";\nimport { ProgramAccount } from \"@project-serum/anchor\";\nimport { useSnackbar } from \"notistack\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { findPendingDealsForMarket, activateDeal } from \"../../credix/api\";\nimport { config } from \"../../credix/config\";\nimport { Deal } from \"../../credix/types/program.types\";\nimport { useMultisigProgram } from \"../../hooks/useMultisigProgram\";\nimport { ViewTransactionOnExplorerButton } from \"../Notification\";\n\nimport {\n    Account,\n    PublicKey,\n    SYSVAR_RENT_PUBKEY,\n    SYSVAR_CLOCK_PUBKEY,\n  } from \"@solana/web3.js\";\nimport { SEEDS, TX_SIZE } from \"../../credix/consts\";\n\nexport function ActivateDealListItem({\n    multisig,\n    onClose,\n    didAddTransaction,\n  }: {\n    multisig: PublicKey;\n    onClose: Function;\n    didAddTransaction: (tx: PublicKey) => void;\n  }) {\n    const [open, setOpen] = useState(false);\n    return (\n      <>\n        <ListItem button onClick={() => setOpen((open) => !open)}>\n          <ListItemIcon>\n            <img src=\"/credix.svg\" alt=\"Credix Logo\" style={{width: \"20px\", marginLeft: \"3px\"}}/>\n          </ListItemIcon>\n          <ListItemText primary={\"Activate Deal\"} />\n          {open ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <ActivateDealListItemDetails\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n        </Collapse>\n      </>\n    );\n  }\n  \n  function ActivateDealListItemDetails({\n    multisig,\n    onClose,\n    didAddTransaction,\n  }: {\n    multisig: PublicKey;\n    onClose: Function;\n    didAddTransaction: (tx: PublicKey) => void;\n  }) {\n    const [deals, setDeals] = useState<ProgramAccount<Deal>[]>(); \n    const [globalMarketSeed, setGlobalMarketSeed] = useState<string>(SEEDS.GLOBAL_MARKET_STATE_PDA); \n    const [dealRows, setDealRows] = useState([<p>\"no pending deals\"</p>]);\n    const multisigClient = useMultisigProgram();\n    const { enqueueSnackbar } = useSnackbar();\n    \n    const onBlurGlobalMarketSeed = async (e: React.ChangeEvent<HTMLInputElement>) => {\n      setGlobalMarketSeed(e.target.value);\n      findPendingDealsForMarket(multisigClient.provider, e.target.value, setDeals).then(() => {\n        constructDealRows(); \n      }); \n    };  \n  \n    const createTransactionAccount = async (dealPk: PublicKey, borrowerPk: PublicKey) => {\n      enqueueSnackbar(\"Creating transaction\", {\n        variant: \"info\",\n      });\n  \n      const [multisigSigner] = await PublicKey.findProgramAddress(\n        [multisig.toBuffer()],\n        multisigClient.programId\n      );\n  \n      const activateIx = await activateDeal(dealPk, borrowerPk, multisigSigner, multisigClient.provider, globalMarketSeed); \n      const transaction = new Account();\n      const tx = await multisigClient.rpc.createTransaction(\n        config.clusterConfig.programId,\n        activateIx.keys,\n        Buffer.from(activateIx.data),\n        {\n          accounts: {\n            multisig,\n            transaction: transaction.publicKey,\n            proposer: multisigClient.provider.wallet.publicKey,\n            rent: SYSVAR_RENT_PUBKEY,\n          },\n          signers: [transaction],\n          instructions: [\n            await multisigClient.account.transaction.createInstruction(\n              transaction,\n              // @ts-ignore\n              TX_SIZE + 500\n            ),\n          ],\n        }\n      );\n      enqueueSnackbar(\"Transaction created\", {\n        variant: \"success\",\n        action: <ViewTransactionOnExplorerButton signature={tx} />,\n      });\n      didAddTransaction(transaction.publicKey);\n      onClose();\n    };\n\n    const constructDealRows = () => {\n      if (deals) {\n        let dealRowsNew = deals.map((deal) =>\n            <div key={deal.account.borrower.toString()}\n              style={{\n                display: \"flex\", \n                justifyContent: \"space-between\",\n                width: \"100%\",\n                background: \"white\",\n                paddingLeft: \"20px\",\n                paddingRight: \"20px\",\n                borderBottom: \"1px solid grey\"\n              }}\n            >\n              <p style={{width: \"500px\"}}>{deal.account.borrower.toString()}</p> \n              <p style={{width: \"200px\"}}>{deal.account.name}</p> \n              <p style={{width: \"200px\"}}> {deal.account.principal.toNumber()/1000000} USDC</p>\n              <Button style={{width: \"100px\"}} onClick={() => createTransactionAccount(deal.publicKey, deal.account.borrower)}>\n                Activate\n              </Button>\n            </div>\n        );\n        setDealRows(dealRowsNew); \n    };\n    }\n  \n    return (\n      <div\n        style={{\n          background: \"#f1f0f0\",\n          padding: \"24px\"\n        }}\n      > \n        <label> \n            Global marketstate seed: \n            <input\n                name=\"globalMarketSeed\"\n                type=\"text\"\n                placeholder={globalMarketSeed}\n                onBlur={onBlurGlobalMarketSeed}\n                style={{marginLeft: \"10px\", width: \"500px\", margin: \"10px\"}}\n            />\n        </label>\n        <div\n          style={{\n            display: \"flex\", \n            justifyContent: \"space-between\",\n            width: \"100%\",\n            background: \"white\",\n            paddingLeft: \"20px\",\n            paddingRight: \"20px\",\n            borderBottom: \"1px solid grey\"\n          }}\n        >\n          <p style={{width: \"500px\"}}>Borrower Public Key</p> \n          <p style={{width: \"200px\"}}>Deal name</p> \n          <p style={{width: \"200px\"}}>Amount</p>\n          <p style={{width: \"100px\"}}></p>\n        </div>\n        {dealRows}\n      </div>\n    );\n  }","import { ListItem, ListItemIcon, ListItemText, Collapse, FormControl, InputLabel, Select, MenuItem, TextField, Button } from \"@material-ui/core\";\nimport { MoneyRounded, ExpandLess, ExpandMore } from \"@material-ui/icons\";\nimport { getTokenAccount, getMintInfo } from \"@project-serum/common\";\nimport { u64, Token, ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport BN from \"bn.js\";\nimport { useSnackbar } from \"notistack\";\nimport { useState } from \"react\";\nimport { useMultisigProgram } from \"../../hooks/useMultisigProgram\";\nimport { useMultiSigOwnedTokenAccounts } from \"../../hooks/useOwnedTokenAccounts\";\nimport { ViewTransactionOnExplorerButton } from \"../Notification\";\nimport { TX_SIZE } from \"../../credix/consts\";\nimport {\n    Account,\n    PublicKey,\n    SYSVAR_RENT_PUBKEY,\n    SYSVAR_CLOCK_PUBKEY,\n  } from \"@solana/web3.js\";\n\nexport function TransferTokenListItem({\n    multisig,\n    onClose,\n    didAddTransaction,\n  }: {\n    multisig: PublicKey;\n    onClose: Function;\n    didAddTransaction: (tx: PublicKey) => void;\n  }) {\n    const [open, setOpen] = useState(false);\n    return (\n      <>\n        <ListItem button onClick={() => setOpen((open) => !open)}>\n          <ListItemIcon>\n            <MoneyRounded />\n          </ListItemIcon>\n          <ListItemText primary={\"Transfer Token\"} />\n          {open ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <TransferTokenListItemDetails\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n        </Collapse>\n      </>\n    );\n  }\n  \n  function TransferTokenListItemDetails({\n    multisig,\n    onClose,\n    didAddTransaction,\n  }: {\n    multisig: PublicKey;\n    onClose: Function;\n    didAddTransaction: (tx: PublicKey) => void;\n  }) {\n    const [source, setSource] = useState<null | string>(null);\n    const [destination, setDestination] = useState<null | string>(null);\n    const [amount, setAmount] = useState<null | u64>(null);\n  \n  \n    const multisigClient = useMultisigProgram();\n    const { enqueueSnackbar } = useSnackbar();\n  \n    const tokenAccounts = useMultiSigOwnedTokenAccounts(multisigClient.provider, multisig, multisigClient.programId)\n  \n    const getAssociatedTokenAddressPK = async (ownerPk: PublicKey, mintPk: PublicKey) => {\n      return await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        mintPk,\n        ownerPk\n      );\n    }\n  \n    const createTransactionAccount = async () => {\n      enqueueSnackbar(\"Creating transaction\", {\n        variant: \"info\",\n      });\n      const sourceAddr = new PublicKey(source as string);\n      const destinationAccAddr = new PublicKey(destination as string);\n      const [multisigSigner] = await PublicKey.findProgramAddress(\n        [multisig.toBuffer()],\n        multisigClient.programId\n      );\n      const sourceTokenAccount = await getTokenAccount(\n        multisigClient.provider,\n        sourceAddr,\n      );\n  \n      const destinationTokenAccAddr = await getAssociatedTokenAddressPK(destinationAccAddr, sourceTokenAccount.mint); \n  \n      // @ts-ignore\n      try { \n          const destinationTokenAccount = await getTokenAccount(\n          multisigClient.provider,\n          destinationTokenAccAddr\n        );\n        // @ts-ignore\n        if (sourceTokenAccount.mint.toBase58() !== destinationTokenAccount.mint.toBase58()) {\n          enqueueSnackbar(\"Token mint does not match\", {\n            variant: \"error\",\n          });\n          return;\n        }\n      } catch (err) {\n          enqueueSnackbar(\"No token account found for the destination address. Op in for this specific token on your phantom wallet.\", {variant: \"error\",});\n        return;\n      }\n  \n      const tokenMint = await getMintInfo(\n        multisigClient.provider, sourceTokenAccount.mint);\n  \n      if (!amount) {\n        enqueueSnackbar(\"No amount provided\", {\n          variant: \"warning\",\n        });\n        return;\n      }\n      const TEN = new u64(10);\n      const multiplier = TEN.pow(new BN(tokenMint.decimals));\n      const amountInLamports = amount.mul(multiplier);\n      const transferIx = Token.createTransferInstruction(\n        TOKEN_PROGRAM_ID,\n        sourceAddr,\n        destinationTokenAccAddr,\n        multisigSigner,\n        [],\n        new u64(amountInLamports.toString())\n      );\n      const transaction = new Account();\n      const tx = await multisigClient.rpc.createTransaction(\n        TOKEN_PROGRAM_ID,\n        transferIx.keys,\n        Buffer.from(transferIx.data),\n        {\n          accounts: {\n            multisig,\n            transaction: transaction.publicKey,\n            proposer: multisigClient.provider.wallet.publicKey,\n            rent: SYSVAR_RENT_PUBKEY,\n          },\n          signers: [transaction],\n          instructions: [\n            await multisigClient.account.transaction.createInstruction(\n              transaction,\n              // @ts-ignore\n              TX_SIZE + 150\n            ),\n          ],\n        }\n      );\n      enqueueSnackbar(\"Transaction created\", {\n        variant: \"success\",\n        action: <ViewTransactionOnExplorerButton signature={tx} />,\n      });\n      didAddTransaction(transaction.publicKey);\n      onClose();\n    };\n  \n    return (\n      <div\n        style={{\n          background: \"#f1f0f0\",\n          paddingTop: \"24px\",\n          paddingLeft: \"24px\",\n          paddingRight: \"24px\",\n        }}\n      >\n        <FormControl fullWidth>\n          <InputLabel id=\"source-select-label\">Source Token Mint</InputLabel>\n          <Select\n            autoWidth={true}\n            value={source}\n          >\n            {tokenAccounts.map(\n              tokenAccount => {\n                return (\n                  <MenuItem value={tokenAccount.address.toString()} onClick={\n                    () => {\n                      setSource(tokenAccount.address.toString());\n                    }\n                  }>\n                    <p>{tokenAccount.mint.toString()} - [Balance: {(tokenAccount.amount.toNumber() / 1000000).toString()}]</p>\n                  </MenuItem>\n                )\n              }\n            )}\n          </Select>\n          <TextField\n            style={{ marginTop: \"16px\" }}\n            fullWidth\n            label=\"Amount\"\n            value={amount}\n            onChange={(e) => setAmount(new u64(e.target.value as string))}\n          />\n          <TextField\n            style={{ marginTop: \"16px\" }}\n            fullWidth\n            label=\"Destination Address\"\n            value={destination}\n            onChange={(e) => setDestination(e.target.value as string)}\n          />\n  \n        </FormControl>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            marginTop: \"16px\",\n            paddingBottom: \"16px\",\n          }}\n        >\n          <Button onClick={() => createTransactionAccount()}>\n            Create Token Transfer\n          </Button>\n        </div>\n      </div>\n    );\n  }","import { Provider } from '@project-serum/anchor';\nimport { PublicKey } from '@solana/web3.js';\nimport { useEffect, useState } from 'react';\nimport { AccountInfo as TokenAccount } from \"@solana/spl-token\";\nimport { getOwnedTokenAccounts } from '../components/Multisig';\n\n\nexport function useMultiSigOwnedTokenAccounts(\n  provider: Provider,\n  multiSig: PublicKey,\n  programId: PublicKey\n): TokenAccount[] {\n  const [results, setResults] = useState<TokenAccount[]>([]);\n\n  useEffect(() => {\n    const connection = provider.connection;\n\n    const onLoad = async () => {\n      const [signer, nounce] = await PublicKey.findProgramAddress(\n        [multiSig.toBuffer()],\n        programId\n      );\n      const ownedTokenAccounts = await getOwnedTokenAccounts(connection, signer);\n      setResults(ownedTokenAccounts);\n      return ownedTokenAccounts;\n    };\n    onLoad()\n      .then(results => {\n        console.log(\n          `Fetched ${results.length} accounts for multisig ${multiSig}.`,\n        );\n      })\n      .catch(() => {\n        console.error(\n          'Connection Failed',\n          `Failed to fetch token accounts owned by ${multiSig}`,\n        );\n      });\n\n\n    return () => {\n      setResults([]);\n    };\n  }, [provider]);\n\n  return results;\n}\n","import { ListItem, ListItemIcon, ListItemText, Collapse, Button, Checkbox } from \"@material-ui/core\";\nimport { MoneyRounded, ExpandLess, ExpandMore } from \"@material-ui/icons\";\nimport { ProgramAccount } from \"@project-serum/anchor\";\nimport { useSnackbar } from \"notistack\";\nimport { useState, useEffect } from \"react\";\nimport { fetchGlobalMarketStateFrozen, freezeGlobalMarketState, thawGlobalMarketState } from \"../../credix/api\";\nimport { config } from \"../../credix/config\";\nimport { Deal } from \"../../credix/types/program.types\";\nimport { useMultisigProgram } from \"../../hooks/useMultisigProgram\";\nimport { ViewTransactionOnExplorerButton } from \"../Notification\";\nimport {\n    Account,\n    PublicKey,\n    SYSVAR_RENT_PUBKEY,\n    SYSVAR_CLOCK_PUBKEY,\n  } from \"@solana/web3.js\";\nimport { serialAsync } from \"../../credix/utils/async.utils\";\nimport { SEEDS, TX_SIZE } from \"../../credix/consts\";\n\nexport function FreezeThawGlobalMarketStateListItem({\n    multisig,\n    onClose,\n    didAddTransaction,\n  }: {\n    multisig: PublicKey;\n    onClose: Function;\n    didAddTransaction: (tx: PublicKey) => void;\n  }) {\n    const [open, setOpen] = useState(false);\n    return (\n      <>\n        <ListItem button onClick={() => setOpen((open) => !open)}>\n          <ListItemIcon>\n            <img src=\"/credix.svg\" alt=\"Credix Logo\" style={{width: \"20px\", marginLeft: \"3px\"}}/>\n          </ListItemIcon>\n          <ListItemText primary={\"Freeze / Thaw market\"} />\n          {open ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <FreezeThawGlobalMarketStateListItemDetails\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n        </Collapse>\n      </>\n    );\n  }\n  \nfunction FreezeThawGlobalMarketStateListItemDetails({\n    multisig,\n    onClose,\n    didAddTransaction,\n  }: {\n    multisig: PublicKey;\n    onClose: Function;\n    didAddTransaction: (tx: PublicKey) => void;\n  }) {\n    const [frozen, setFrozen] = useState<boolean>(false); \n    const [globalMarketSeed, setGlobalMarketSeed] = useState<string>(SEEDS.GLOBAL_MARKET_STATE_PDA); \n    const multisigClient = useMultisigProgram();\n    const { enqueueSnackbar } = useSnackbar();\n\n\n    const onBlurGlobalMarketSeed = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setGlobalMarketSeed(e.target.value);\n      fetchFrozen(e.target.value);\n    };\n\n    const onChangeFrozen = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setFrozen(e.target.checked); \n    };\n  \n    const fetchFrozen = async (seed: string) => {\n      try {\n        const globalMarketStateInfo = await fetchGlobalMarketStateFrozen(seed, multisigClient.provider); \n        setFrozen(globalMarketStateInfo.frozen); \n      } catch (err) {\n        enqueueSnackbar(`market with name ${seed} does not exist`, {\n            variant: \"error\",\n          });\n        setFrozen(false); \n      }\n    }\n  \n    const onSubmit = serialAsync(async (e: React.SyntheticEvent) => {\n      e.preventDefault();\n\n      enqueueSnackbar(\"Creating transaction\", {\n        variant: \"info\",\n      });\n  \n      const [multisigSigner] = await PublicKey.findProgramAddress(\n        [multisig.toBuffer()],\n        multisigClient.programId\n      );\n      \n      let activateIx = await thawGlobalMarketState(multisigSigner, globalMarketSeed, multisigClient.provider);  \n      if (frozen) {\n        activateIx = await freezeGlobalMarketState(multisigSigner, globalMarketSeed, multisigClient.provider);\n      } \n      const transaction = new Account();\n      const tx = await multisigClient.rpc.createTransaction(\n        config.clusterConfig.programId,\n        activateIx.keys,\n        Buffer.from(activateIx.data),\n        {\n          accounts: {\n            multisig,\n            transaction: transaction.publicKey,\n            proposer: multisigClient.provider.wallet.publicKey,\n            rent: SYSVAR_RENT_PUBKEY,\n          },\n          signers: [transaction],\n          instructions: [\n            await multisigClient.account.transaction.createInstruction(\n              transaction,\n              // @ts-ignore\n              TX_SIZE + 100\n            ),\n          ],\n        }\n      );\n      enqueueSnackbar(\"Transaction created\", {\n        variant: \"success\",\n        action: <ViewTransactionOnExplorerButton signature={tx} />,\n      });\n      didAddTransaction(transaction.publicKey);\n      onClose();\n    });\n  \n    return (\n        <div\n            style={{\n            background: \"#f1f0f0\",\n            padding: \"24px\"\n            }}\n        >\n            <form \n                onSubmit={onSubmit}\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"column\"\n                }}\n            >\n                <label>\n                    Global marketstate seed: \n                    <input\n                        name=\"globalMarketSeed\"\n                        type=\"text\"\n                        placeholder={globalMarketSeed}\n                        onBlur={onBlurGlobalMarketSeed}\n                        style={{marginLeft: \"10px\", width: \"500px\"}}\n                    />\n                </label>\n                <label>\n                    Frozen? Check to freeze, uncheck to thaw. If checked, market is already frozen. \n                    <Checkbox\n                        name=\"frozen\"\n                        checked={frozen}\n                        onChange={onChangeFrozen}\n                    />\n                </label>\n                <input\n                    type=\"submit\"\n                    value=\"create transaction\"\n                    style={{background: \"white\", cursor: \"pointer\", width:\"200px\", height:\"30px\"}}\n                />\n            </form>\n        </div>\n    );\n  }","import { ListItem, ListItemIcon, ListItemText, Collapse, Button, Checkbox } from \"@material-ui/core\";\nimport { MoneyRounded, ExpandLess, ExpandMore } from \"@material-ui/icons\";\nimport { BN, ProgramAccount, Wallet } from \"@project-serum/anchor\";\nimport { useSnackbar } from \"notistack\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { initializeMarket, fetchGlobalMarketStateFrozen, freezeGlobalMarketState, thawGlobalMarketState, updateCredixPass, getCredixPassInfo, issueCredixPass } from \"../../credix/api\";\nimport { config } from \"../../credix/config\";\nimport { CredixPass, Deal } from \"../../credix/types/program.types\";\nimport { useMultisigProgram } from \"../../hooks/useMultisigProgram\";\nimport { ViewTransactionOnExplorerButton } from \"../Notification\";\n// @ts-ignore\nimport DateTimePicker  from \"react-datetime-picker\";\nimport {\n    Account,\n    PublicKey,\n    SYSVAR_RENT_PUBKEY,\n    SYSVAR_CLOCK_PUBKEY,\n  } from \"@solana/web3.js\";\nimport { serialAsync } from \"../../credix/utils/async.utils\";\nimport { SEEDS, TX_SIZE } from \"../../credix/consts\";\n\nexport function CredixPassListItem({\n    multisig,\n    onClose,\n    didAddTransaction,\n  }: {\n    multisig: PublicKey;\n    onClose: Function;\n    didAddTransaction: (tx: PublicKey) => void;\n  }) {\n    const [open, setOpen] = useState(false);\n    return (\n      <>\n        <ListItem button onClick={() => setOpen((open) => !open)}>\n          <ListItemIcon>\n            <img src=\"/credix.svg\" alt=\"Credix Logo\" style={{width: \"20px\", marginLeft: \"3px\"}}/>\n          </ListItemIcon>\n          <ListItemText primary={\"Credix Pass\"} />\n          {open ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <CredixPassListItemDetails\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n        </Collapse>\n      </>\n    );\n  }\n  \nfunction CredixPassListItemDetails({\n    multisig,\n    onClose,\n    didAddTransaction,\n  }: {\n    multisig: PublicKey;\n    onClose: Function;\n    didAddTransaction: (tx: PublicKey) => void;\n  }) {\n  const [globalMarketSeed, setGlobalMarketSeed] = useState<string>(SEEDS.GLOBAL_MARKET_STATE_PDA); \n  const [isBorrower, setIsBorrower] = useState<boolean>(false);\n\tconst [isUnderwriter, setIsUnderwriter] = useState<boolean>(false);\n\tconst [isActive, setIsActive] = useState<boolean>(false);\n\tconst [passHolder, setPassHolder] = useState<string>(\"\");\n  const [releaseTimestamp, setReleaseTimestamp] = useState(new BN(0));\n\tconst [credixPass, setCredixPass] = useState<CredixPass | null | any>();\n  const [issueUpdate, setIssueUpdate] = useState<string>(\"Issue\"); \n  const multisigClient = useMultisigProgram();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const fetchAndSetPassData = useCallback(\n\t\tasync (globalMarketSeed: string, publicKey: PublicKey) => {\n\t\t\tconst credixPass = await getCredixPassInfo(\n        globalMarketSeed, \n\t\t\t\tpublicKey,\n\t\t\t\tmultisigClient.provider\n\t\t\t);\n      if (credixPass) {\n        setIssueUpdate(\"Update\"); \n      } else {\n        setIssueUpdate(\"Issue\"); \n      }\n\t\t\tsetCredixPass(credixPass);\n      try {\n        // @ts-ignore\n        setReleaseTimestamp(credixPass.releaseTimestamp)\n      } catch (err) {\n        setReleaseTimestamp(new BN(0));\n      }\n\t\t},\n\t\t[multisigClient.provider.connection, multisigClient.provider.wallet]\n\t);\n\n\tuseEffect(() => {\n\t\ttry {\n\t\t\tconst passholderKey = new PublicKey(passHolder);\n\t\t\tfetchAndSetPassData(globalMarketSeed, passholderKey);\n\t\t} catch (e) {\n\t\t\tsetCredixPass(null);\n\t\t}\n\t}, [passHolder, globalMarketSeed, fetchAndSetPassData]);\n\n\tuseEffect(() => {\n\t\tsetIsActive(!!credixPass?.active);\n\t\tsetIsBorrower(!!credixPass?.isBorrower);\n\t\tsetIsUnderwriter(!!credixPass?.isUnderwriter);\n\t}, [credixPass]);\n\n    const isValidPublicKey = (publicKey: string) => {\n        try {\n\t\t\tnew PublicKey(publicKey);\n\t\t\treturn true\n\t\t} catch (e) {\n\t\t\treturn false\n\t\t}\n    }\n\n  const onPassHolderChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\tsetPassHolder(e.target.value);\n\t};\n\n\tconst onActiveChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n\t\te.target.value === \"true\" ? setIsActive(true) : setIsActive(false);\n\t};\n\n\tconst onBorrowerChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n\t\te.target.value === \"true\" ? setIsBorrower(true) : setIsBorrower(false);\n\t};\n\n\tconst onUnderwriterChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n\t\te.target.value === \"true\" ? setIsUnderwriter(true) : setIsUnderwriter(false);\n\t};\n\n  const onBlurGlobalMarketSeed = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\tsetGlobalMarketSeed(e.target.value);\n\t};\n\n  const onChangeReleaseTimestamp = (e: string) => {\n    setReleaseTimestamp(new BN(Math.round(new Date(e).getTime()/1000)));\n  }\n\n\tconst submitButtonDisabled = () =>\n\t\t!!(\n\t\t\tcredixPass &&\n\t\t\tcredixPass.active === isActive &&\n\t\t\tcredixPass.isBorrower === isBorrower &&\n\t\t\tcredixPass.isUnderwriter === isUnderwriter &&\n      credixPass.releaseTimestamp === releaseTimestamp\n\t\t);\n    \n    const onSubmit = serialAsync(async (e: React.SyntheticEvent) => {\n        e.preventDefault();\n\n        enqueueSnackbar(\"Creating transaction\", {\n            variant: \"info\",\n        });\n    \n        const [multisigSigner] = await PublicKey.findProgramAddress(\n            [multisig.toBuffer()],\n            multisigClient.programId\n        );\n        \n        if (!isValidPublicKey(passHolder)) {\n            enqueueSnackbar(`Non valid PassHolder Public Key`, {\n                variant: \"error\",\n              });\n            return; \n        }\n      \n        const holderPublicKey = new PublicKey(passHolder);\n        let credixPassIx = await updateCredixPass(\n            globalMarketSeed, \n            multisigSigner,\n            holderPublicKey,\n            isActive,\n            isUnderwriter,\n            isBorrower,\n            releaseTimestamp, \n            multisigClient.provider\n        );\n        if (!credixPass) {\n            credixPassIx = await issueCredixPass(\n                globalMarketSeed, \n                multisigSigner,\n                holderPublicKey,\n                isUnderwriter,\n                isBorrower,\n                releaseTimestamp, \n                multisigClient.provider\n            );\n        }\n        \n        const transaction = new Account();\n  \n        const tx = await multisigClient.rpc.createTransaction(\n            config.clusterConfig.programId,\n            credixPassIx.keys,\n            Buffer.from(credixPassIx.data),\n            {\n            accounts: {\n                multisig,\n                transaction: transaction.publicKey,\n                proposer: multisigClient.provider.wallet.publicKey,\n                rent: SYSVAR_RENT_PUBKEY,\n            },\n            signers: [transaction],\n            instructions: [\n                await multisigClient.account.transaction.createInstruction(\n                transaction,\n                // @ts-ignore\n                350\n                ),\n            ],\n            }\n      );\n      enqueueSnackbar(\"Transaction created\", {\n        variant: \"success\",\n        action: <ViewTransactionOnExplorerButton signature={tx} />,\n      });\n      didAddTransaction(transaction.publicKey);\n      onClose();\n    });\n  \n    return (\n        <div\n            style={{\n            background: \"#f1f0f0\",\n            padding: \"24px\"\n            }}\n        >\n\t\t\t<h2>{issueUpdate} credix pass</h2>\n\t\t\t<form onSubmit={onSubmit} \n                style={{\n                    display: \"flex\",\n                    flexDirection: \"column\"\n                }}\n            >\n        <label>\n            Global marketstate seed: \n            <input\n                name=\"globalMarketSeed\"\n                type=\"text\"\n                placeholder={globalMarketSeed}\n                onBlur={onBlurGlobalMarketSeed}\n                style={{marginLeft: \"10px\", width: \"500px\", margin: \"10px\"}}\n            />\n        </label>\n\t\t\t\t<label>\n\t\t\t\t\tPassHolder Public Key\n\t\t\t\t\t<input\n\t\t\t\t\t\tname=\"holderPublicKey\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={passHolder}\n\t\t\t\t\t\tonChange={onPassHolderChange}\n                        style={{marginLeft: \"10px\", width: \"500px\", margin: \"10px\"}}\n\t\t\t\t\t/>\n\t\t\t\t</label>\n\t\t\t\t<br />\n\t\t\t\t<label>\n\t\t\t\t\tIs Active\n\t\t\t\t\t<select\n\t\t\t\t\t\tname=\"isActive\"\n\t\t\t\t\t\tonChange={onActiveChange}\n                        style={{marginLeft: \"10px\", width: \"100px\", margin: \"10px\"}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<option selected={isActive} value=\"true\">\n\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t</option>\n\t\t\t\t\t\t<option selected={!isActive} value=\"false\">\n\t\t\t\t\t\t\tFalse\n\t\t\t\t\t\t</option>\n\t\t\t\t\t</select>\n\t\t\t\t</label>\n\t\t\t\t<br />\n\t\t\t\t<label>\n\t\t\t\t\tIs Borrower\n\t\t\t\t\t<select\n\t\t\t\t\t\tname=\"isBorrower\"\n\t\t\t\t\t\tonChange={onBorrowerChange}\n                        style={{marginLeft: \"10px\", width: \"100px\", margin: \"10px\"}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<option selected={isBorrower} value=\"true\">\n\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t</option>\n\t\t\t\t\t\t<option selected={!isBorrower} value=\"false\">\n\t\t\t\t\t\t\tFalse\n\t\t\t\t\t\t</option>\n\t\t\t\t\t</select>\n\t\t\t\t</label>\n\t\t\t\t<br />\n\t\t\t\t<label>\n\t\t\t\t\tIs Underwriter\n\t\t\t\t\t<select\n\t\t\t\t\t\tname=\"isUnderwriter\"\n\t\t\t\t\t\tonChange={onUnderwriterChange}\n            style={{marginLeft: \"10px\", width: \"100px\", margin: \"10px\"}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<option selected={isUnderwriter} value=\"true\">\n\t\t\t\t\t\t\tTrue\n\t\t\t\t\t\t</option>\n\t\t\t\t\t\t<option selected={!isUnderwriter} value=\"false\">\n\t\t\t\t\t\t\tFalse\n\t\t\t\t\t\t</option>\n\t\t\t\t\t</select>\n\t\t\t\t</label>\n        <label>\n          Release date\n          <DateTimePicker\n            onChange={onChangeReleaseTimestamp}\n            value={new Date(releaseTimestamp.toNumber() * 1000)}\n          />\n        </label>\n\t\t\t\t<br />\n\t\t\t\t<input\n\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\tvalue={`${issueUpdate} Credix Pass`}\n\t\t\t\t\tdisabled={submitButtonDisabled()}\n          style={{background: \"white\", cursor: \"pointer\", width:\"200px\", height:\"30px\"}}\n\t\t\t\t/>\n\t\t\t</form>\n\t\t</div>\n    );\n  }","import Big from \"big.js\";\nimport { Ratio } from \"../types/program.types\";\n\nexport const applyRatio = (r: Ratio, to: Big) => {\n\tconst numerator = new Big(r.numerator);\n\tconst denominator = new Big(r.denominator);\n\n\treturn to.mul(numerator).div(denominator);\n};\n\nexport const ZERO = new Big(0);\n\nexport const min = (lhs: Big, rhs: Big) => (rhs.gt(lhs) ? lhs : rhs);\n\nexport const getFee = (amount: Big, feePercentage: Ratio) =>\n\tapplyRatio(feePercentage, amount).round(0, Big.roundDown);\n\nexport const getWithdrawFee = (amount: Big, withdrawFeePercentage: Ratio) => {};\n","import Big from \"big.js\";\nimport {\n\tDeal,\n\tDealStatus,\n\tInterestRepaymentType,\n\tPrincipalRepaymentType,\n\tRatio,\n} from \"../types/program.types\";\nimport { applyRatio, ZERO } from \"./math.utils\";\n\nconst SECONDS_IN_DAY = 86400;\n\nexport const mapDealToStatus = (deal: Deal, clusterTime: number): DealStatus => {\n\tconst principalToPay = getPrincipalToRepay(deal);\n\tconst interestToPay = getInterestToRepay(deal);\n\n\tif (principalToPay.eq(ZERO) && interestToPay.eq(ZERO)) {\n\t\treturn DealStatus.CLOSED;\n\t}\n\n\t// We store max i64 as a hack to know it's not live yet. BN can't handle this.\n\tif (deal.goLiveAt.bitLength() < 53 && deal.goLiveAt.toNumber() <= clusterTime) {\n\t\treturn DealStatus.IN_PROGRESS;\n\t}\n\n\treturn DealStatus.PENDING;\n};\n\nexport const getDaysRemaining = (deal: Deal, clusterTime: number, dealStatus: DealStatus) => {\n\tif (deal.goLiveAt.bitLength() > 53) {\n\t\treturn deal.timeToMaturityDays;\n\t}\n\n\tif (dealStatus === DealStatus.CLOSED) {\n\t\treturn 0;\n\t}\n\n\tconst daysRemaining =\n\t\t(deal.goLiveAt.toNumber() + deal.timeToMaturityDays * SECONDS_IN_DAY - clusterTime) /\n\t\tSECONDS_IN_DAY;\n\n\treturn Math.max(Math.round(daysRemaining * 10) / 10, 0);\n};\n\nexport const getTotalInterest = (deal: Deal) => {\n\tconst principal = new Big(deal.principal.toNumber());\n\tconst financingFeePercentage = deal.financingFeePercentage;\n\tconst timeToMaturityRatio: Ratio = { numerator: deal.timeToMaturityDays, denominator: 360 };\n\n\treturn applyRatio(timeToMaturityRatio, applyRatio(financingFeePercentage, principal)).round(\n\t\t0,\n\t\tBig.roundDown\n\t);\n};\n\nexport const getPrincipalToRepay = (deal: Deal) => {\n\tconst principal = new Big(deal.principal.toNumber());\n\tconst principalAmountRepaid = new Big(deal.principalAmountRepaid.toNumber());\n\n\treturn principal.minus(principalAmountRepaid);\n};\n\nexport const getInterestToRepay = (deal: Deal) => {\n\tconst interestAmountRepaid = new Big(deal.interestAmountRepaid.toNumber());\n\tconst totalInterest = getTotalInterest(deal);\n\n\treturn totalInterest.minus(interestAmountRepaid);\n};\n\nexport const createPrincipalRepaymentType = (): PrincipalRepaymentType => ({ principal: {} });\nexport const createInterestRepaymentType = (): InterestRepaymentType => ({ interest: {} });\n","export const SESSION_STORAGE = {\n\tSTATE: \"state\",\n};\n\n// TODO: turn into enum\nexport const SEEDS = {\n\tGLOBAL_MARKET_STATE_PDA: \"credix-test-marketplace\",\n\tDEAL_INFO: \"deal-info\",\n\tCREDIX_PASS: \"credix-pass\",\n\tBORROWER_INFO: \"borrower-info\",\n};\n\nexport const FEES = {\n\tWITHDRAW: 0.005,\n\tINTEREST_PAYMENT: 0.1,\n};\n\nexport const DECIMALS = 6;\nexport const PERCENTAGE_FACTOR = 1000;\nexport const TX_SIZE = 100; ","import { Idl } from \"@project-serum/anchor\";\n\nconst idl: Idl = {\n  version: \"0.0.0\",\n  name: \"multisig\",\n  instructions: [\n    {\n      name: \"createMultisig\",\n      accounts: [\n        {\n          name: \"multisig\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"rent\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"owners\",\n          type: {\n            vec: \"publicKey\",\n          },\n        },\n        {\n          name: \"threshold\",\n          type: \"u64\",\n        },\n        {\n          name: \"nonce\",\n          type: \"u8\",\n        },\n      ],\n    },\n    {\n      name: \"createTransaction\",\n      accounts: [\n        {\n          name: \"multisig\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"transaction\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"proposer\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"rent\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"pid\",\n          type: \"publicKey\",\n        },\n        {\n          name: \"accs\",\n          type: {\n            vec: {\n              defined: \"TransactionAccount\",\n            },\n          },\n        },\n        {\n          name: \"data\",\n          type: \"bytes\",\n        },\n      ],\n    },\n    {\n      name: \"approve\",\n      accounts: [\n        {\n          name: \"multisig\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"transaction\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"owner\",\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"setOwners\",\n      accounts: [\n        {\n          name: \"multisig\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"multisigSigner\",\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: \"owners\",\n          type: {\n            vec: \"publicKey\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"changeThreshold\",\n      accounts: [\n        {\n          name: \"multisig\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"multisigSigner\",\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: \"threshold\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"executeTransaction\",\n      accounts: [\n        {\n          name: \"multisig\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"multisigSigner\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"transaction\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  accounts: [\n    {\n      name: \"Multisig\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"owners\",\n            type: {\n              vec: \"publicKey\",\n            },\n          },\n          {\n            name: \"threshold\",\n            type: \"u64\",\n          },\n          {\n            name: \"nonce\",\n            type: \"u8\",\n          },\n          {\n            name: \"ownerSetSeqno\",\n            type: \"u32\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"Transaction\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"multisig\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"programId\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"accounts\",\n            type: {\n              vec: {\n                defined: \"TransactionAccount\",\n              },\n            },\n          },\n          {\n            name: \"data\",\n            type: \"bytes\",\n          },\n          {\n            name: \"signers\",\n            type: {\n              vec: \"bool\",\n            },\n          },\n          {\n            name: \"didExecute\",\n            type: \"bool\",\n          },\n          {\n            name: \"ownerSetSeqno\",\n            type: \"u32\",\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: \"TransactionAccount\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"pubkey\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"isSigner\",\n            type: \"bool\",\n          },\n          {\n            name: \"isWritable\",\n            type: \"bool\",\n          },\n        ],\n      },\n    },\n  ],\n  errors: [\n    {\n      code: 100,\n      name: \"InvalidOwner\",\n      msg: \"The given owner is not part of this multisig.\",\n    },\n    {\n      code: 101,\n      name: \"NotEnoughSigners\",\n      msg: \"Not enough owners signed this transaction.\",\n    },\n    {\n      code: 102,\n      name: \"TransactionAlreadySigned\",\n      msg: \"Cannot delete a transaction that has been signed by an owner.\",\n    },\n    {\n      code: 103,\n      name: \"Overflow\",\n      msg: \"Overflow when adding.\",\n    },\n    {\n      code: 104,\n      name: \"UnableToDelete\",\n      msg: \"Cannot delete a transaction the owner did not create.\",\n    },\n    {\n      code: 105,\n      name: \"AlreadyExecuted\",\n      msg: \"The given transaction has already been executed.\",\n    },\n    {\n      code: 106,\n      name: \"InvalidThreshold\",\n      msg: \"Threshold must be less than or equal to the number of owners.\",\n    },\n  ],\n};\n\nexport default idl;\n","import { Program, Provider, Wallet } from \"@project-serum/anchor\";\nimport { ConfirmOptions, Keypair } from \"@solana/web3.js\";\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { useMemo } from \"react\";\nimport MultisigIdl from \"../idl\";\nimport { getMultisigProgramIdByUrl } from \"../utils/ids\"; \nimport { useConnection } from \"../context/connection\";\n\nexport function useMultisigProgram(): Program {\n  const wallet = useAnchorWallet();\n  const connection = useConnection();\n  const currentNetwork = (connection as any)._rpcEndpoint;\n  const currentMultisigProgramId = getMultisigProgramIdByUrl(currentNetwork); \n  \n  return useMemo(() => {\n    const opts: ConfirmOptions = {\n      preflightCommitment: \"recent\",\n      commitment: \"recent\",\n    };\n    let provider = new Provider(connection, wallet ?? new Wallet(Keypair.generate()), opts);\n    return new Program(MultisigIdl, currentMultisigProgramId, provider);\n  }, [wallet, connection]);\n}\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { TransactionSignature } from \"@solana/web3.js\";\nimport { useConnectionConfig } from \"../context/connection\";\n\ntype Props = {\n  signature: string;\n};\n\nexport async function withTx(\n  snack: any,\n  beforeLabel: string,\n  afterLabel: string,\n  execTx: () => Promise<TransactionSignature>\n) {\n  snack.enqueueSnackbar(beforeLabel, {\n    variant: \"info\",\n  });\n  try {\n    let tx = await execTx();\n    snack.closeSnackbar();\n    snack.enqueueSnackbar(afterLabel, {\n      variant: \"success\",\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n  } catch (err) {\n    snack.enqueueSnackbar(`Error: ${err.toString()}`, {\n      variant: \"error\",\n    });\n  }\n}\n\nexport function ViewTransactionOnExplorerButton(props: Props) {\n  const { signature } = props;\n  const { env } = useConnectionConfig();\n  const urlSuffix = `?cluster=${env.toString()}`;\n  return (\n    <Button\n      color=\"inherit\"\n      component=\"a\"\n      target=\"_blank\"\n      rel=\"noopener\"\n      href={`https://explorer.solana.com/tx/${signature}` + urlSuffix}\n    >\n      View on Solana Explorer\n    </Button>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Menu from \"@material-ui/core/Menu\";\nimport Link from \"@material-ui/core/Link\";\nimport Typography from \"@material-ui/core/Typography\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Button from \"@material-ui/core/Button\";\nimport BubbleChartIcon from \"@material-ui/icons/BubbleChart\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport DisconnectIcon from '@material-ui/icons/LinkOff';\nimport { WalletDisconnectButton, WalletMultiButton } from \"@solana/wallet-adapter-material-ui\";\nimport { ENDPOINTS, useConnectionConfig } from \"../context/connection\";\n\nexport default function Header() {\n  const wallet  = useAnchorWallet();\n  const history = useHistory();\n  const [multisigAddress, setMultisigAddress] = useState(\"\");\n  const disabled = !isValidPubkey(multisigAddress);\n  const searchFn = () => {\n    history.push(`/${multisigAddress}`);\n  };\n  return (\n    <AppBar\n      position=\"static\"\n      style={{\n        background: \"#ffffff\",\n        color: \"#272727\",\n        boxShadow: \"none\",\n        borderBottom: \"solid 1pt #ccc\",\n      }}\n    >\n      <Toolbar>\n        <div\n          style={{\n            display: \"flex\",\n            width: \"100%\",\n          }}\n        >\n          <div style={{ display: \"flex\", flex: 1 }}>\n            <BarButton label=\"Multisig\" hrefClient=\"/\" />\n            <div\n              style={{\n                marginLeft: \"16px\",\n                marginRight: \"16px\",\n                borderRadius: \"25px\",\n                display: \"flex\",\n                flex: 1,\n                backgroundColor: \"rgb(245 245 245)\",\n              }}\n            >\n              <input\n                style={{\n                  flex: 1,\n                  background: \"none\",\n                  padding: \"16px\",\n                  border: \"none\",\n                  outlineWidth: 0,\n                  color: \"inherit\",\n                }}\n                placeholder=\"Search a multisig address...\"\n                value={multisigAddress}\n                onChange={(e) => setMultisigAddress(e.target.value as string)}\n                onKeyPress={(e) => {\n                  if (e.key === \"Enter\") {\n                    searchFn();\n                  }\n                }}\n              />\n              <IconButton disabled={disabled} onClick={searchFn}>\n                <SearchIcon />\n              </IconButton>\n            </div>\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n            }}\n          >\n            <NetworkSelector />\n            <WalletMultiButton />\n            {wallet && <WalletDisconnectButton startIcon={<DisconnectIcon />} style={{ marginLeft: 8 }} />}\n          </div>\n        </div>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nfunction SerumLogoButton() {\n  const history = useHistory();\n  return (\n    <div style={{ display: \"flex\" }} onClick={() => history.push(\"/\")}>\n      <Button color=\"inherit\">\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n          }}\n        >\n          <img\n            style={{\n              display: \"block\",\n              height: \"35px\",\n            }}\n            alt=\"Logo\"\n            src=\"http://dex.projectserum.com/static/media/logo.49174c73.svg\"\n          />\n        </div>\n      </Button>\n    </div>\n  );\n}\n\ntype BarButtonProps = {\n  label: string;\n  hrefClient?: string;\n  href?: string;\n};\n\nfunction BarButton(props: BarButtonProps) {\n  const history = useHistory();\n  const { label, href, hrefClient } = props;\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n      }}\n      onClick={() => hrefClient && history.push(hrefClient)}\n    >\n      <Link\n        style={{ color: \"inherit\", textDecoration: \"none\" }}\n        href={href}\n        target=\"_blank\"\n      >\n        <Button color=\"inherit\">\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              flexDirection: \"column\",\n            }}\n          >\n            <Typography style={{ fontSize: \"15px\" }}>{label}</Typography>\n          </div>\n        </Button>\n      </Link>\n    </div>\n  );\n}\n\nfunction NetworkSelector() {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const {env, setEndpoint} = useConnectionConfig();\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div\n      style={{\n        marginRight: \"10px\",\n        fontSize: \"15px\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n      }}\n    >\n      <Button\n        color=\"inherit\"\n        onClick={(e) =>\n          setAnchorEl(\n            // @ts-ignore\n            e.currentTarget\n          )\n        }\n      >\n        <BubbleChartIcon />\n        <Typography style={{ marginLeft: \"5px\", fontSize: \"15px\" }}>\n          {env.toString()}\n        </Typography>\n      </Button>\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n        style={{\n          marginLeft: \"12px\",\n          color: \"white\",\n        }}\n      >\n        {ENDPOINTS.map(endpoint => {\n          return (\n            <MenuItem\n            key={endpoint.name.toString()}\n            onClick={() => {\n              handleClose();\n              setEndpoint(endpoint.endpoint);\n            }}\n          >\n            <Typography>{endpoint.name}</Typography>\n          </MenuItem>\n          )\n        })}\n      </Menu>\n    </div>\n  );\n}\n\nfunction isValidPubkey(addr: string): boolean {\n  try {\n    new PublicKey(addr);\n    return true;\n  } catch (_) {\n    return false;\n  }\n}\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Link from \"@material-ui/core/Link\";\n\nexport default function Footer() {\n  return (\n    <div\n      style={{\n        zIndex: 99,\n        position: \"fixed\",\n        width: \"100%\",\n        bottom: 0,\n        textAlign: \"center\",\n        height: \"30px\",\n        backgroundColor: \"#fbfbfb\",\n        borderTop: \"solid 1pt #ccc\",\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        paddingLeft: \"10px\",\n        paddingRight: \"10px\",\n      }}\n    >\n      <div style={{ marginLeft: \"auto\", marginRight: \"auto\", display: \"flex\" }}>\n        <FooterButton\n          href={\"https://github.com/project-serum/multisig\"}\n          label={\"Source\"}\n        />\n        <FooterButton\n          href={\"https://github.com/project-serum/awesome-serum\"}\n          label={\"Developer Resources\"}\n        />\n        <FooterButton\n          href={\"https://discord.com/channels/739225212658122886\"}\n          label={\"Discord\"}\n        />\n        <FooterButton href={\"https://t.me/ProjectSerum\"} label={\"Telegram\"} />\n        <FooterButton\n          href={\"https://github.com/project-serum\"}\n          label={\"GitHub\"}\n        />\n        <FooterButton\n          href={\"https://solanabeach.io/\"}\n          label={\"Solana Network\"}\n          isEnd={true}\n        />\n      </div>\n    </div>\n  );\n}\n\ntype FooterButtonProps = {\n  label: string;\n  href: string;\n  isEnd?: boolean;\n};\n\nfunction FooterButton(props: FooterButtonProps) {\n  const { label, href, isEnd } = props;\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n        marginRight: isEnd ? \"\" : \"15px\",\n      }}\n    >\n      <Link href={href} target=\"_blank\" color=\"inherit\">\n        <Typography style={{ fontSize: \"14px\" }}>{label}</Typography>\n      </Link>\n    </div>\n  );\n}\n","import React, { useState, PropsWithChildren } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\n\ntype Props = {};\n\nexport default function Layout(props: PropsWithChildren<Props>) {\n  const [refresh, setRefresh] = useState(false);\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        minHeight: \"100vh\",\n        flexDirection: \"column\",\n        backgroundColor: \"rgb(251, 251, 251)\",\n      }}\n    >\n      <div\n        style={{\n          position: \"fixed\",\n          width: \"100%\",\n          zIndex: 99,\n        }}\n      >\n        <RiskBar />\n        <Header />\n      </div>\n      <div\n        style={{\n          width: \"100%\",\n          marginTop: \"94px\",\n          flex: 1,\n          display: \"flex\",\n          marginBottom: \"30px\", // Compensates for the fixed position footer.\n        }}\n      >\n        {window.localStorage.getItem(\"consent\") ? (\n          <div style={{ width: \"100%\" }}>{props.children}</div>\n        ) : (\n          <RiskDisclosureForm\n            onConsent={() => {\n              window.localStorage.setItem(\"consent\", \"true\");\n              setRefresh(!refresh);\n            }}\n          />\n        )}\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nfunction RiskBar() {\n  return (\n    <div\n      style={{\n        color: \"#fff\",\n        backgroundColor: \"rgb(39, 39, 39)\",\n        height: \"30px\",\n        textAlign: \"center\",\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          flexDirection: \"column\",\n          height: \"100%\",\n        }}\n      >\n        <Typography style={{ fontSize: \"14px\" }}>\n          Multisig is unaudited software. Use at your own risk.\n        </Typography>\n      </div>\n    </div>\n  );\n}\n\nfunction RiskDisclosureForm({ onConsent }: { onConsent: () => void }) {\n  return (\n    <div\n      style={{\n        flex: \"1\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n        textAlign: \"center\",\n      }}\n    >\n      <div style={{ width: \"100%\", display: \"flex\" }}>\n        <div\n          style={{ display: \"flex\", marginLeft: \"auto\", marginRight: \"auto\" }}\n        >\n          <Typography\n            style={{ marginBottom: \"16px\", maxWidth: \"1000px\" }}\n            color=\"textSecondary\"\n            variant=\"h4\"\n          >\n            No statement or warranty is provided in relation to the utility of\n            this program, the safety of its code or its suitability for your\n            use, and by using it, you agree to bear any risk associated with\n            such potential vulnerabilities, including, but not limited to the\n            potential loss of tokens.\n          </Typography>\n        </div>\n      </div>\n      <div style={{ display: \"flex\", marginLeft: \"auto\", marginRight: \"auto\" }}>\n        <Button variant=\"contained\" color=\"primary\" onClick={onConsent}>\n          I agree\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import { AccountInfo } from \"@solana/spl-token\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nexport class TokenAccountContext {\n  private static readonly SPL_ACCOUNT_CONTEXT_EMPTY = TokenAccountContext.index(\n    [],\n  );\n\n  private readonly accounts: AccountInfo[];\n  private readonly bySplAccountId: Map<string, AccountInfo>;\n\n  private constructor(\n    accounts: AccountInfo[],\n    bySplAccountId: Map<string, AccountInfo>,\n  ) {\n    this.accounts = accounts;\n    this.bySplAccountId = bySplAccountId;\n  }\n\n  public static empty() {\n    return TokenAccountContext.SPL_ACCOUNT_CONTEXT_EMPTY;\n  }\n\n  public static index(accounts: AccountInfo[]): TokenAccountContext {\n    const bySplAccountId = new Map<string, AccountInfo>();\n    accounts.forEach(a =>\n      bySplAccountId.set(a.address.toString(), a),\n    );\n    return new TokenAccountContext(accounts, bySplAccountId);\n  }\n\n  public isReady() {\n    return this.accounts.length > 0;\n  }\n\n  public getAllTokenAccounts(): AccountInfo[] {\n    return this.accounts;\n  }\n\n  public getSplAccount(splAccountId: PublicKey): AccountInfo {\n    const result = this.findSplAccount(splAccountId);\n    if (!result) {\n      throw new Error(`No account for ${splAccountId}`);\n    }\n\n    return result;\n  }\n\n  public findSplAccount(splAccountId: PublicKey): AccountInfo | undefined {\n    const key = splAccountId.toString();\n    return this.bySplAccountId.get(key);\n  }\n\n  public getSplAccountByMintId(mintId: PublicKey): AccountInfo {\n    const result = this.findSplAccountByMintId(mintId);\n    if (!result) {\n      throw new Error(`No account for mint ${mintId}`);\n    }\n\n    return result;\n  }\n\n  public findSplAccountByMintId(mintId: PublicKey): AccountInfo | undefined {\n    const accounts = this.accounts\n      .filter(account => account.mint.equals(mintId))\n      .sort((a, b) => -a.amount.cmp(b.amount));\n    return accounts[0];\n  }\n}\n","import React, { useCallback, useContext, useMemo } from 'react';\n\nimport { GetProgramAccountsFilter } from '@solana/web3.js';\nimport { AccountInfo, AccountLayout, TOKEN_PROGRAM_ID } from '@solana/spl-token';\n\nimport { Provider } from '@project-serum/anchor';\nimport { PublicKey } from '@solana/web3.js';\nimport { TokenAccountContext } from '../models/TokenAccountContext';\nimport { useProgramSubscription } from '../hooks/useProgramSubscription';\nimport { useMultisigProgram } from '../hooks/useMultisigProgram';\nimport { KeyedAccountInfo } from '@solana/web3.js';\nimport { parseTokenAccount } from '@project-serum/common';\n\nfunction getProgramId(_provider: Provider): PublicKey {\n  return TOKEN_PROGRAM_ID;\n}\n\nfunction getFilters(provider: Provider): GetProgramAccountsFilter[] {\n  return [\n    {\n      dataSize: AccountLayout.span,\n    },\n    {\n      memcmp: {\n        offset: 32,\n        bytes: provider.wallet.publicKey.toBase58(),\n      },\n    },\n  ];\n}\n\nfunction parse(raw: KeyedAccountInfo): AccountInfo {\n  const res = parseTokenAccount(raw.accountInfo.data);\n  res.address = raw.accountId;\n  return res;\n}\n\ninterface Interface {\n  tokens: TokenAccountContext;\n  reload: () => Promise<AccountInfo[]>;\n  isLoading: boolean;\n}\n\nconst Context = React.createContext<Interface>(undefined!);\n\nexport function AccountProvider({ children = null as any }) {\n  const multisigProgram = useMultisigProgram();\n\n  const [splAccounts, reloadSplAccounts, isReloadingSplAccounts] =\n    useProgramSubscription<AccountInfo>(\n      getProgramId,\n      getFilters,\n      parse,\n      multisigProgram.provider\n    );\n\n  const tokens = useMemo(() => {\n    const result = [...splAccounts];\n    return TokenAccountContext.index(result);\n  }, [splAccounts]);\n\n  const reload = useCallback(async () => {\n    const [splAccounts] = await Promise.all([\n      reloadSplAccounts(),\n    ]);\n    const result = [...splAccounts];\n    return result;\n  }, [reloadSplAccounts]);\n\n  const isLoading = useMemo(() => {\n    return isReloadingSplAccounts;\n  }, [isReloadingSplAccounts]);\n\n  return (\n    <Context.Provider value={{ tokens, reload, isLoading }}>\n      {children}\n    </Context.Provider>\n  );\n}\n\nexport const useTokenAccountContext = () => {\n  return useContext(Context);\n};\n","import { Provider } from '@project-serum/anchor';\nimport { KeyedAccountInfo } from '@solana/web3.js';\nimport { PublicKey } from '@solana/web3.js';\nimport { GetProgramAccountsFilter } from '@solana/web3.js';\nimport { useEffect, useState } from 'react';\n\nexport function useProgramSubscription<T>(\n  getProgramId: (context: Provider) => PublicKey,\n  getFilters: (provider: Provider) => GetProgramAccountsFilter[],\n  parse: (raw: KeyedAccountInfo) => T,\n  provider: Provider,\n): [T[], () => Promise<T[]>, boolean] {\n  const [results, setResults] = useState<T[]>([]);\n  const [reload, setReload] = useState<() => Promise<T[]>>(\n    () => () => Promise.resolve([]),\n  );\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const programId = getProgramId(provider);\n    const filters = getFilters(provider);\n    const connection = provider.connection;\n    const cache = new Map<string, T>();\n\n    if (!programId) {\n      return;\n    }\n\n    const onLoad = () => {\n      setIsLoading(true);\n      return connection\n        .getProgramAccounts(programId, { filters })\n        .then(rawAccounts => {\n          for (const raw of rawAccounts) {\n            const parsed = parse({\n              accountId: raw.pubkey,\n              accountInfo: raw.account\n            });\n            cache.set(raw.pubkey.toBase58(), parsed);\n          }\n          const values = Array.from(cache.values());\n          setResults(values);\n          return values;\n        })\n        .finally(() => setIsLoading(false));\n    };\n    setReload(() => onLoad);\n    onLoad()\n      .then(values => {\n        console.log(\n          `Fetched ${values.length} accounts for program ${programId}.`,\n        );\n      })\n      .catch(() => {\n        console.error(\n          'Connection Failed',\n          `Failed to fetch accounts for program ${programId}`,\n        );\n      });\n\n    const sub = connection.onProgramAccountChange(\n      programId,\n      info => {\n        const parsed = parse(info);\n        cache.set(info.accountId.toBase58(), parsed);\n        setResults(Array.from(cache.values()));\n      },\n      'singleGossip',\n      filters,\n    );\n\n    return () => {\n      cache.clear();\n      setResults([]);\n      setReload(() => () => Promise.resolve([]));\n\n      connection.removeProgramAccountChangeListener(sub).then(() => {\n        console.log(`Subscription ${programId} terminated.`);\n      });\n    };\n  }, [getFilters, getProgramId, parse, provider]);\n\n  return [results, reload, isLoading];\n}\n","import React, { useMemo } from \"react\";\nimport { useHistory, useLocation } from \"react-router\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport { SnackbarProvider } from \"notistack\";\nimport { MuiThemeProvider } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { unstable_createMuiStrictModeTheme as createMuiTheme } from \"@material-ui/core/styles\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport Layout from \"./components/Layout\";\nimport Multisig from \"./components/Multisig\";\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\nimport { WalletProvider } from \"@solana/wallet-adapter-react\";\nimport {\n  getLedgerWallet,\n  getMathWallet,\n  getPhantomWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolongWallet,\n  getTorusWallet,\n} from '@solana/wallet-adapter-wallets';\nimport { ConnectionProvider } from \"./context/connection\";\nimport './App.css'\nimport { AccountProvider } from \"./context/AccountContext\";\n\nfunction App() {\n  const theme = createMuiTheme({\n    palette: {\n      background: {\n        default: \"rgb(255,255,255)\",\n      },\n    },\n    typography: {\n      fontFamily: [\"Source Sans Pro\", \"sans-serif\"].join(\",\"),\n    },\n    overrides: {},\n  });\n  const wallets = useMemo(\n    () => [\n        getPhantomWallet(),\n        getSolflareWallet(),\n        getTorusWallet({\n            options: {\n                clientId: 'BOM5Cl7PXgE9Ylq1Z1tqzhpydY0RVr8k90QQ85N7AKI5QGSrr9iDC-3rvmy0K_hF0JfpLMiXoDhta68JwcxS1LQ',\n            },\n        }),\n        getLedgerWallet(),\n        getSolongWallet(),\n        getMathWallet(),\n        getSolletWallet(),\n    ],\n    []\n  );\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <CssBaseline />\n      <SnackbarProvider maxSnack={5} autoHideDuration={8000}>\n        <ConnectionProvider>\n          <WalletProvider wallets={wallets} autoConnect>\n              <WalletDialogProvider>\n                <AccountProvider>\n                  <HashRouter basename={\"/\"}>\n                        <Layout>\n                          <Route exact path=\"/\" component={MultisigPage} />\n                          <Route\n                            exact\n                            path=\"/:address\"\n                            component={MultisigInstancePage}\n                          />\n                        </Layout>\n                  </HashRouter>\n                </AccountProvider>\n              </WalletDialogProvider>\n          </WalletProvider>\n        </ConnectionProvider>\n      </SnackbarProvider>\n    </MuiThemeProvider>\n  );\n}\n\nfunction MultisigPage() {\n  const multisig = new PublicKey(\"AM194gsNqRnmu8CZKi5GBPRGMC4Bq4Egkj2GQ4Yz4JZ4\");\n  return <Multisig multisig={multisig} />;\n}\n\nexport function MultisigInstancePage() {\n  const history = useHistory();\n  const location = useLocation();\n  const path = location.pathname.split(\"/\");\n  if (path.length !== 2) {\n    history.push(`/multisig`);\n    return <></>;\n  } else {\n    const multisig = new PublicKey(path[1]);\n    return <Multisig multisig={multisig} />;\n  }\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export enum SolanaCluster {\n\tMAINNET = \"mainnet-beta\",\n\tLOCALNET = \"localnet\",\n\tDEVNET = \"devnet\",\n}\n\nexport enum RPCEndpoint {\n\tMAINNET = \"https://api.mainnet-beta.solana.com\",\n\tLOCALNET = \"http://127.0.0.1:8899\",\n\tDEVNET = \"https://api.devnet.solana.com\",\n}\n\nexport type PdaSeeds = Array<Buffer | Uint8Array>;\n","import { Idl } from \"@project-serum/anchor\";\nimport { ConfirmOptions, PublicKey } from \"@solana/web3.js\";\nimport { ClusterConfig, Config } from \"./types/config.types\";\nimport { RPCEndpoint, SolanaCluster } from \"./types/solana.types\";\nimport IDL from \"./credix.json\";\n\n/// PREFILLED CONFIGS\nconst localnetConfig: ClusterConfig = {\n\tname: SolanaCluster.LOCALNET,\n\tRPCEndpoint: RPCEndpoint.LOCALNET,\n\tprogramId: new PublicKey(\"CRDx2YkdtYtGZXGHZ59wNv1EwKHQndnRc1gT4p8i2vPX\"),\n\tgatewayProgramId: new PublicKey(\"gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs\"),\n};\n\nconst devnetConfig: ClusterConfig = {\n\tname: SolanaCluster.DEVNET,\n\tRPCEndpoint: RPCEndpoint.DEVNET,\n\tprogramId: new PublicKey(\"CRDx2YkdtYtGZXGHZ59wNv1EwKHQndnRc1gT4p8i2vPX\"),\n\tgatewayProgramId: new PublicKey(\"gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs\"),\n};\n\nconst mainnetConfig: ClusterConfig = {\n\tname: SolanaCluster.MAINNET,\n\tRPCEndpoint: RPCEndpoint.MAINNET,\n\tprogramId: new PublicKey(\"CRDx2YkdtYtGZXGHZ59wNv1EwKHQndnRc1gT4p8i2vPX\"),\n\tgatewayProgramId: new PublicKey(\"gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs\"),\n};\n///\n\nconst getTargetClusterFromEnv = (): SolanaCluster => {\n\tconst targetCluster = process.env.REACT_APP_CLUSTER;\n\n\tif (targetCluster) {\n\t\tif (!Object.values(SolanaCluster).some((c) => c === targetCluster)) {\n\t\t\tthrow new Error(`Invalid cluster targeted ${targetCluster}`);\n\t\t}\n\n\t\treturn targetCluster as SolanaCluster;\n\t}\n\n\treturn SolanaCluster.LOCALNET;\n};\n\nconst getBaseClusterConfig = (): ClusterConfig => {\n\tconst targetCluster = getTargetClusterFromEnv();\n\tswitch (targetCluster) {\n\t\tcase SolanaCluster.DEVNET:\n\t\t\treturn devnetConfig;\n\t\tcase SolanaCluster.MAINNET:\n\t\t\treturn mainnetConfig;\n\t\tdefault:\n\t\t\treturn localnetConfig;\n\t}\n};\n\nconst getRPCEndpointFromEnv = (): RPCEndpoint | undefined => {\n\tconst endpoint = process.env.REACT_APP_RPC_ENDPOINT;\n\n\tif (endpoint) {\n\t\tif (!Object.values(RPCEndpoint).some((e) => e === endpoint)) {\n\t\t\tthrow new Error(`Invalid rpc endpoint ${endpoint}`);\n\t\t}\n\n\t\treturn endpoint as RPCEndpoint;\n\t}\n};\n\nconst getProgramIdFromEnv = (): PublicKey | undefined => {\n\tconst key = process.env.REACT_APP_PROGRAM_ID;\n\n\tif (key) {\n\t\treturn new PublicKey(key);\n\t}\n};\n\nconst getGatewayProgramIdFromEnv = (): PublicKey | undefined => {\n\tconst key = process.env.REACT_APP_GATEWAY_PROGRAM_ID;\n\n\tif (key) {\n\t\treturn new PublicKey(key);\n\t}\n};\n\nconst getClusterConfig = (): ClusterConfig => {\n\tconst baseClusterConfig = getBaseClusterConfig();\n\n\tconst rpcEndpoint = getRPCEndpointFromEnv() || baseClusterConfig.RPCEndpoint;\n\n\tif (!rpcEndpoint) {\n\t\tthrow new Error(\"No RPC endpoint provided\");\n\t}\n\n\tconst programId = getProgramIdFromEnv() || baseClusterConfig.programId;\n\n\tif (!programId) {\n\t\tthrow new Error(\"No program id provided\");\n\t}\n\n\tconst gatewayProgramId = getGatewayProgramIdFromEnv() || baseClusterConfig.gatewayProgramId;\n\n\tif (!gatewayProgramId) {\n\t\tthrow new Error(\"No gateway program id provided\");\n\t}\n\n\tconst clusterConfig: ClusterConfig = {\n\t\t...baseClusterConfig,\n\t\tRPCEndpoint: rpcEndpoint,\n\t\tprogramId,\n\t\tgatewayProgramId,\n\t};\n\n\treturn clusterConfig;\n};\n\nexport const config: Config = ((): Config => {\n\tconst clusterConfig = getClusterConfig();\n\t// TODO: see what these options should be\n\t// TODO: make these configurable with environment variables\n\tconst confirmOptions: ConfirmOptions = {\n\t\tcommitment: \"processed\",\n\t\tpreflightCommitment: \"processed\",\n\t};\n\tconst MANAGEMENT_KEYS = [\n\t\t\"Ej5zJzej7rrUoDngsJ3jcpfuvfVyWpcDcK7uv9cE2LdL\",\n\t\t\"Ej5zJzej7rrUoDngsJ3jcpfuvfVyWpcDcK7uv9cE2LdL\",\n\t];\n\n\treturn {\n\t\tclusterConfig,\n\t\tidl: IDL as Idl,\n\t\tconfirmOptions,\n\t\tmanagementKeys: MANAGEMENT_KEYS,\n\t};\n})();\n"],"sourceRoot":""}